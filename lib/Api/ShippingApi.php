<?php
/**
 * ShippingApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPIClientUPSShipping\ApiException;
use OpenAPIClientUPSShipping\Configuration;
use OpenAPIClientUPSShipping\FormDataProcessor;
use OpenAPIClientUPSShipping\HeaderSelector;
use OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ShippingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShippingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deprecatedShipment' => [
            'application/json',
        ],
        'deprecatedVoidShipment' => [
            'application/json',
        ],
        'labelRecovery' => [
            'application/json',
        ],
        'shipment' => [
            'application/json',
        ],
        'voidShipment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deprecatedShipment
     *
     * Shipment
     *
     * @param  string $deprecatedVersion Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v1 - v1601 - v1607 - v1701 - v1707 - v1801 - v1807 - v2108 - v2205 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedShipment'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPIClientUPSShipping\Model\SHIPResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse
     * @deprecated
     */
    public function deprecatedShipment($deprecatedVersion, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['deprecatedShipment'][0])
    {
        list($response) = $this->deprecatedShipmentWithHttpInfo($deprecatedVersion, $sHIPRequestWrapper, $transId, $transactionSrc, $additionaladdressvalidation, $contentType);
        return $response;
    }

    /**
     * Operation deprecatedShipmentWithHttpInfo
     *
     * Shipment
     *
     * @param  string $deprecatedVersion Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v1 - v1601 - v1607 - v1701 - v1707 - v1801 - v1807 - v2108 - v2205 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedShipment'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIClientUPSShipping\Model\SHIPResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deprecatedShipmentWithHttpInfo($deprecatedVersion, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['deprecatedShipment'][0])
    {
        $request = $this->deprecatedShipmentRequest($deprecatedVersion, $sHIPRequestWrapper, $transId, $transactionSrc, $additionaladdressvalidation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\SHIPResponseWrapper',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPIClientUPSShipping\Model\SHIPResponseWrapper',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\SHIPResponseWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deprecatedShipmentAsync
     *
     * Shipment
     *
     * @param  string $deprecatedVersion Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v1 - v1601 - v1607 - v1701 - v1707 - v1801 - v1807 - v2108 - v2205 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deprecatedShipmentAsync($deprecatedVersion, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['deprecatedShipment'][0])
    {
        return $this->deprecatedShipmentAsyncWithHttpInfo($deprecatedVersion, $sHIPRequestWrapper, $transId, $transactionSrc, $additionaladdressvalidation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deprecatedShipmentAsyncWithHttpInfo
     *
     * Shipment
     *
     * @param  string $deprecatedVersion Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v1 - v1601 - v1607 - v1701 - v1707 - v1801 - v1807 - v2108 - v2205 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deprecatedShipmentAsyncWithHttpInfo($deprecatedVersion, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['deprecatedShipment'][0])
    {
        $returnType = '\OpenAPIClientUPSShipping\Model\SHIPResponseWrapper';
        $request = $this->deprecatedShipmentRequest($deprecatedVersion, $sHIPRequestWrapper, $transId, $transactionSrc, $additionaladdressvalidation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deprecatedShipment'
     *
     * @param  string $deprecatedVersion Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v1 - v1601 - v1607 - v1701 - v1707 - v1801 - v1807 - v2108 - v2205 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deprecatedShipmentRequest($deprecatedVersion, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['deprecatedShipment'][0])
    {

        // verify the required parameter 'deprecatedVersion' is set
        if ($deprecatedVersion === null || (is_array($deprecatedVersion) && count($deprecatedVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deprecatedVersion when calling deprecatedShipment'
            );
        }
        
        // verify the required parameter 'sHIPRequestWrapper' is set
        if ($sHIPRequestWrapper === null || (is_array($sHIPRequestWrapper) && count($sHIPRequestWrapper) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sHIPRequestWrapper when calling deprecatedShipment'
            );
        }



        

        $resourcePath = '/shipments/{deprecatedVersion}/ship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additionaladdressvalidation,
            'additionaladdressvalidation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($transId !== null) {
            $headerParams['transId'] = ObjectSerializer::toHeaderValue($transId);
        }
        // header params
        if ($transactionSrc !== null) {
            $headerParams['transactionSrc'] = ObjectSerializer::toHeaderValue($transactionSrc);
        }

        // path params
        if ($deprecatedVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'deprecatedVersion' . '}',
                ObjectSerializer::toPathValue($deprecatedVersion),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sHIPRequestWrapper)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sHIPRequestWrapper));
            } else {
                $httpBody = $sHIPRequestWrapper;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deprecatedVoidShipment
     *
     * Void Shipment
     *
     * @param  string $deprecatedVersion API Version.  Valid values: - v1 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedVoidShipment'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse
     * @deprecated
     */
    public function deprecatedVoidShipment($deprecatedVersion, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['deprecatedVoidShipment'][0])
    {
        list($response) = $this->deprecatedVoidShipmentWithHttpInfo($deprecatedVersion, $shipmentidentificationnumber, $transId, $transactionSrc, $trackingnumber, $contentType);
        return $response;
    }

    /**
     * Operation deprecatedVoidShipmentWithHttpInfo
     *
     * Void Shipment
     *
     * @param  string $deprecatedVersion API Version.  Valid values: - v1 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedVoidShipment'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deprecatedVoidShipmentWithHttpInfo($deprecatedVersion, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['deprecatedVoidShipment'][0])
    {
        $request = $this->deprecatedVoidShipmentRequest($deprecatedVersion, $shipmentidentificationnumber, $transId, $transactionSrc, $trackingnumber, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deprecatedVoidShipmentAsync
     *
     * Void Shipment
     *
     * @param  string $deprecatedVersion API Version.  Valid values: - v1 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedVoidShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deprecatedVoidShipmentAsync($deprecatedVersion, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['deprecatedVoidShipment'][0])
    {
        return $this->deprecatedVoidShipmentAsyncWithHttpInfo($deprecatedVersion, $shipmentidentificationnumber, $transId, $transactionSrc, $trackingnumber, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deprecatedVoidShipmentAsyncWithHttpInfo
     *
     * Void Shipment
     *
     * @param  string $deprecatedVersion API Version.  Valid values: - v1 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedVoidShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deprecatedVoidShipmentAsyncWithHttpInfo($deprecatedVersion, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['deprecatedVoidShipment'][0])
    {
        $returnType = '\OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper';
        $request = $this->deprecatedVoidShipmentRequest($deprecatedVersion, $shipmentidentificationnumber, $transId, $transactionSrc, $trackingnumber, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deprecatedVoidShipment'
     *
     * @param  string $deprecatedVersion API Version.  Valid values: - v1 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deprecatedVoidShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deprecatedVoidShipmentRequest($deprecatedVersion, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['deprecatedVoidShipment'][0])
    {

        // verify the required parameter 'deprecatedVersion' is set
        if ($deprecatedVersion === null || (is_array($deprecatedVersion) && count($deprecatedVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deprecatedVersion when calling deprecatedVoidShipment'
            );
        }

        // verify the required parameter 'shipmentidentificationnumber' is set
        if ($shipmentidentificationnumber === null || (is_array($shipmentidentificationnumber) && count($shipmentidentificationnumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentidentificationnumber when calling deprecatedVoidShipment'
            );
        }
        


        

        $resourcePath = '/shipments/{deprecatedVersion}/void/cancel/{shipmentidentificationnumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trackingnumber,
            'trackingnumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($transId !== null) {
            $headerParams['transId'] = ObjectSerializer::toHeaderValue($transId);
        }
        // header params
        if ($transactionSrc !== null) {
            $headerParams['transactionSrc'] = ObjectSerializer::toHeaderValue($transactionSrc);
        }

        // path params
        if ($deprecatedVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'deprecatedVersion' . '}',
                ObjectSerializer::toPathValue($deprecatedVersion),
                $resourcePath
            );
        }
        // path params
        if ($shipmentidentificationnumber !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentidentificationnumber' . '}',
                ObjectSerializer::toPathValue($shipmentidentificationnumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation labelRecovery
     *
     * Label Recovery
     *
     * @param  string $version When UPS introduces new elements in the  response that are not associated with new  request elements, Subversion is used. This  ensures backward compatibility.  v1  original features of the application. No  support for CODTurn-inPage, HighValueReport  or InternationalForms features returned in the  response v1701  includes support for CODTurn-inPage  features returned in the response. V1903  Length 5 (required)
     * @param  \OpenAPIClientUPSShipping\Model\LABELRECOVERYRequestWrapper $lABELRECOVERYRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['labelRecovery'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPIClientUPSShipping\Model\LABELRECOVERYResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse
     */
    public function labelRecovery($version, $lABELRECOVERYRequestWrapper, $transId = null, $transactionSrc = 'testing', string $contentType = self::contentTypes['labelRecovery'][0])
    {
        list($response) = $this->labelRecoveryWithHttpInfo($version, $lABELRECOVERYRequestWrapper, $transId, $transactionSrc, $contentType);
        return $response;
    }

    /**
     * Operation labelRecoveryWithHttpInfo
     *
     * Label Recovery
     *
     * @param  string $version When UPS introduces new elements in the  response that are not associated with new  request elements, Subversion is used. This  ensures backward compatibility.  v1  original features of the application. No  support for CODTurn-inPage, HighValueReport  or InternationalForms features returned in the  response v1701  includes support for CODTurn-inPage  features returned in the response. V1903  Length 5 (required)
     * @param  \OpenAPIClientUPSShipping\Model\LABELRECOVERYRequestWrapper $lABELRECOVERYRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['labelRecovery'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIClientUPSShipping\Model\LABELRECOVERYResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function labelRecoveryWithHttpInfo($version, $lABELRECOVERYRequestWrapper, $transId = null, $transactionSrc = 'testing', string $contentType = self::contentTypes['labelRecovery'][0])
    {
        $request = $this->labelRecoveryRequest($version, $lABELRECOVERYRequestWrapper, $transId, $transactionSrc, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\LABELRECOVERYResponseWrapper',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPIClientUPSShipping\Model\LABELRECOVERYResponseWrapper',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\LABELRECOVERYResponseWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation labelRecoveryAsync
     *
     * Label Recovery
     *
     * @param  string $version When UPS introduces new elements in the  response that are not associated with new  request elements, Subversion is used. This  ensures backward compatibility.  v1  original features of the application. No  support for CODTurn-inPage, HighValueReport  or InternationalForms features returned in the  response v1701  includes support for CODTurn-inPage  features returned in the response. V1903  Length 5 (required)
     * @param  \OpenAPIClientUPSShipping\Model\LABELRECOVERYRequestWrapper $lABELRECOVERYRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['labelRecovery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function labelRecoveryAsync($version, $lABELRECOVERYRequestWrapper, $transId = null, $transactionSrc = 'testing', string $contentType = self::contentTypes['labelRecovery'][0])
    {
        return $this->labelRecoveryAsyncWithHttpInfo($version, $lABELRECOVERYRequestWrapper, $transId, $transactionSrc, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation labelRecoveryAsyncWithHttpInfo
     *
     * Label Recovery
     *
     * @param  string $version When UPS introduces new elements in the  response that are not associated with new  request elements, Subversion is used. This  ensures backward compatibility.  v1  original features of the application. No  support for CODTurn-inPage, HighValueReport  or InternationalForms features returned in the  response v1701  includes support for CODTurn-inPage  features returned in the response. V1903  Length 5 (required)
     * @param  \OpenAPIClientUPSShipping\Model\LABELRECOVERYRequestWrapper $lABELRECOVERYRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['labelRecovery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function labelRecoveryAsyncWithHttpInfo($version, $lABELRECOVERYRequestWrapper, $transId = null, $transactionSrc = 'testing', string $contentType = self::contentTypes['labelRecovery'][0])
    {
        $returnType = '\OpenAPIClientUPSShipping\Model\LABELRECOVERYResponseWrapper';
        $request = $this->labelRecoveryRequest($version, $lABELRECOVERYRequestWrapper, $transId, $transactionSrc, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'labelRecovery'
     *
     * @param  string $version When UPS introduces new elements in the  response that are not associated with new  request elements, Subversion is used. This  ensures backward compatibility.  v1  original features of the application. No  support for CODTurn-inPage, HighValueReport  or InternationalForms features returned in the  response v1701  includes support for CODTurn-inPage  features returned in the response. V1903  Length 5 (required)
     * @param  \OpenAPIClientUPSShipping\Model\LABELRECOVERYRequestWrapper $lABELRECOVERYRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['labelRecovery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function labelRecoveryRequest($version, $lABELRECOVERYRequestWrapper, $transId = null, $transactionSrc = 'testing', string $contentType = self::contentTypes['labelRecovery'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling labelRecovery'
            );
        }
        
        // verify the required parameter 'lABELRECOVERYRequestWrapper' is set
        if ($lABELRECOVERYRequestWrapper === null || (is_array($lABELRECOVERYRequestWrapper) && count($lABELRECOVERYRequestWrapper) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lABELRECOVERYRequestWrapper when calling labelRecovery'
            );
        }




        $resourcePath = '/labels/{version}/recovery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($transId !== null) {
            $headerParams['transId'] = ObjectSerializer::toHeaderValue($transId);
        }
        // header params
        if ($transactionSrc !== null) {
            $headerParams['transactionSrc'] = ObjectSerializer::toHeaderValue($transactionSrc);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($lABELRECOVERYRequestWrapper)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($lABELRECOVERYRequestWrapper));
            } else {
                $httpBody = $lABELRECOVERYRequestWrapper;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipment
     *
     * Shipment
     *
     * @param  string $version Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v2409 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipment'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPIClientUPSShipping\Model\SHIPResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse
     */
    public function shipment($version, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['shipment'][0])
    {
        list($response) = $this->shipmentWithHttpInfo($version, $sHIPRequestWrapper, $transId, $transactionSrc, $additionaladdressvalidation, $contentType);
        return $response;
    }

    /**
     * Operation shipmentWithHttpInfo
     *
     * Shipment
     *
     * @param  string $version Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v2409 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipment'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIClientUPSShipping\Model\SHIPResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentWithHttpInfo($version, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['shipment'][0])
    {
        $request = $this->shipmentRequest($version, $sHIPRequestWrapper, $transId, $transactionSrc, $additionaladdressvalidation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\SHIPResponseWrapper',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPIClientUPSShipping\Model\SHIPResponseWrapper',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\SHIPResponseWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation shipmentAsync
     *
     * Shipment
     *
     * @param  string $version Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v2409 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentAsync($version, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['shipment'][0])
    {
        return $this->shipmentAsyncWithHttpInfo($version, $sHIPRequestWrapper, $transId, $transactionSrc, $additionaladdressvalidation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentAsyncWithHttpInfo
     *
     * Shipment
     *
     * @param  string $version Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v2409 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentAsyncWithHttpInfo($version, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['shipment'][0])
    {
        $returnType = '\OpenAPIClientUPSShipping\Model\SHIPResponseWrapper';
        $request = $this->shipmentRequest($version, $sHIPRequestWrapper, $transId, $transactionSrc, $additionaladdressvalidation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipment'
     *
     * @param  string $version Indicates Ship API to display the new release features in Ship API response based on Ship release.  Valid values: - v2409 (required)
     * @param  \OpenAPIClientUPSShipping\Model\SHIPRequestWrapper $sHIPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $additionaladdressvalidation Valid Values:  city &#x3D; validation will include city.Length 15 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentRequest($version, $sHIPRequestWrapper, $transId = null, $transactionSrc = 'testing', $additionaladdressvalidation = null, string $contentType = self::contentTypes['shipment'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling shipment'
            );
        }
        
        // verify the required parameter 'sHIPRequestWrapper' is set
        if ($sHIPRequestWrapper === null || (is_array($sHIPRequestWrapper) && count($sHIPRequestWrapper) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sHIPRequestWrapper when calling shipment'
            );
        }



        

        $resourcePath = '/shipments/{version}/ship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additionaladdressvalidation,
            'additionaladdressvalidation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($transId !== null) {
            $headerParams['transId'] = ObjectSerializer::toHeaderValue($transId);
        }
        // header params
        if ($transactionSrc !== null) {
            $headerParams['transactionSrc'] = ObjectSerializer::toHeaderValue($transactionSrc);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sHIPRequestWrapper)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sHIPRequestWrapper));
            } else {
                $httpBody = $sHIPRequestWrapper;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidShipment
     *
     * Void Shipment
     *
     * @param  string $version API Version  Valid values: - v2409 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidShipment'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse
     */
    public function voidShipment($version, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['voidShipment'][0])
    {
        list($response) = $this->voidShipmentWithHttpInfo($version, $shipmentidentificationnumber, $transId, $transactionSrc, $trackingnumber, $contentType);
        return $response;
    }

    /**
     * Operation voidShipmentWithHttpInfo
     *
     * Void Shipment
     *
     * @param  string $version API Version  Valid values: - v2409 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidShipment'] to see the possible values for this operation
     *
     * @throws \OpenAPIClientUPSShipping\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse|\OpenAPIClientUPSShipping\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidShipmentWithHttpInfo($version, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['voidShipment'][0])
    {
        $request = $this->voidShipmentRequest($version, $shipmentidentificationnumber, $transId, $transactionSrc, $trackingnumber, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIClientUPSShipping\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation voidShipmentAsync
     *
     * Void Shipment
     *
     * @param  string $version API Version  Valid values: - v2409 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidShipmentAsync($version, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['voidShipment'][0])
    {
        return $this->voidShipmentAsyncWithHttpInfo($version, $shipmentidentificationnumber, $transId, $transactionSrc, $trackingnumber, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidShipmentAsyncWithHttpInfo
     *
     * Void Shipment
     *
     * @param  string $version API Version  Valid values: - v2409 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidShipmentAsyncWithHttpInfo($version, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['voidShipment'][0])
    {
        $returnType = '\OpenAPIClientUPSShipping\Model\VOIDSHIPMENTResponseWrapper';
        $request = $this->voidShipmentRequest($version, $shipmentidentificationnumber, $transId, $transactionSrc, $trackingnumber, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidShipment'
     *
     * @param  string $version API Version  Valid values: - v2409 (required)
     * @param  string $shipmentidentificationnumber The shipment&#39;s identification number  Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (required)
     * @param  string|null $transId An identifier unique to the request. Length 32 (optional)
     * @param  string|null $transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to 'testing')
     * @param  string|null $trackingnumber The package&#39;s tracking number. You may have  up to 20 different tracking numbers listed. If more than one tracking number, pass this  value as: trackingnumber&#x3D;  [\&quot;1ZISUS010330563105\&quot;,\&quot;1ZISUS01033056310 8\&quot;] with a coma separating each number. Alpha-numeric. Must pass 1Z rules. Must be  upper case. Length 18 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function voidShipmentRequest($version, $shipmentidentificationnumber, $transId = null, $transactionSrc = 'testing', $trackingnumber = null, string $contentType = self::contentTypes['voidShipment'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling voidShipment'
            );
        }

        // verify the required parameter 'shipmentidentificationnumber' is set
        if ($shipmentidentificationnumber === null || (is_array($shipmentidentificationnumber) && count($shipmentidentificationnumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentidentificationnumber when calling voidShipment'
            );
        }
        


        

        $resourcePath = '/shipments/{version}/void/cancel/{shipmentidentificationnumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trackingnumber,
            'trackingnumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($transId !== null) {
            $headerParams['transId'] = ObjectSerializer::toHeaderValue($transId);
        }
        // header params
        if ($transactionSrc !== null) {
            $headerParams['transactionSrc'] = ObjectSerializer::toHeaderValue($transactionSrc);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($shipmentidentificationnumber !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentidentificationnumber' . '}',
                ObjectSerializer::toPathValue($shipmentidentificationnumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
