<?php
/**
 * InternationalFormsCN22Form
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * InternationalFormsCN22Form Class Doc Comment
 *
 * @category Class
 * @description Container for the CN22 form.  Required if the customer wants to use the UPS generated CN22.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InternationalFormsCN22Form implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InternationalForms_CN22Form';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'labelSize' => 'string',
        'printsPerPage' => 'string',
        'labelPrintType' => 'string',
        'cN22Type' => 'string',
        'cN22OtherDescription' => 'string',
        'foldHereText' => 'string',
        'cN22Content' => '\OpenAPIClientUPSShipping\Model\CN22FormCN22Content[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'labelSize' => null,
        'printsPerPage' => null,
        'labelPrintType' => null,
        'cN22Type' => null,
        'cN22OtherDescription' => null,
        'foldHereText' => null,
        'cN22Content' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'labelSize' => false,
        'printsPerPage' => false,
        'labelPrintType' => false,
        'cN22Type' => false,
        'cN22OtherDescription' => false,
        'foldHereText' => false,
        'cN22Content' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'labelSize' => 'LabelSize',
        'printsPerPage' => 'PrintsPerPage',
        'labelPrintType' => 'LabelPrintType',
        'cN22Type' => 'CN22Type',
        'cN22OtherDescription' => 'CN22OtherDescription',
        'foldHereText' => 'FoldHereText',
        'cN22Content' => 'CN22Content'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'labelSize' => 'setLabelSize',
        'printsPerPage' => 'setPrintsPerPage',
        'labelPrintType' => 'setLabelPrintType',
        'cN22Type' => 'setCN22Type',
        'cN22OtherDescription' => 'setCN22OtherDescription',
        'foldHereText' => 'setFoldHereText',
        'cN22Content' => 'setCN22Content'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'labelSize' => 'getLabelSize',
        'printsPerPage' => 'getPrintsPerPage',
        'labelPrintType' => 'getLabelPrintType',
        'cN22Type' => 'getCN22Type',
        'cN22OtherDescription' => 'getCN22OtherDescription',
        'foldHereText' => 'getFoldHereText',
        'cN22Content' => 'getCN22Content'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('labelSize', $data ?? [], null);
        $this->setIfExists('printsPerPage', $data ?? [], null);
        $this->setIfExists('labelPrintType', $data ?? [], null);
        $this->setIfExists('cN22Type', $data ?? [], null);
        $this->setIfExists('cN22OtherDescription', $data ?? [], null);
        $this->setIfExists('foldHereText', $data ?? [], null);
        $this->setIfExists('cN22Content', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['labelSize'] === null) {
            $invalidProperties[] = "'labelSize' can't be null";
        }
        if ((mb_strlen($this->container['labelSize']) > 2)) {
            $invalidProperties[] = "invalid value for 'labelSize', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['labelSize']) < 2)) {
            $invalidProperties[] = "invalid value for 'labelSize', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['printsPerPage'] === null) {
            $invalidProperties[] = "'printsPerPage' can't be null";
        }
        if ((mb_strlen($this->container['printsPerPage']) > 1)) {
            $invalidProperties[] = "invalid value for 'printsPerPage', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['printsPerPage']) < 1)) {
            $invalidProperties[] = "invalid value for 'printsPerPage', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['labelPrintType'] === null) {
            $invalidProperties[] = "'labelPrintType' can't be null";
        }
        if ((mb_strlen($this->container['labelPrintType']) > 4)) {
            $invalidProperties[] = "invalid value for 'labelPrintType', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['labelPrintType']) < 1)) {
            $invalidProperties[] = "invalid value for 'labelPrintType', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['cN22Type'] === null) {
            $invalidProperties[] = "'cN22Type' can't be null";
        }
        if ((mb_strlen($this->container['cN22Type']) > 1)) {
            $invalidProperties[] = "invalid value for 'cN22Type', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['cN22Type']) < 1)) {
            $invalidProperties[] = "invalid value for 'cN22Type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cN22OtherDescription']) && (mb_strlen($this->container['cN22OtherDescription']) > 20)) {
            $invalidProperties[] = "invalid value for 'cN22OtherDescription', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['cN22OtherDescription']) && (mb_strlen($this->container['cN22OtherDescription']) < 20)) {
            $invalidProperties[] = "invalid value for 'cN22OtherDescription', the character length must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['foldHereText']) && (mb_strlen($this->container['foldHereText']) > 35)) {
            $invalidProperties[] = "invalid value for 'foldHereText', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['foldHereText']) && (mb_strlen($this->container['foldHereText']) < 35)) {
            $invalidProperties[] = "invalid value for 'foldHereText', the character length must be bigger than or equal to 35.";
        }

        if ($this->container['cN22Content'] === null) {
            $invalidProperties[] = "'cN22Content' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets labelSize
     *
     * @return string
     */
    public function getLabelSize()
    {
        return $this->container['labelSize'];
    }

    /**
     * Sets labelSize
     *
     * @param string $labelSize Provide the valid values:  6 = 4X6 1 = 8.5X11   Required if the CN22 form container is present.
     *
     * @return self
     */
    public function setLabelSize($labelSize)
    {
        if (is_null($labelSize)) {
            throw new \InvalidArgumentException('non-nullable labelSize cannot be null');
        }
        if ((mb_strlen($labelSize) > 2)) {
            throw new \InvalidArgumentException('invalid length for $labelSize when calling InternationalFormsCN22Form., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($labelSize) < 2)) {
            throw new \InvalidArgumentException('invalid length for $labelSize when calling InternationalFormsCN22Form., must be bigger than or equal to 2.');
        }

        $this->container['labelSize'] = $labelSize;

        return $this;
    }

    /**
     * Gets printsPerPage
     *
     * @return string
     */
    public function getPrintsPerPage()
    {
        return $this->container['printsPerPage'];
    }

    /**
     * Sets printsPerPage
     *
     * @param string $printsPerPage Number of label per page. Currently 1 per page is supported.  Required if the CN22 form container is present.
     *
     * @return self
     */
    public function setPrintsPerPage($printsPerPage)
    {
        if (is_null($printsPerPage)) {
            throw new \InvalidArgumentException('non-nullable printsPerPage cannot be null');
        }
        if ((mb_strlen($printsPerPage) > 1)) {
            throw new \InvalidArgumentException('invalid length for $printsPerPage when calling InternationalFormsCN22Form., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($printsPerPage) < 1)) {
            throw new \InvalidArgumentException('invalid length for $printsPerPage when calling InternationalFormsCN22Form., must be bigger than or equal to 1.');
        }

        $this->container['printsPerPage'] = $printsPerPage;

        return $this;
    }

    /**
     * Gets labelPrintType
     *
     * @return string
     */
    public function getLabelPrintType()
    {
        return $this->container['labelPrintType'];
    }

    /**
     * Sets labelPrintType
     *
     * @param string $labelPrintType Valid Values are pdf, png, gif, zpl, star, epl2 and spl.   Required if the CN22 form container is present.
     *
     * @return self
     */
    public function setLabelPrintType($labelPrintType)
    {
        if (is_null($labelPrintType)) {
            throw new \InvalidArgumentException('non-nullable labelPrintType cannot be null');
        }
        if ((mb_strlen($labelPrintType) > 4)) {
            throw new \InvalidArgumentException('invalid length for $labelPrintType when calling InternationalFormsCN22Form., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($labelPrintType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $labelPrintType when calling InternationalFormsCN22Form., must be bigger than or equal to 1.');
        }

        $this->container['labelPrintType'] = $labelPrintType;

        return $this;
    }

    /**
     * Gets cN22Type
     *
     * @return string
     */
    public function getCN22Type()
    {
        return $this->container['cN22Type'];
    }

    /**
     * Sets cN22Type
     *
     * @param string $cN22Type Valid values:  1 = GIFT 2 = DOCUMENTS 3 = COMMERCIAL SAMPLE 4 = OTHER  Required if the CN22 form container is present.
     *
     * @return self
     */
    public function setCN22Type($cN22Type)
    {
        if (is_null($cN22Type)) {
            throw new \InvalidArgumentException('non-nullable cN22Type cannot be null');
        }
        if ((mb_strlen($cN22Type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $cN22Type when calling InternationalFormsCN22Form., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($cN22Type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cN22Type when calling InternationalFormsCN22Form., must be bigger than or equal to 1.');
        }

        $this->container['cN22Type'] = $cN22Type;

        return $this;
    }

    /**
     * Gets cN22OtherDescription
     *
     * @return string|null
     */
    public function getCN22OtherDescription()
    {
        return $this->container['cN22OtherDescription'];
    }

    /**
     * Sets cN22OtherDescription
     *
     * @param string|null $cN22OtherDescription Required if CN22Type is OTHER.  Required if the CN22 form container is present.
     *
     * @return self
     */
    public function setCN22OtherDescription($cN22OtherDescription)
    {
        if (is_null($cN22OtherDescription)) {
            throw new \InvalidArgumentException('non-nullable cN22OtherDescription cannot be null');
        }
        if ((mb_strlen($cN22OtherDescription) > 20)) {
            throw new \InvalidArgumentException('invalid length for $cN22OtherDescription when calling InternationalFormsCN22Form., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($cN22OtherDescription) < 20)) {
            throw new \InvalidArgumentException('invalid length for $cN22OtherDescription when calling InternationalFormsCN22Form., must be bigger than or equal to 20.');
        }

        $this->container['cN22OtherDescription'] = $cN22OtherDescription;

        return $this;
    }

    /**
     * Gets foldHereText
     *
     * @return string|null
     */
    public function getFoldHereText()
    {
        return $this->container['foldHereText'];
    }

    /**
     * Sets foldHereText
     *
     * @param string|null $foldHereText String will replace default \"Fold Here\" text displayed on the label.
     *
     * @return self
     */
    public function setFoldHereText($foldHereText)
    {
        if (is_null($foldHereText)) {
            throw new \InvalidArgumentException('non-nullable foldHereText cannot be null');
        }
        if ((mb_strlen($foldHereText) > 35)) {
            throw new \InvalidArgumentException('invalid length for $foldHereText when calling InternationalFormsCN22Form., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($foldHereText) < 35)) {
            throw new \InvalidArgumentException('invalid length for $foldHereText when calling InternationalFormsCN22Form., must be bigger than or equal to 35.');
        }

        $this->container['foldHereText'] = $foldHereText;

        return $this;
    }

    /**
     * Gets cN22Content
     *
     * @return \OpenAPIClientUPSShipping\Model\CN22FormCN22Content[]
     */
    public function getCN22Content()
    {
        return $this->container['cN22Content'];
    }

    /**
     * Sets cN22Content
     *
     * @param \OpenAPIClientUPSShipping\Model\CN22FormCN22Content[] $cN22Content cN22Content
     *
     * @return self
     */
    public function setCN22Content($cN22Content)
    {
        if (is_null($cN22Content)) {
            throw new \InvalidArgumentException('non-nullable cN22Content cannot be null');
        }


        $this->container['cN22Content'] = $cN22Content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


