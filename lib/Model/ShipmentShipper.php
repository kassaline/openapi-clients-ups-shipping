<?php
/**
 * ShipmentShipper
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ShipmentShipper Class Doc Comment
 *
 * @category Class
 * @description Container for the Shipper&#39;s information.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentShipper implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment_Shipper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'attentionName' => 'string',
        'companyDisplayableName' => 'string',
        'taxIdentificationNumber' => 'string',
        'phone' => '\OpenAPIClientUPSShipping\Model\ShipperPhone',
        'shipperNumber' => 'string',
        'faxNumber' => 'string',
        'eMailAddress' => 'string',
        'address' => '\OpenAPIClientUPSShipping\Model\ShipperAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'attentionName' => null,
        'companyDisplayableName' => null,
        'taxIdentificationNumber' => null,
        'phone' => null,
        'shipperNumber' => null,
        'faxNumber' => null,
        'eMailAddress' => null,
        'address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'attentionName' => false,
        'companyDisplayableName' => false,
        'taxIdentificationNumber' => false,
        'phone' => false,
        'shipperNumber' => false,
        'faxNumber' => false,
        'eMailAddress' => false,
        'address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'attentionName' => 'AttentionName',
        'companyDisplayableName' => 'CompanyDisplayableName',
        'taxIdentificationNumber' => 'TaxIdentificationNumber',
        'phone' => 'Phone',
        'shipperNumber' => 'ShipperNumber',
        'faxNumber' => 'FaxNumber',
        'eMailAddress' => 'EMailAddress',
        'address' => 'Address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'attentionName' => 'setAttentionName',
        'companyDisplayableName' => 'setCompanyDisplayableName',
        'taxIdentificationNumber' => 'setTaxIdentificationNumber',
        'phone' => 'setPhone',
        'shipperNumber' => 'setShipperNumber',
        'faxNumber' => 'setFaxNumber',
        'eMailAddress' => 'setEMailAddress',
        'address' => 'setAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'attentionName' => 'getAttentionName',
        'companyDisplayableName' => 'getCompanyDisplayableName',
        'taxIdentificationNumber' => 'getTaxIdentificationNumber',
        'phone' => 'getPhone',
        'shipperNumber' => 'getShipperNumber',
        'faxNumber' => 'getFaxNumber',
        'eMailAddress' => 'getEMailAddress',
        'address' => 'getAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('attentionName', $data ?? [], null);
        $this->setIfExists('companyDisplayableName', $data ?? [], null);
        $this->setIfExists('taxIdentificationNumber', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('shipperNumber', $data ?? [], null);
        $this->setIfExists('faxNumber', $data ?? [], null);
        $this->setIfExists('eMailAddress', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['attentionName']) && (mb_strlen($this->container['attentionName']) > 35)) {
            $invalidProperties[] = "invalid value for 'attentionName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['attentionName']) && (mb_strlen($this->container['attentionName']) < 1)) {
            $invalidProperties[] = "invalid value for 'attentionName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['companyDisplayableName']) && (mb_strlen($this->container['companyDisplayableName']) > 35)) {
            $invalidProperties[] = "invalid value for 'companyDisplayableName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['companyDisplayableName']) && (mb_strlen($this->container['companyDisplayableName']) < 1)) {
            $invalidProperties[] = "invalid value for 'companyDisplayableName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['taxIdentificationNumber']) && (mb_strlen($this->container['taxIdentificationNumber']) > 15)) {
            $invalidProperties[] = "invalid value for 'taxIdentificationNumber', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['taxIdentificationNumber']) && (mb_strlen($this->container['taxIdentificationNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'taxIdentificationNumber', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['shipperNumber'] === null) {
            $invalidProperties[] = "'shipperNumber' can't be null";
        }
        if ((mb_strlen($this->container['shipperNumber']) > 6)) {
            $invalidProperties[] = "invalid value for 'shipperNumber', the character length must be smaller than or equal to 6.";
        }

        if ((mb_strlen($this->container['shipperNumber']) < 6)) {
            $invalidProperties[] = "invalid value for 'shipperNumber', the character length must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['faxNumber']) && (mb_strlen($this->container['faxNumber']) > 14)) {
            $invalidProperties[] = "invalid value for 'faxNumber', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['faxNumber']) && (mb_strlen($this->container['faxNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'faxNumber', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['eMailAddress']) && (mb_strlen($this->container['eMailAddress']) > 50)) {
            $invalidProperties[] = "invalid value for 'eMailAddress', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['eMailAddress']) && (mb_strlen($this->container['eMailAddress']) < 1)) {
            $invalidProperties[] = "invalid value for 'eMailAddress', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Shippers company name.   For forward Shipment 35 characters are accepted, but only 30 characters will be printed on the label.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ShipmentShipper., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ShipmentShipper., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets attentionName
     *
     * @return string|null
     */
    public function getAttentionName()
    {
        return $this->container['attentionName'];
    }

    /**
     * Sets attentionName
     *
     * @param string|null $attentionName Shippers Attention Name.   For forward Shipment 35 characters are accepted, but only 30 characters will be printed on the label.  Required if destination is international. Required if Invoice and CO International forms are requested and the ShipFrom address is not present.
     *
     * @return self
     */
    public function setAttentionName($attentionName)
    {
        if (is_null($attentionName)) {
            throw new \InvalidArgumentException('non-nullable attentionName cannot be null');
        }
        if ((mb_strlen($attentionName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $attentionName when calling ShipmentShipper., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($attentionName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $attentionName when calling ShipmentShipper., must be bigger than or equal to 1.');
        }

        $this->container['attentionName'] = $attentionName;

        return $this;
    }

    /**
     * Gets companyDisplayableName
     *
     * @return string|null
     */
    public function getCompanyDisplayableName()
    {
        return $this->container['companyDisplayableName'];
    }

    /**
     * Sets companyDisplayableName
     *
     * @param string|null $companyDisplayableName Shipper's CompanyDisplayableName.  The CompanyDisplayableName will be displayed in tracking results and notification messages in place of the name associated with the shipper account.  The original shipper account name will be displayed for all Return Services and Import Control Shipments.  This is available for Shipper accounts enabled by UPS and applies to Forward Shipments.
     *
     * @return self
     */
    public function setCompanyDisplayableName($companyDisplayableName)
    {
        if (is_null($companyDisplayableName)) {
            throw new \InvalidArgumentException('non-nullable companyDisplayableName cannot be null');
        }
        if ((mb_strlen($companyDisplayableName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $companyDisplayableName when calling ShipmentShipper., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($companyDisplayableName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $companyDisplayableName when calling ShipmentShipper., must be bigger than or equal to 1.');
        }

        $this->container['companyDisplayableName'] = $companyDisplayableName;

        return $this;
    }

    /**
     * Gets taxIdentificationNumber
     *
     * @return string|null
     * @deprecated
     */
    public function getTaxIdentificationNumber()
    {
        return $this->container['taxIdentificationNumber'];
    }

    /**
     * Sets taxIdentificationNumber
     *
     * @param string|null $taxIdentificationNumber Shipper's Tax Identification Number.  Conditionally required if EEI form (International forms) is requested and ship From is not mentioned. This element has been deprecated, replacement can be found in the GlobalTaxInformation container.
     *
     * @return self
     * @deprecated
     */
    public function setTaxIdentificationNumber($taxIdentificationNumber)
    {
        if (is_null($taxIdentificationNumber)) {
            throw new \InvalidArgumentException('non-nullable taxIdentificationNumber cannot be null');
        }
        if ((mb_strlen($taxIdentificationNumber) > 15)) {
            throw new \InvalidArgumentException('invalid length for $taxIdentificationNumber when calling ShipmentShipper., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($taxIdentificationNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $taxIdentificationNumber when calling ShipmentShipper., must be bigger than or equal to 1.');
        }

        $this->container['taxIdentificationNumber'] = $taxIdentificationNumber;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipperPhone|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipperPhone|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets shipperNumber
     *
     * @return string
     */
    public function getShipperNumber()
    {
        return $this->container['shipperNumber'];
    }

    /**
     * Sets shipperNumber
     *
     * @param string $shipperNumber Shipper's six digit alphanumeric account number.  Must be associated with the UserId specified in the AccessRequest XML.   The account must be a valid UPS account number that is active.   For US, PR and CA accounts, the account must be either a daily pickup account, an occasional account, or a customer B.I.N account.   Drop Shipper accounts are valid for return service shipments only if the account is Trade Direct (TD) enabled.   All other accounts must be either a daily pickup account or an occasional account.
     *
     * @return self
     */
    public function setShipperNumber($shipperNumber)
    {
        if (is_null($shipperNumber)) {
            throw new \InvalidArgumentException('non-nullable shipperNumber cannot be null');
        }
        if ((mb_strlen($shipperNumber) > 6)) {
            throw new \InvalidArgumentException('invalid length for $shipperNumber when calling ShipmentShipper., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($shipperNumber) < 6)) {
            throw new \InvalidArgumentException('invalid length for $shipperNumber when calling ShipmentShipper., must be bigger than or equal to 6.');
        }

        $this->container['shipperNumber'] = $shipperNumber;

        return $this;
    }

    /**
     * Gets faxNumber
     *
     * @return string|null
     */
    public function getFaxNumber()
    {
        return $this->container['faxNumber'];
    }

    /**
     * Sets faxNumber
     *
     * @param string|null $faxNumber Shipper's Fax Number.
     *
     * @return self
     */
    public function setFaxNumber($faxNumber)
    {
        if (is_null($faxNumber)) {
            throw new \InvalidArgumentException('non-nullable faxNumber cannot be null');
        }
        if ((mb_strlen($faxNumber) > 14)) {
            throw new \InvalidArgumentException('invalid length for $faxNumber when calling ShipmentShipper., must be smaller than or equal to 14.');
        }
        if ((mb_strlen($faxNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $faxNumber when calling ShipmentShipper., must be bigger than or equal to 1.');
        }

        $this->container['faxNumber'] = $faxNumber;

        return $this;
    }

    /**
     * Gets eMailAddress
     *
     * @return string|null
     */
    public function getEMailAddress()
    {
        return $this->container['eMailAddress'];
    }

    /**
     * Sets eMailAddress
     *
     * @param string|null $eMailAddress Shipper's email address.  Must be associated with the UserId specified in the AccessRequest XML.
     *
     * @return self
     */
    public function setEMailAddress($eMailAddress)
    {
        if (is_null($eMailAddress)) {
            throw new \InvalidArgumentException('non-nullable eMailAddress cannot be null');
        }
        if ((mb_strlen($eMailAddress) > 50)) {
            throw new \InvalidArgumentException('invalid length for $eMailAddress when calling ShipmentShipper., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($eMailAddress) < 1)) {
            throw new \InvalidArgumentException('invalid length for $eMailAddress when calling ShipmentShipper., must be bigger than or equal to 1.');
        }

        $this->container['eMailAddress'] = $eMailAddress;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipperAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipperAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


