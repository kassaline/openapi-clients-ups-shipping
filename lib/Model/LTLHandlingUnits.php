<?php
/**
 * LTLHandlingUnits
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * LTLHandlingUnits Class Doc Comment
 *
 * @category Class
 * @description Used to provide information about the handling units in the package/ltl.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LTLHandlingUnits implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LTL_Handling_Units';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'quantity' => 'string',
        'type' => 'string',
        'freightClass' => 'string',
        'dimensions' => '\OpenAPIClientUPSShipping\Model\LTLDimensions',
        'packageWeight' => '\OpenAPIClientUPSShipping\Model\LTLPackageWeightType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'quantity' => null,
        'type' => null,
        'freightClass' => null,
        'dimensions' => null,
        'packageWeight' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'quantity' => false,
        'type' => false,
        'freightClass' => false,
        'dimensions' => false,
        'packageWeight' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quantity' => 'Quantity',
        'type' => 'Type',
        'freightClass' => 'FreightClass',
        'dimensions' => 'Dimensions',
        'packageWeight' => 'PackageWeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quantity' => 'setQuantity',
        'type' => 'setType',
        'freightClass' => 'setFreightClass',
        'dimensions' => 'setDimensions',
        'packageWeight' => 'setPackageWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quantity' => 'getQuantity',
        'type' => 'getType',
        'freightClass' => 'getFreightClass',
        'dimensions' => 'getDimensions',
        'packageWeight' => 'getPackageWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_BAGS = 'BAGS';
    public const TYPE_BOXES = 'BOXES';
    public const TYPE_CARTONS = 'CARTONS';
    public const TYPE_CRATES = 'CRATES';
    public const TYPE_DRUMS = 'DRUMS';
    public const TYPE_PALLET_SKIDS = 'PALLET_SKIDS';
    public const TYPE_ROLLS = 'ROLLS';
    public const TYPE_TUBES = 'TUBES';
    public const FREIGHT_CLASS__50 = '50';
    public const FREIGHT_CLASS__55 = '55';
    public const FREIGHT_CLASS__60 = '60';
    public const FREIGHT_CLASS__65 = '65';
    public const FREIGHT_CLASS__70 = '70';
    public const FREIGHT_CLASS__77_5 = '77.5';
    public const FREIGHT_CLASS__85 = '85';
    public const FREIGHT_CLASS__92_5 = '92.5';
    public const FREIGHT_CLASS__100 = '100';
    public const FREIGHT_CLASS__110 = '110';
    public const FREIGHT_CLASS__125 = '125';
    public const FREIGHT_CLASS__150 = '150';
    public const FREIGHT_CLASS__175 = '175';
    public const FREIGHT_CLASS__200 = '200';
    public const FREIGHT_CLASS__250 = '250';
    public const FREIGHT_CLASS__300 = '300';
    public const FREIGHT_CLASS__400 = '400';
    public const FREIGHT_CLASS__500 = '500';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BAGS,
            self::TYPE_BOXES,
            self::TYPE_CARTONS,
            self::TYPE_CRATES,
            self::TYPE_DRUMS,
            self::TYPE_PALLET_SKIDS,
            self::TYPE_ROLLS,
            self::TYPE_TUBES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFreightClassAllowableValues()
    {
        return [
            self::FREIGHT_CLASS__50,
            self::FREIGHT_CLASS__55,
            self::FREIGHT_CLASS__60,
            self::FREIGHT_CLASS__65,
            self::FREIGHT_CLASS__70,
            self::FREIGHT_CLASS__77_5,
            self::FREIGHT_CLASS__85,
            self::FREIGHT_CLASS__92_5,
            self::FREIGHT_CLASS__100,
            self::FREIGHT_CLASS__110,
            self::FREIGHT_CLASS__125,
            self::FREIGHT_CLASS__150,
            self::FREIGHT_CLASS__175,
            self::FREIGHT_CLASS__200,
            self::FREIGHT_CLASS__250,
            self::FREIGHT_CLASS__300,
            self::FREIGHT_CLASS__400,
            self::FREIGHT_CLASS__500,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('freightClass', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('packageWeight', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['freightClass'] === null) {
            $invalidProperties[] = "'freightClass' can't be null";
        }
        $allowedValues = $this->getFreightClassAllowableValues();
        if (!is_null($this->container['freightClass']) && !in_array($this->container['freightClass'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'freightClass', must be one of '%s'",
                $this->container['freightClass'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['dimensions'] === null) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        if ($this->container['packageWeight'] === null) {
            $invalidProperties[] = "'packageWeight' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity Quantity of handling units.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }


        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of handling unit.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets freightClass
     *
     * @return string
     */
    public function getFreightClass()
    {
        return $this->container['freightClass'];
    }

    /**
     * Sets freightClass
     *
     * @param string $freightClass Freight class of the handling unit.  Valid values are:  - 50 = over 50 lbs - Fits on standard shrink-wrapped 4X4 pallet, very durable - 55 = 35-50 pounds - Bricks, cement, mortar, hardwood flooring - 60 = 30-35 pounds - Car accessories & car parts - 65 = 22.5-30 pounds - Car accessories & car parts, bottled beverages, books in boxes - 70 = 15 to 22.5 pounds - Car accessories & car parts, food items, automobile engines - 77.5 = 13.5 to 15 pounds - Tires, bathroom fixtures - 85 =12-13.5 pounds - Crated machinery, cast iron stoves - 92.5 = 10.5-12 pounds - Computers, monitors, refrigerators - 100 =9-10.5 pounds - Boat covers, car covers, canvas, wine cases, caskets - 110 =8-9 pounds - Cabinets, framed artwork, table saw - 125 =7-8 pounds - Small Household appliances - 150 =6-7 pounds - Auto sheet metal parts, bookcases - 175 =5-6 pounds - Clothing, couches stuffed furniture - 200 =4-5 pounds - Auto sheet metal parts, aircraft parts, aluminum table, packaged mattresses - 250 =3-4 pounds - Bamboo furniture, mattress and box spring, plasma TV - 300 =2-3 pounds - Wood cabinets, tables, chairs setup, model boats - 400 =1-2 pounds - Deer antlers - 500 =Less than 1 lbs - Bags of gold dust, ping pong balls
     *
     * @return self
     */
    public function setFreightClass($freightClass)
    {
        if (is_null($freightClass)) {
            throw new \InvalidArgumentException('non-nullable freightClass cannot be null');
        }
        $allowedValues = $this->getFreightClassAllowableValues();
        if (!in_array($freightClass, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'freightClass', must be one of '%s'",
                    $freightClass,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['freightClass'] = $freightClass;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \OpenAPIClientUPSShipping\Model\LTLDimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \OpenAPIClientUPSShipping\Model\LTLDimensions $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets packageWeight
     *
     * @return \OpenAPIClientUPSShipping\Model\LTLPackageWeightType
     */
    public function getPackageWeight()
    {
        return $this->container['packageWeight'];
    }

    /**
     * Sets packageWeight
     *
     * @param \OpenAPIClientUPSShipping\Model\LTLPackageWeightType $packageWeight packageWeight
     *
     * @return self
     */
    public function setPackageWeight($packageWeight)
    {
        if (is_null($packageWeight)) {
            throw new \InvalidArgumentException('non-nullable packageWeight cannot be null');
        }
        $this->container['packageWeight'] = $packageWeight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


