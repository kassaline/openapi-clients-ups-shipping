<?php
/**
 * MasterTradeComplianceDetails
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * MasterTradeComplianceDetails Class Doc Comment
 *
 * @category Class
 * @description Contains trade compliance details for the master shipment, such as invoice terms, export reasons, and declaration statements. It also includes additional comments or instructions for customs clearance.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MasterTradeComplianceDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Master_TradeComplianceDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'termsOfShipment' => 'string',
        'reasonForExport' => 'string',
        'comments' => 'string',
        'declarationStatement' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'termsOfShipment' => null,
        'reasonForExport' => null,
        'comments' => null,
        'declarationStatement' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'termsOfShipment' => false,
        'reasonForExport' => false,
        'comments' => false,
        'declarationStatement' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'termsOfShipment' => 'TermsOfShipment',
        'reasonForExport' => 'ReasonForExport',
        'comments' => 'Comments',
        'declarationStatement' => 'DeclarationStatement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'termsOfShipment' => 'setTermsOfShipment',
        'reasonForExport' => 'setReasonForExport',
        'comments' => 'setComments',
        'declarationStatement' => 'setDeclarationStatement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'termsOfShipment' => 'getTermsOfShipment',
        'reasonForExport' => 'getReasonForExport',
        'comments' => 'getComments',
        'declarationStatement' => 'getDeclarationStatement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TERMS_OF_SHIPMENT_CFR = 'CFR';
    public const TERMS_OF_SHIPMENT_CIF = 'CIF';
    public const TERMS_OF_SHIPMENT_CIP = 'CIP';
    public const TERMS_OF_SHIPMENT_CPT = 'CPT';
    public const TERMS_OF_SHIPMENT_DAF = 'DAF';
    public const TERMS_OF_SHIPMENT_DAP = 'DAP';
    public const TERMS_OF_SHIPMENT_DAT = 'DAT';
    public const TERMS_OF_SHIPMENT_DDP = 'DDP';
    public const TERMS_OF_SHIPMENT_DDU = 'DDU';
    public const TERMS_OF_SHIPMENT_DEQ = 'DEQ';
    public const TERMS_OF_SHIPMENT_DES = 'DES';
    public const TERMS_OF_SHIPMENT_EXW = 'EXW';
    public const TERMS_OF_SHIPMENT_FAS = 'FAS';
    public const TERMS_OF_SHIPMENT_FCA = 'FCA';
    public const TERMS_OF_SHIPMENT_FOB = 'FOB';
    public const DECLARATION_STATEMENT_INVOICE = 'Invoice';
    public const DECLARATION_STATEMENT_NAFTA = 'NAFTA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTermsOfShipmentAllowableValues()
    {
        return [
            self::TERMS_OF_SHIPMENT_CFR,
            self::TERMS_OF_SHIPMENT_CIF,
            self::TERMS_OF_SHIPMENT_CIP,
            self::TERMS_OF_SHIPMENT_CPT,
            self::TERMS_OF_SHIPMENT_DAF,
            self::TERMS_OF_SHIPMENT_DAP,
            self::TERMS_OF_SHIPMENT_DAT,
            self::TERMS_OF_SHIPMENT_DDP,
            self::TERMS_OF_SHIPMENT_DDU,
            self::TERMS_OF_SHIPMENT_DEQ,
            self::TERMS_OF_SHIPMENT_DES,
            self::TERMS_OF_SHIPMENT_EXW,
            self::TERMS_OF_SHIPMENT_FAS,
            self::TERMS_OF_SHIPMENT_FCA,
            self::TERMS_OF_SHIPMENT_FOB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeclarationStatementAllowableValues()
    {
        return [
            self::DECLARATION_STATEMENT_INVOICE,
            self::DECLARATION_STATEMENT_NAFTA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('termsOfShipment', $data ?? [], null);
        $this->setIfExists('reasonForExport', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('declarationStatement', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTermsOfShipmentAllowableValues();
        if (!is_null($this->container['termsOfShipment']) && !in_array($this->container['termsOfShipment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'termsOfShipment', must be one of '%s'",
                $this->container['termsOfShipment'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['reasonForExport']) && (mb_strlen($this->container['reasonForExport']) > 75)) {
            $invalidProperties[] = "invalid value for 'reasonForExport', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 150)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 150.";
        }

        $allowedValues = $this->getDeclarationStatementAllowableValues();
        if (!is_null($this->container['declarationStatement']) && !in_array($this->container['declarationStatement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'declarationStatement', must be one of '%s'",
                $this->container['declarationStatement'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets termsOfShipment
     *
     * @return string|null
     */
    public function getTermsOfShipment()
    {
        return $this->container['termsOfShipment'];
    }

    /**
     * Sets termsOfShipment
     *
     * @param string|null $termsOfShipment The terms of sale for the invoice.   Valid values:   - CFR =Cost and Freight - CIF =Cost Insurance and Freight - CIP =Carriage and Insurance Paid - CPT =Carriage Paid To - DAF =Delivered at Frontier - DAP =Delivered at Place - DAT =Delivered at Terminal - DDP =Delivery Duty Paid - DDU =Delivery Duty Unpaid - DEQ =Delivered Ex Quay - DES =Delivered Ex Ship - EXW =Ex Works - FAS =Free Alongside Ship - FCA =Free Carrier - FOB =Free On Board
     *
     * @return self
     */
    public function setTermsOfShipment($termsOfShipment)
    {
        if (is_null($termsOfShipment)) {
            throw new \InvalidArgumentException('non-nullable termsOfShipment cannot be null');
        }
        $allowedValues = $this->getTermsOfShipmentAllowableValues();
        if (!in_array($termsOfShipment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'termsOfShipment', must be one of '%s'",
                    $termsOfShipment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['termsOfShipment'] = $termsOfShipment;

        return $this;
    }

    /**
     * Gets reasonForExport
     *
     * @return string|null
     */
    public function getReasonForExport()
    {
        return $this->container['reasonForExport'];
    }

    /**
     * Sets reasonForExport
     *
     * @param string|null $reasonForExport The reason for export to go on the invoice.
     *
     * @return self
     */
    public function setReasonForExport($reasonForExport)
    {
        if (is_null($reasonForExport)) {
            throw new \InvalidArgumentException('non-nullable reasonForExport cannot be null');
        }
        if ((mb_strlen($reasonForExport) > 75)) {
            throw new \InvalidArgumentException('invalid length for $reasonForExport when calling MasterTradeComplianceDetails., must be smaller than or equal to 75.');
        }

        $this->container['reasonForExport'] = $reasonForExport;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Additional comments to be included on the invoice.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        if ((mb_strlen($comments) > 150)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling MasterTradeComplianceDetails., must be smaller than or equal to 150.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets declarationStatement
     *
     * @return string|null
     */
    public function getDeclarationStatement()
    {
        return $this->container['declarationStatement'];
    }

    /**
     * Sets declarationStatement
     *
     * @param string|null $declarationStatement The type of declaration statement. Can be invoice or NAFTA.   Valid values:   - Invoice =Invoice declaration - NAFTA = NAFTA declaration
     *
     * @return self
     */
    public function setDeclarationStatement($declarationStatement)
    {
        if (is_null($declarationStatement)) {
            throw new \InvalidArgumentException('non-nullable declarationStatement cannot be null');
        }
        $allowedValues = $this->getDeclarationStatementAllowableValues();
        if (!in_array($declarationStatement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'declarationStatement', must be one of '%s'",
                    $declarationStatement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['declarationStatement'] = $declarationStatement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


