<?php
/**
 * ShipmentServiceOptionsInternationalForms
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ShipmentServiceOptionsInternationalForms Class Doc Comment
 *
 * @category Class
 * @description International Forms information.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentServiceOptionsInternationalForms implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentServiceOptions_InternationalForms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'formType' => 'string[]',
        'userCreatedForm' => '\OpenAPIClientUPSShipping\Model\InternationalFormsUserCreatedForm',
        'uPSPremiumCareForm' => '\OpenAPIClientUPSShipping\Model\InternationalFormsUPSPremiumCareForm',
        'cN22Form' => '\OpenAPIClientUPSShipping\Model\InternationalFormsCN22Form',
        'additionalDocumentIndicator' => 'string',
        'formGroupIdName' => 'string',
        'eEIFilingOption' => '\OpenAPIClientUPSShipping\Model\InternationalFormsEEIFilingOption',
        'contacts' => '\OpenAPIClientUPSShipping\Model\InternationalFormsContacts',
        'product' => '\OpenAPIClientUPSShipping\Model\InternationalFormsProduct[]',
        'invoiceNumber' => 'string',
        'invoiceDate' => 'string',
        'purchaseOrderNumber' => 'string',
        'termsOfShipment' => 'string',
        'reasonForExport' => 'string',
        'comments' => 'string',
        'declarationStatement' => 'string',
        'discount' => '\OpenAPIClientUPSShipping\Model\InternationalFormsDiscount',
        'freightCharges' => '\OpenAPIClientUPSShipping\Model\InternationalFormsFreightCharges',
        'insuranceCharges' => '\OpenAPIClientUPSShipping\Model\InternationalFormsInsuranceCharges',
        'otherCharges' => '\OpenAPIClientUPSShipping\Model\InternationalFormsOtherCharges',
        'currencyCode' => 'string',
        'blanketPeriod' => '\OpenAPIClientUPSShipping\Model\InternationalFormsBlanketPeriod',
        'exportDate' => 'string',
        'exportingCarrier' => 'string',
        'carrierID' => 'string',
        'inBondCode' => 'string',
        'entryNumber' => 'string',
        'pointOfOrigin' => 'string',
        'pointOfOriginType' => 'string',
        'modeOfTransport' => 'string',
        'portOfExport' => 'string',
        'portOfUnloading' => 'string',
        'loadingPier' => 'string',
        'partiesToTransaction' => 'string',
        'routedExportTransactionIndicator' => 'string',
        'containerizedIndicator' => 'string',
        'overridePaperlessIndicator' => 'string',
        'shipperMemo' => 'string',
        'hazardousMaterialsIndicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'formType' => null,
        'userCreatedForm' => null,
        'uPSPremiumCareForm' => null,
        'cN22Form' => null,
        'additionalDocumentIndicator' => null,
        'formGroupIdName' => null,
        'eEIFilingOption' => null,
        'contacts' => null,
        'product' => null,
        'invoiceNumber' => null,
        'invoiceDate' => null,
        'purchaseOrderNumber' => null,
        'termsOfShipment' => null,
        'reasonForExport' => null,
        'comments' => null,
        'declarationStatement' => null,
        'discount' => null,
        'freightCharges' => null,
        'insuranceCharges' => null,
        'otherCharges' => null,
        'currencyCode' => null,
        'blanketPeriod' => null,
        'exportDate' => null,
        'exportingCarrier' => null,
        'carrierID' => null,
        'inBondCode' => null,
        'entryNumber' => null,
        'pointOfOrigin' => null,
        'pointOfOriginType' => null,
        'modeOfTransport' => null,
        'portOfExport' => null,
        'portOfUnloading' => null,
        'loadingPier' => null,
        'partiesToTransaction' => null,
        'routedExportTransactionIndicator' => null,
        'containerizedIndicator' => null,
        'overridePaperlessIndicator' => null,
        'shipperMemo' => null,
        'hazardousMaterialsIndicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'formType' => false,
        'userCreatedForm' => false,
        'uPSPremiumCareForm' => false,
        'cN22Form' => false,
        'additionalDocumentIndicator' => false,
        'formGroupIdName' => false,
        'eEIFilingOption' => false,
        'contacts' => false,
        'product' => false,
        'invoiceNumber' => false,
        'invoiceDate' => false,
        'purchaseOrderNumber' => false,
        'termsOfShipment' => false,
        'reasonForExport' => false,
        'comments' => false,
        'declarationStatement' => false,
        'discount' => false,
        'freightCharges' => false,
        'insuranceCharges' => false,
        'otherCharges' => false,
        'currencyCode' => false,
        'blanketPeriod' => false,
        'exportDate' => false,
        'exportingCarrier' => false,
        'carrierID' => false,
        'inBondCode' => false,
        'entryNumber' => false,
        'pointOfOrigin' => false,
        'pointOfOriginType' => false,
        'modeOfTransport' => false,
        'portOfExport' => false,
        'portOfUnloading' => false,
        'loadingPier' => false,
        'partiesToTransaction' => false,
        'routedExportTransactionIndicator' => false,
        'containerizedIndicator' => false,
        'overridePaperlessIndicator' => false,
        'shipperMemo' => false,
        'hazardousMaterialsIndicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'formType' => 'FormType',
        'userCreatedForm' => 'UserCreatedForm',
        'uPSPremiumCareForm' => 'UPSPremiumCareForm',
        'cN22Form' => 'CN22Form',
        'additionalDocumentIndicator' => 'AdditionalDocumentIndicator',
        'formGroupIdName' => 'FormGroupIdName',
        'eEIFilingOption' => 'EEIFilingOption',
        'contacts' => 'Contacts',
        'product' => 'Product',
        'invoiceNumber' => 'InvoiceNumber',
        'invoiceDate' => 'InvoiceDate',
        'purchaseOrderNumber' => 'PurchaseOrderNumber',
        'termsOfShipment' => 'TermsOfShipment',
        'reasonForExport' => 'ReasonForExport',
        'comments' => 'Comments',
        'declarationStatement' => 'DeclarationStatement',
        'discount' => 'Discount',
        'freightCharges' => 'FreightCharges',
        'insuranceCharges' => 'InsuranceCharges',
        'otherCharges' => 'OtherCharges',
        'currencyCode' => 'CurrencyCode',
        'blanketPeriod' => 'BlanketPeriod',
        'exportDate' => 'ExportDate',
        'exportingCarrier' => 'ExportingCarrier',
        'carrierID' => 'CarrierID',
        'inBondCode' => 'InBondCode',
        'entryNumber' => 'EntryNumber',
        'pointOfOrigin' => 'PointOfOrigin',
        'pointOfOriginType' => 'PointOfOriginType',
        'modeOfTransport' => 'ModeOfTransport',
        'portOfExport' => 'PortOfExport',
        'portOfUnloading' => 'PortOfUnloading',
        'loadingPier' => 'LoadingPier',
        'partiesToTransaction' => 'PartiesToTransaction',
        'routedExportTransactionIndicator' => 'RoutedExportTransactionIndicator',
        'containerizedIndicator' => 'ContainerizedIndicator',
        'overridePaperlessIndicator' => 'OverridePaperlessIndicator',
        'shipperMemo' => 'ShipperMemo',
        'hazardousMaterialsIndicator' => 'HazardousMaterialsIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'formType' => 'setFormType',
        'userCreatedForm' => 'setUserCreatedForm',
        'uPSPremiumCareForm' => 'setUPSPremiumCareForm',
        'cN22Form' => 'setCN22Form',
        'additionalDocumentIndicator' => 'setAdditionalDocumentIndicator',
        'formGroupIdName' => 'setFormGroupIdName',
        'eEIFilingOption' => 'setEEIFilingOption',
        'contacts' => 'setContacts',
        'product' => 'setProduct',
        'invoiceNumber' => 'setInvoiceNumber',
        'invoiceDate' => 'setInvoiceDate',
        'purchaseOrderNumber' => 'setPurchaseOrderNumber',
        'termsOfShipment' => 'setTermsOfShipment',
        'reasonForExport' => 'setReasonForExport',
        'comments' => 'setComments',
        'declarationStatement' => 'setDeclarationStatement',
        'discount' => 'setDiscount',
        'freightCharges' => 'setFreightCharges',
        'insuranceCharges' => 'setInsuranceCharges',
        'otherCharges' => 'setOtherCharges',
        'currencyCode' => 'setCurrencyCode',
        'blanketPeriod' => 'setBlanketPeriod',
        'exportDate' => 'setExportDate',
        'exportingCarrier' => 'setExportingCarrier',
        'carrierID' => 'setCarrierID',
        'inBondCode' => 'setInBondCode',
        'entryNumber' => 'setEntryNumber',
        'pointOfOrigin' => 'setPointOfOrigin',
        'pointOfOriginType' => 'setPointOfOriginType',
        'modeOfTransport' => 'setModeOfTransport',
        'portOfExport' => 'setPortOfExport',
        'portOfUnloading' => 'setPortOfUnloading',
        'loadingPier' => 'setLoadingPier',
        'partiesToTransaction' => 'setPartiesToTransaction',
        'routedExportTransactionIndicator' => 'setRoutedExportTransactionIndicator',
        'containerizedIndicator' => 'setContainerizedIndicator',
        'overridePaperlessIndicator' => 'setOverridePaperlessIndicator',
        'shipperMemo' => 'setShipperMemo',
        'hazardousMaterialsIndicator' => 'setHazardousMaterialsIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'formType' => 'getFormType',
        'userCreatedForm' => 'getUserCreatedForm',
        'uPSPremiumCareForm' => 'getUPSPremiumCareForm',
        'cN22Form' => 'getCN22Form',
        'additionalDocumentIndicator' => 'getAdditionalDocumentIndicator',
        'formGroupIdName' => 'getFormGroupIdName',
        'eEIFilingOption' => 'getEEIFilingOption',
        'contacts' => 'getContacts',
        'product' => 'getProduct',
        'invoiceNumber' => 'getInvoiceNumber',
        'invoiceDate' => 'getInvoiceDate',
        'purchaseOrderNumber' => 'getPurchaseOrderNumber',
        'termsOfShipment' => 'getTermsOfShipment',
        'reasonForExport' => 'getReasonForExport',
        'comments' => 'getComments',
        'declarationStatement' => 'getDeclarationStatement',
        'discount' => 'getDiscount',
        'freightCharges' => 'getFreightCharges',
        'insuranceCharges' => 'getInsuranceCharges',
        'otherCharges' => 'getOtherCharges',
        'currencyCode' => 'getCurrencyCode',
        'blanketPeriod' => 'getBlanketPeriod',
        'exportDate' => 'getExportDate',
        'exportingCarrier' => 'getExportingCarrier',
        'carrierID' => 'getCarrierID',
        'inBondCode' => 'getInBondCode',
        'entryNumber' => 'getEntryNumber',
        'pointOfOrigin' => 'getPointOfOrigin',
        'pointOfOriginType' => 'getPointOfOriginType',
        'modeOfTransport' => 'getModeOfTransport',
        'portOfExport' => 'getPortOfExport',
        'portOfUnloading' => 'getPortOfUnloading',
        'loadingPier' => 'getLoadingPier',
        'partiesToTransaction' => 'getPartiesToTransaction',
        'routedExportTransactionIndicator' => 'getRoutedExportTransactionIndicator',
        'containerizedIndicator' => 'getContainerizedIndicator',
        'overridePaperlessIndicator' => 'getOverridePaperlessIndicator',
        'shipperMemo' => 'getShipperMemo',
        'hazardousMaterialsIndicator' => 'getHazardousMaterialsIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('formType', $data ?? [], null);
        $this->setIfExists('userCreatedForm', $data ?? [], null);
        $this->setIfExists('uPSPremiumCareForm', $data ?? [], null);
        $this->setIfExists('cN22Form', $data ?? [], null);
        $this->setIfExists('additionalDocumentIndicator', $data ?? [], null);
        $this->setIfExists('formGroupIdName', $data ?? [], null);
        $this->setIfExists('eEIFilingOption', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('invoiceNumber', $data ?? [], null);
        $this->setIfExists('invoiceDate', $data ?? [], null);
        $this->setIfExists('purchaseOrderNumber', $data ?? [], null);
        $this->setIfExists('termsOfShipment', $data ?? [], null);
        $this->setIfExists('reasonForExport', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('declarationStatement', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('freightCharges', $data ?? [], null);
        $this->setIfExists('insuranceCharges', $data ?? [], null);
        $this->setIfExists('otherCharges', $data ?? [], null);
        $this->setIfExists('currencyCode', $data ?? [], null);
        $this->setIfExists('blanketPeriod', $data ?? [], null);
        $this->setIfExists('exportDate', $data ?? [], null);
        $this->setIfExists('exportingCarrier', $data ?? [], null);
        $this->setIfExists('carrierID', $data ?? [], null);
        $this->setIfExists('inBondCode', $data ?? [], null);
        $this->setIfExists('entryNumber', $data ?? [], null);
        $this->setIfExists('pointOfOrigin', $data ?? [], null);
        $this->setIfExists('pointOfOriginType', $data ?? [], null);
        $this->setIfExists('modeOfTransport', $data ?? [], null);
        $this->setIfExists('portOfExport', $data ?? [], null);
        $this->setIfExists('portOfUnloading', $data ?? [], null);
        $this->setIfExists('loadingPier', $data ?? [], null);
        $this->setIfExists('partiesToTransaction', $data ?? [], null);
        $this->setIfExists('routedExportTransactionIndicator', $data ?? [], null);
        $this->setIfExists('containerizedIndicator', $data ?? [], null);
        $this->setIfExists('overridePaperlessIndicator', $data ?? [], null);
        $this->setIfExists('shipperMemo', $data ?? [], null);
        $this->setIfExists('hazardousMaterialsIndicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['formType'] === null) {
            $invalidProperties[] = "'formType' can't be null";
        }
        if (!is_null($this->container['formGroupIdName']) && (mb_strlen($this->container['formGroupIdName']) > 50)) {
            $invalidProperties[] = "invalid value for 'formGroupIdName', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['formGroupIdName']) && (mb_strlen($this->container['formGroupIdName']) < 1)) {
            $invalidProperties[] = "invalid value for 'formGroupIdName', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if (!is_null($this->container['invoiceNumber']) && (mb_strlen($this->container['invoiceNumber']) > 35)) {
            $invalidProperties[] = "invalid value for 'invoiceNumber', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['invoiceNumber']) && (mb_strlen($this->container['invoiceNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoiceNumber', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['invoiceDate']) && (mb_strlen($this->container['invoiceDate']) > 8)) {
            $invalidProperties[] = "invalid value for 'invoiceDate', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['invoiceDate']) && (mb_strlen($this->container['invoiceDate']) < 8)) {
            $invalidProperties[] = "invalid value for 'invoiceDate', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['purchaseOrderNumber']) && (mb_strlen($this->container['purchaseOrderNumber']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchaseOrderNumber', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['purchaseOrderNumber']) && (mb_strlen($this->container['purchaseOrderNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'purchaseOrderNumber', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['termsOfShipment']) && (mb_strlen($this->container['termsOfShipment']) > 3)) {
            $invalidProperties[] = "invalid value for 'termsOfShipment', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['termsOfShipment']) && (mb_strlen($this->container['termsOfShipment']) < 3)) {
            $invalidProperties[] = "invalid value for 'termsOfShipment', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['reasonForExport']) && (mb_strlen($this->container['reasonForExport']) > 20)) {
            $invalidProperties[] = "invalid value for 'reasonForExport', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['reasonForExport']) && (mb_strlen($this->container['reasonForExport']) < 1)) {
            $invalidProperties[] = "invalid value for 'reasonForExport', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 150)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) < 1)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['declarationStatement']) && (mb_strlen($this->container['declarationStatement']) > 550)) {
            $invalidProperties[] = "invalid value for 'declarationStatement', the character length must be smaller than or equal to 550.";
        }

        if (!is_null($this->container['declarationStatement']) && (mb_strlen($this->container['declarationStatement']) < 1)) {
            $invalidProperties[] = "invalid value for 'declarationStatement', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['currencyCode']) && (mb_strlen($this->container['currencyCode']) > 3)) {
            $invalidProperties[] = "invalid value for 'currencyCode', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currencyCode']) && (mb_strlen($this->container['currencyCode']) < 3)) {
            $invalidProperties[] = "invalid value for 'currencyCode', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['exportDate']) && (mb_strlen($this->container['exportDate']) > 35)) {
            $invalidProperties[] = "invalid value for 'exportDate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['exportDate']) && (mb_strlen($this->container['exportDate']) < 1)) {
            $invalidProperties[] = "invalid value for 'exportDate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['exportingCarrier']) && (mb_strlen($this->container['exportingCarrier']) > 35)) {
            $invalidProperties[] = "invalid value for 'exportingCarrier', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['exportingCarrier']) && (mb_strlen($this->container['exportingCarrier']) < 1)) {
            $invalidProperties[] = "invalid value for 'exportingCarrier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['carrierID']) && (mb_strlen($this->container['carrierID']) > 17)) {
            $invalidProperties[] = "invalid value for 'carrierID', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['carrierID']) && (mb_strlen($this->container['carrierID']) < 1)) {
            $invalidProperties[] = "invalid value for 'carrierID', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['inBondCode']) && (mb_strlen($this->container['inBondCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'inBondCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['inBondCode']) && (mb_strlen($this->container['inBondCode']) < 2)) {
            $invalidProperties[] = "invalid value for 'inBondCode', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['entryNumber']) && (mb_strlen($this->container['entryNumber']) > 25)) {
            $invalidProperties[] = "invalid value for 'entryNumber', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['entryNumber']) && (mb_strlen($this->container['entryNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'entryNumber', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pointOfOrigin']) && (mb_strlen($this->container['pointOfOrigin']) > 5)) {
            $invalidProperties[] = "invalid value for 'pointOfOrigin', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['pointOfOrigin']) && (mb_strlen($this->container['pointOfOrigin']) < 1)) {
            $invalidProperties[] = "invalid value for 'pointOfOrigin', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pointOfOriginType']) && (mb_strlen($this->container['pointOfOriginType']) > 1)) {
            $invalidProperties[] = "invalid value for 'pointOfOriginType', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['pointOfOriginType']) && (mb_strlen($this->container['pointOfOriginType']) < 1)) {
            $invalidProperties[] = "invalid value for 'pointOfOriginType', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['modeOfTransport']) && (mb_strlen($this->container['modeOfTransport']) > 35)) {
            $invalidProperties[] = "invalid value for 'modeOfTransport', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['modeOfTransport']) && (mb_strlen($this->container['modeOfTransport']) < 1)) {
            $invalidProperties[] = "invalid value for 'modeOfTransport', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['portOfExport']) && (mb_strlen($this->container['portOfExport']) > 35)) {
            $invalidProperties[] = "invalid value for 'portOfExport', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['portOfExport']) && (mb_strlen($this->container['portOfExport']) < 1)) {
            $invalidProperties[] = "invalid value for 'portOfExport', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['portOfUnloading']) && (mb_strlen($this->container['portOfUnloading']) > 35)) {
            $invalidProperties[] = "invalid value for 'portOfUnloading', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['portOfUnloading']) && (mb_strlen($this->container['portOfUnloading']) < 1)) {
            $invalidProperties[] = "invalid value for 'portOfUnloading', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['loadingPier']) && (mb_strlen($this->container['loadingPier']) > 35)) {
            $invalidProperties[] = "invalid value for 'loadingPier', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['loadingPier']) && (mb_strlen($this->container['loadingPier']) < 1)) {
            $invalidProperties[] = "invalid value for 'loadingPier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partiesToTransaction']) && (mb_strlen($this->container['partiesToTransaction']) > 1)) {
            $invalidProperties[] = "invalid value for 'partiesToTransaction', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['partiesToTransaction']) && (mb_strlen($this->container['partiesToTransaction']) < 1)) {
            $invalidProperties[] = "invalid value for 'partiesToTransaction', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shipperMemo']) && (mb_strlen($this->container['shipperMemo']) > 300)) {
            $invalidProperties[] = "invalid value for 'shipperMemo', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['shipperMemo']) && (mb_strlen($this->container['shipperMemo']) < 1)) {
            $invalidProperties[] = "invalid value for 'shipperMemo', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets formType
     *
     * @return string[]
     */
    public function getFormType()
    {
        return $this->container['formType'];
    }

    /**
     * Sets formType
     *
     * @param string[] $formType Indicates the name of the International Form requested.  Valid values: - 01 - Invoice - 03 - CO - 04 - NAFTA CO - 05 - Partial Invoice - 06 - Packinglist - 07 - Customer Generated Forms - 08 – Air Freight Packing List - 09 - CN22 Form - 10 – UPS Premium Care Form - 11 - EEI  For shipment with return service, 05 or 10 are the only valid values.  Note: 01 and 05 are mutually exclusive and 05 are only valid for return shipments only.
     *
     * @return self
     */
    public function setFormType($formType)
    {
        if (is_null($formType)) {
            throw new \InvalidArgumentException('non-nullable formType cannot be null');
        }


        $this->container['formType'] = $formType;

        return $this;
    }

    /**
     * Gets userCreatedForm
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsUserCreatedForm|null
     */
    public function getUserCreatedForm()
    {
        return $this->container['userCreatedForm'];
    }

    /**
     * Sets userCreatedForm
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsUserCreatedForm|null $userCreatedForm userCreatedForm
     *
     * @return self
     */
    public function setUserCreatedForm($userCreatedForm)
    {
        if (is_null($userCreatedForm)) {
            throw new \InvalidArgumentException('non-nullable userCreatedForm cannot be null');
        }
        $this->container['userCreatedForm'] = $userCreatedForm;

        return $this;
    }

    /**
     * Gets uPSPremiumCareForm
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsUPSPremiumCareForm|null
     */
    public function getUPSPremiumCareForm()
    {
        return $this->container['uPSPremiumCareForm'];
    }

    /**
     * Sets uPSPremiumCareForm
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsUPSPremiumCareForm|null $uPSPremiumCareForm uPSPremiumCareForm
     *
     * @return self
     */
    public function setUPSPremiumCareForm($uPSPremiumCareForm)
    {
        if (is_null($uPSPremiumCareForm)) {
            throw new \InvalidArgumentException('non-nullable uPSPremiumCareForm cannot be null');
        }
        $this->container['uPSPremiumCareForm'] = $uPSPremiumCareForm;

        return $this;
    }

    /**
     * Gets cN22Form
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsCN22Form|null
     */
    public function getCN22Form()
    {
        return $this->container['cN22Form'];
    }

    /**
     * Sets cN22Form
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsCN22Form|null $cN22Form cN22Form
     *
     * @return self
     */
    public function setCN22Form($cN22Form)
    {
        if (is_null($cN22Form)) {
            throw new \InvalidArgumentException('non-nullable cN22Form cannot be null');
        }
        $this->container['cN22Form'] = $cN22Form;

        return $this;
    }

    /**
     * Gets additionalDocumentIndicator
     *
     * @return string|null
     */
    public function getAdditionalDocumentIndicator()
    {
        return $this->container['additionalDocumentIndicator'];
    }

    /**
     * Sets additionalDocumentIndicator
     *
     * @param string|null $additionalDocumentIndicator Presence of the indicator means user will supply additional document, such as EEI, NAFTA_CO or CO.  This indicator should be set when the shipper intends to utilize UPS paperless invoice functionality AND the shipper has SELF-PREPARED other International Forms (EEI, CO, NAFTACO) to accompany the shipment.  It is evaluated only when:  1. Account is paperless enabled.  2. Movement requires an invoice. 3. Destination country or territory accepts paperless invoice.  4. Invoice data is supplied by the client and the data passes validation.
     *
     * @return self
     */
    public function setAdditionalDocumentIndicator($additionalDocumentIndicator)
    {
        if (is_null($additionalDocumentIndicator)) {
            throw new \InvalidArgumentException('non-nullable additionalDocumentIndicator cannot be null');
        }


        $this->container['additionalDocumentIndicator'] = $additionalDocumentIndicator;

        return $this;
    }

    /**
     * Gets formGroupIdName
     *
     * @return string|null
     */
    public function getFormGroupIdName()
    {
        return $this->container['formGroupIdName'];
    }

    /**
     * Sets formGroupIdName
     *
     * @param string|null $formGroupIdName Contains description text which identifies the group of International forms. This element does not appear on the forms.
     *
     * @return self
     */
    public function setFormGroupIdName($formGroupIdName)
    {
        if (is_null($formGroupIdName)) {
            throw new \InvalidArgumentException('non-nullable formGroupIdName cannot be null');
        }
        if ((mb_strlen($formGroupIdName) > 50)) {
            throw new \InvalidArgumentException('invalid length for $formGroupIdName when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($formGroupIdName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $formGroupIdName when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['formGroupIdName'] = $formGroupIdName;

        return $this;
    }

    /**
     * Gets eEIFilingOption
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsEEIFilingOption|null
     */
    public function getEEIFilingOption()
    {
        return $this->container['eEIFilingOption'];
    }

    /**
     * Sets eEIFilingOption
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsEEIFilingOption|null $eEIFilingOption eEIFilingOption
     *
     * @return self
     */
    public function setEEIFilingOption($eEIFilingOption)
    {
        if (is_null($eEIFilingOption)) {
            throw new \InvalidArgumentException('non-nullable eEIFilingOption cannot be null');
        }
        $this->container['eEIFilingOption'] = $eEIFilingOption;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsContacts|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsContacts|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsProduct[]
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsProduct[] $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }


        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param string|null $invoiceNumber Commercial Invoice number assigned by the exporter.  Applies to Invoice and Partial Invoice forms only. Required for Invoice forms and optional for Partial Invoice.
     *
     * @return self
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        if (is_null($invoiceNumber)) {
            throw new \InvalidArgumentException('non-nullable invoiceNumber cannot be null');
        }
        if ((mb_strlen($invoiceNumber) > 35)) {
            throw new \InvalidArgumentException('invalid length for $invoiceNumber when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($invoiceNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $invoiceNumber when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets invoiceDate
     *
     * @return string|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoiceDate'];
    }

    /**
     * Sets invoiceDate
     *
     * @param string|null $invoiceDate Date when the Invoice is created. Ideally this is the same as the ship date.  Applies to Invoice and Partial Invoice forms only. Required for Invoice forms and optional for Partial Invoice. Required for Invoice form for forward shipments. For shipment with return service, the user input will be ignored, and the field will be blank on the invoice. Format is yyyyMMdd.
     *
     * @return self
     */
    public function setInvoiceDate($invoiceDate)
    {
        if (is_null($invoiceDate)) {
            throw new \InvalidArgumentException('non-nullable invoiceDate cannot be null');
        }
        if ((mb_strlen($invoiceDate) > 8)) {
            throw new \InvalidArgumentException('invalid length for $invoiceDate when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($invoiceDate) < 8)) {
            throw new \InvalidArgumentException('invalid length for $invoiceDate when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 8.');
        }

        $this->container['invoiceDate'] = $invoiceDate;

        return $this;
    }

    /**
     * Gets purchaseOrderNumber
     *
     * @return string|null
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchaseOrderNumber'];
    }

    /**
     * Sets purchaseOrderNumber
     *
     * @param string|null $purchaseOrderNumber The customer's order reference number.  Applies to Invoice and Partial Invoice forms only.
     *
     * @return self
     */
    public function setPurchaseOrderNumber($purchaseOrderNumber)
    {
        if (is_null($purchaseOrderNumber)) {
            throw new \InvalidArgumentException('non-nullable purchaseOrderNumber cannot be null');
        }
        if ((mb_strlen($purchaseOrderNumber) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchaseOrderNumber when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($purchaseOrderNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $purchaseOrderNumber when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['purchaseOrderNumber'] = $purchaseOrderNumber;

        return $this;
    }

    /**
     * Gets termsOfShipment
     *
     * @return string|null
     */
    public function getTermsOfShipment()
    {
        return $this->container['termsOfShipment'];
    }

    /**
     * Sets termsOfShipment
     *
     * @param string|null $termsOfShipment Indicates the rights to the seller from the buyer. Also, it refers to Terms of Sale.  Applies to Invoice and Partial Invoice forms only.   Valid values:  CFR: Cost and Freight  CIF: Cost Insurance and Freight  CIP: Carriage and Insurance Paid  CPT: Carriage Paid To  DAF: Delivered at Frontier  DDP: Delivery Duty Paid  DAP: Delivery at Place  DEQ: Delivered Ex Quay  DES: Delivered Ex Ship  EXW: Ex Works  FAS: Free Alongside Ship  FCA: Free Carrier  FOB: Free On Board
     *
     * @return self
     */
    public function setTermsOfShipment($termsOfShipment)
    {
        if (is_null($termsOfShipment)) {
            throw new \InvalidArgumentException('non-nullable termsOfShipment cannot be null');
        }
        if ((mb_strlen($termsOfShipment) > 3)) {
            throw new \InvalidArgumentException('invalid length for $termsOfShipment when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($termsOfShipment) < 3)) {
            throw new \InvalidArgumentException('invalid length for $termsOfShipment when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 3.');
        }

        $this->container['termsOfShipment'] = $termsOfShipment;

        return $this;
    }

    /**
     * Gets reasonForExport
     *
     * @return string|null
     */
    public function getReasonForExport()
    {
        return $this->container['reasonForExport'];
    }

    /**
     * Sets reasonForExport
     *
     * @param string|null $reasonForExport A reason to export the current international shipment. Valid values: SALE, GIFT, SAMPLE, RETURN, REPAIR, INTERCOMPANYDATA, Any other reason.  Applies to Invoice and Partial Invoice forms only. Required for Invoice forms and Optional for Partial Invoice. No validation.
     *
     * @return self
     */
    public function setReasonForExport($reasonForExport)
    {
        if (is_null($reasonForExport)) {
            throw new \InvalidArgumentException('non-nullable reasonForExport cannot be null');
        }
        if ((mb_strlen($reasonForExport) > 20)) {
            throw new \InvalidArgumentException('invalid length for $reasonForExport when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($reasonForExport) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reasonForExport when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['reasonForExport'] = $reasonForExport;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Any extra information about the current shipment.  Applies to Invoice and Partial Invoice forms only.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        if ((mb_strlen($comments) > 150)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($comments) < 1)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets declarationStatement
     *
     * @return string|null
     */
    public function getDeclarationStatement()
    {
        return $this->container['declarationStatement'];
    }

    /**
     * Sets declarationStatement
     *
     * @param string|null $declarationStatement This is the legal explanation, used by Customs, for the delivering of this shipment. It must be identical to the set of declarations actually used by Customs. Examples of declarations that might be entered in this field are: I hereby certify that the goods covered by this shipment qualify as originating goods for purposes of preferential tariff treatment under the NAFTA. I hereby certify that the information on this invoice is true and correct and the contents and value of this shipment is as stated above.  EEA statement:  The exporter of the products covered by this document declares that except where otherwise clearly indicated these products are of EEA preferential origin.  Applies to Invoice and Partial Invoice forms only. On the invoice for return shipment, the verbiage is as follows (user input is ignored): The exporter of the products covered by this document declares that except where otherwise clearly indicated these products are of EEA preferential origin
     *
     * @return self
     */
    public function setDeclarationStatement($declarationStatement)
    {
        if (is_null($declarationStatement)) {
            throw new \InvalidArgumentException('non-nullable declarationStatement cannot be null');
        }
        if ((mb_strlen($declarationStatement) > 550)) {
            throw new \InvalidArgumentException('invalid length for $declarationStatement when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 550.');
        }
        if ((mb_strlen($declarationStatement) < 1)) {
            throw new \InvalidArgumentException('invalid length for $declarationStatement when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['declarationStatement'] = $declarationStatement;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsDiscount|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsDiscount|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets freightCharges
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsFreightCharges|null
     */
    public function getFreightCharges()
    {
        return $this->container['freightCharges'];
    }

    /**
     * Sets freightCharges
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsFreightCharges|null $freightCharges freightCharges
     *
     * @return self
     */
    public function setFreightCharges($freightCharges)
    {
        if (is_null($freightCharges)) {
            throw new \InvalidArgumentException('non-nullable freightCharges cannot be null');
        }
        $this->container['freightCharges'] = $freightCharges;

        return $this;
    }

    /**
     * Gets insuranceCharges
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsInsuranceCharges|null
     */
    public function getInsuranceCharges()
    {
        return $this->container['insuranceCharges'];
    }

    /**
     * Sets insuranceCharges
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsInsuranceCharges|null $insuranceCharges insuranceCharges
     *
     * @return self
     */
    public function setInsuranceCharges($insuranceCharges)
    {
        if (is_null($insuranceCharges)) {
            throw new \InvalidArgumentException('non-nullable insuranceCharges cannot be null');
        }
        $this->container['insuranceCharges'] = $insuranceCharges;

        return $this;
    }

    /**
     * Gets otherCharges
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsOtherCharges|null
     */
    public function getOtherCharges()
    {
        return $this->container['otherCharges'];
    }

    /**
     * Sets otherCharges
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsOtherCharges|null $otherCharges otherCharges
     *
     * @return self
     */
    public function setOtherCharges($otherCharges)
    {
        if (is_null($otherCharges)) {
            throw new \InvalidArgumentException('non-nullable otherCharges cannot be null');
        }
        $this->container['otherCharges'] = $otherCharges;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string|null $currencyCode Currency code for all the monetary values of the Invoice form.  Applies to Invoice and Partial Invoice forms only.
     *
     * @return self
     */
    public function setCurrencyCode($currencyCode)
    {
        if (is_null($currencyCode)) {
            throw new \InvalidArgumentException('non-nullable currencyCode cannot be null');
        }
        if ((mb_strlen($currencyCode) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyCode when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currencyCode) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyCode when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 3.');
        }

        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets blanketPeriod
     *
     * @return \OpenAPIClientUPSShipping\Model\InternationalFormsBlanketPeriod|null
     */
    public function getBlanketPeriod()
    {
        return $this->container['blanketPeriod'];
    }

    /**
     * Sets blanketPeriod
     *
     * @param \OpenAPIClientUPSShipping\Model\InternationalFormsBlanketPeriod|null $blanketPeriod blanketPeriod
     *
     * @return self
     */
    public function setBlanketPeriod($blanketPeriod)
    {
        if (is_null($blanketPeriod)) {
            throw new \InvalidArgumentException('non-nullable blanketPeriod cannot be null');
        }
        $this->container['blanketPeriod'] = $blanketPeriod;

        return $this;
    }

    /**
     * Gets exportDate
     *
     * @return string|null
     */
    public function getExportDate()
    {
        return $this->container['exportDate'];
    }

    /**
     * Sets exportDate
     *
     * @param string|null $exportDate The date the goods will be exiting the country or territory.  Applies to CO and EEI forms only. Required for CO and EEI forms. Format is yyyyMMdd.
     *
     * @return self
     */
    public function setExportDate($exportDate)
    {
        if (is_null($exportDate)) {
            throw new \InvalidArgumentException('non-nullable exportDate cannot be null');
        }
        if ((mb_strlen($exportDate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $exportDate when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($exportDate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $exportDate when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['exportDate'] = $exportDate;

        return $this;
    }

    /**
     * Gets exportingCarrier
     *
     * @return string|null
     */
    public function getExportingCarrier()
    {
        return $this->container['exportingCarrier'];
    }

    /**
     * Sets exportingCarrier
     *
     * @param string|null $exportingCarrier The name of the carrier that is exporting the shipment. The vessels flag number should also be entered, if the carrier is a vessel.  If value is empty, it will be set to default value as 'UPS' for EEI forms.  Applies to CO and EEI forms only. Required for CO forms.
     *
     * @return self
     */
    public function setExportingCarrier($exportingCarrier)
    {
        if (is_null($exportingCarrier)) {
            throw new \InvalidArgumentException('non-nullable exportingCarrier cannot be null');
        }
        if ((mb_strlen($exportingCarrier) > 35)) {
            throw new \InvalidArgumentException('invalid length for $exportingCarrier when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($exportingCarrier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $exportingCarrier when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['exportingCarrier'] = $exportingCarrier;

        return $this;
    }

    /**
     * Gets carrierID
     *
     * @return string|null
     */
    public function getCarrierID()
    {
        return $this->container['carrierID'];
    }

    /**
     * Sets carrierID
     *
     * @param string|null $carrierID The four-character Standard Carrier Alpha Code (SCAC) for vessel, rail, and truck shipments. For air shipment, enter the two or three character International Air Transport Association (IATA) code.  Applies to EEI forms only. No Validations.
     *
     * @return self
     */
    public function setCarrierID($carrierID)
    {
        if (is_null($carrierID)) {
            throw new \InvalidArgumentException('non-nullable carrierID cannot be null');
        }
        if ((mb_strlen($carrierID) > 17)) {
            throw new \InvalidArgumentException('invalid length for $carrierID when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 17.');
        }
        if ((mb_strlen($carrierID) < 1)) {
            throw new \InvalidArgumentException('invalid length for $carrierID when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['carrierID'] = $carrierID;

        return $this;
    }

    /**
     * Gets inBondCode
     *
     * @return string|null
     */
    public function getInBondCode()
    {
        return $this->container['inBondCode'];
    }

    /**
     * Sets inBondCode
     *
     * @param string|null $inBondCode The two-character In Bond Code.  Applies to EEI forms only. Required for EEI forms. Valid values for EEI are: 70: Not in bond; 67: IE from a FTZ; 68: T&E from a FTZ.
     *
     * @return self
     */
    public function setInBondCode($inBondCode)
    {
        if (is_null($inBondCode)) {
            throw new \InvalidArgumentException('non-nullable inBondCode cannot be null');
        }
        if ((mb_strlen($inBondCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $inBondCode when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($inBondCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $inBondCode when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 2.');
        }

        $this->container['inBondCode'] = $inBondCode;

        return $this;
    }

    /**
     * Gets entryNumber
     *
     * @return string|null
     */
    public function getEntryNumber()
    {
        return $this->container['entryNumber'];
    }

    /**
     * Sets entryNumber
     *
     * @param string|null $entryNumber The Import Entry Number when the export transaction is used as proof of export for import transactions (examples: In Bond, Temporary Import Bond or Drawbacks).  Applies to EEI forms only. Conditionally Required for EEI forms when In bond code value is other than 70 (Not In Bond)
     *
     * @return self
     */
    public function setEntryNumber($entryNumber)
    {
        if (is_null($entryNumber)) {
            throw new \InvalidArgumentException('non-nullable entryNumber cannot be null');
        }
        if ((mb_strlen($entryNumber) > 25)) {
            throw new \InvalidArgumentException('invalid length for $entryNumber when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($entryNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $entryNumber when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['entryNumber'] = $entryNumber;

        return $this;
    }

    /**
     * Gets pointOfOrigin
     *
     * @return string|null
     */
    public function getPointOfOrigin()
    {
        return $this->container['pointOfOrigin'];
    }

    /**
     * Sets pointOfOrigin
     *
     * @param string|null $pointOfOrigin Contains one of the following:  The two-digit U.S. Postal Service abbreviation for the state from which the goods were shipped to the port of export. The state that is the source for the good with the highest value. The state of consolidation. The Foreign Trade Zone number of the zone from where the exports are leaving.  If the goods were shipped from Puerto Rico, enter PR.  Applies to EEI forms only. Required for EEI.
     *
     * @return self
     */
    public function setPointOfOrigin($pointOfOrigin)
    {
        if (is_null($pointOfOrigin)) {
            throw new \InvalidArgumentException('non-nullable pointOfOrigin cannot be null');
        }
        if ((mb_strlen($pointOfOrigin) > 5)) {
            throw new \InvalidArgumentException('invalid length for $pointOfOrigin when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($pointOfOrigin) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pointOfOrigin when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['pointOfOrigin'] = $pointOfOrigin;

        return $this;
    }

    /**
     * Gets pointOfOriginType
     *
     * @return string|null
     */
    public function getPointOfOriginType()
    {
        return $this->container['pointOfOriginType'];
    }

    /**
     * Sets pointOfOriginType
     *
     * @param string|null $pointOfOriginType Valid values are : S (for state postal code abbreviation) , F : FTZ Identifier  Applies EEI forms only. Required for EEI form.
     *
     * @return self
     */
    public function setPointOfOriginType($pointOfOriginType)
    {
        if (is_null($pointOfOriginType)) {
            throw new \InvalidArgumentException('non-nullable pointOfOriginType cannot be null');
        }
        if ((mb_strlen($pointOfOriginType) > 1)) {
            throw new \InvalidArgumentException('invalid length for $pointOfOriginType when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($pointOfOriginType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pointOfOriginType when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['pointOfOriginType'] = $pointOfOriginType;

        return $this;
    }

    /**
     * Gets modeOfTransport
     *
     * @return string|null
     */
    public function getModeOfTransport()
    {
        return $this->container['modeOfTransport'];
    }

    /**
     * Sets modeOfTransport
     *
     * @param string|null $modeOfTransport Mode of transport by which the goods are exported. Valid values: Air, AirContainerized, Auto, FixedTransportInstallations, Mail, PassengerHandcarried, Pedestrian, Rail, Rail, Containerized, RoadOther, SeaBarge, SeaContainerized, SeaNoncontainerized, Truck, TruckContainerized.  Applies to EEI forms only.  Required for EEI.  Only allowed values can be entered. Only 10 Characters can appear on the form. Anything greater than 10 characters will be truncated on the form.
     *
     * @return self
     */
    public function setModeOfTransport($modeOfTransport)
    {
        if (is_null($modeOfTransport)) {
            throw new \InvalidArgumentException('non-nullable modeOfTransport cannot be null');
        }
        if ((mb_strlen($modeOfTransport) > 35)) {
            throw new \InvalidArgumentException('invalid length for $modeOfTransport when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($modeOfTransport) < 1)) {
            throw new \InvalidArgumentException('invalid length for $modeOfTransport when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['modeOfTransport'] = $modeOfTransport;

        return $this;
    }

    /**
     * Gets portOfExport
     *
     * @return string|null
     */
    public function getPortOfExport()
    {
        return $this->container['portOfExport'];
    }

    /**
     * Sets portOfExport
     *
     * @param string|null $portOfExport Should be one of the following-Overland: The U.S. Customs port where the carrier crosses the U.S. border, Vessel and Air: The U.S. Customs port where the goods are loaded on the carrier to be exported from the U.S., Postal: The U.S. Postal Office from where the goods are mailed.  Applies to EEI forms only. No validation is performed.
     *
     * @return self
     */
    public function setPortOfExport($portOfExport)
    {
        if (is_null($portOfExport)) {
            throw new \InvalidArgumentException('non-nullable portOfExport cannot be null');
        }
        if ((mb_strlen($portOfExport) > 35)) {
            throw new \InvalidArgumentException('invalid length for $portOfExport when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($portOfExport) < 1)) {
            throw new \InvalidArgumentException('invalid length for $portOfExport when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['portOfExport'] = $portOfExport;

        return $this;
    }

    /**
     * Gets portOfUnloading
     *
     * @return string|null
     */
    public function getPortOfUnloading()
    {
        return $this->container['portOfUnloading'];
    }

    /**
     * Sets portOfUnloading
     *
     * @param string|null $portOfUnloading The country or territory and the port where the goods will be unloaded from the exporting carrier. For vessel and air shipments only.  Applies to EEI forms only. No validation is performed.
     *
     * @return self
     */
    public function setPortOfUnloading($portOfUnloading)
    {
        if (is_null($portOfUnloading)) {
            throw new \InvalidArgumentException('non-nullable portOfUnloading cannot be null');
        }
        if ((mb_strlen($portOfUnloading) > 35)) {
            throw new \InvalidArgumentException('invalid length for $portOfUnloading when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($portOfUnloading) < 1)) {
            throw new \InvalidArgumentException('invalid length for $portOfUnloading when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['portOfUnloading'] = $portOfUnloading;

        return $this;
    }

    /**
     * Gets loadingPier
     *
     * @return string|null
     */
    public function getLoadingPier()
    {
        return $this->container['loadingPier'];
    }

    /**
     * Sets loadingPier
     *
     * @param string|null $loadingPier Pier where goods are loaded. For vessel shipments only.  Applies to EEI forms only. No validation is performed.
     *
     * @return self
     */
    public function setLoadingPier($loadingPier)
    {
        if (is_null($loadingPier)) {
            throw new \InvalidArgumentException('non-nullable loadingPier cannot be null');
        }
        if ((mb_strlen($loadingPier) > 35)) {
            throw new \InvalidArgumentException('invalid length for $loadingPier when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($loadingPier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $loadingPier when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['loadingPier'] = $loadingPier;

        return $this;
    }

    /**
     * Gets partiesToTransaction
     *
     * @return string|null
     */
    public function getPartiesToTransaction()
    {
        return $this->container['partiesToTransaction'];
    }

    /**
     * Sets partiesToTransaction
     *
     * @param string|null $partiesToTransaction Information about parties to transaction. Use Related, if the parties to the transaction are related. A related party is an export from a U.S. businessperson or business to a foreign business or from a U.S. business to a foreign person or business where the person has at least 10 percent of the voting shares of the business during the fiscal year. If unincorporated, then an equivalent interest in the business.  Applies to EEI forms only.  Valid values: - R - Related - N - Non-related.  Parties to transaction is required if EEIFilingOption Code is 3 and if valid UPSFiled POA Code present in request.  Default will be set to N - Non-related if invalid code present with length of one.
     *
     * @return self
     */
    public function setPartiesToTransaction($partiesToTransaction)
    {
        if (is_null($partiesToTransaction)) {
            throw new \InvalidArgumentException('non-nullable partiesToTransaction cannot be null');
        }
        if ((mb_strlen($partiesToTransaction) > 1)) {
            throw new \InvalidArgumentException('invalid length for $partiesToTransaction when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($partiesToTransaction) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partiesToTransaction when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['partiesToTransaction'] = $partiesToTransaction;

        return $this;
    }

    /**
     * Gets routedExportTransactionIndicator
     *
     * @return string|null
     */
    public function getRoutedExportTransactionIndicator()
    {
        return $this->container['routedExportTransactionIndicator'];
    }

    /**
     * Sets routedExportTransactionIndicator
     *
     * @param string|null $routedExportTransactionIndicator If Present, indicates that it is a routed export transaction. A routed export transaction is one, where the foreign principal party in interest authorizes a U.S. forwarding (or other) agent to export the merchandise outside the U.S.  Applies to EEI forms only.
     *
     * @return self
     */
    public function setRoutedExportTransactionIndicator($routedExportTransactionIndicator)
    {
        if (is_null($routedExportTransactionIndicator)) {
            throw new \InvalidArgumentException('non-nullable routedExportTransactionIndicator cannot be null');
        }


        $this->container['routedExportTransactionIndicator'] = $routedExportTransactionIndicator;

        return $this;
    }

    /**
     * Gets containerizedIndicator
     *
     * @return string|null
     */
    public function getContainerizedIndicator()
    {
        return $this->container['containerizedIndicator'];
    }

    /**
     * Sets containerizedIndicator
     *
     * @param string|null $containerizedIndicator If present indicates that the goods are containerized. This applies to vessel shipments only.  Applies to EEI forms only.
     *
     * @return self
     */
    public function setContainerizedIndicator($containerizedIndicator)
    {
        if (is_null($containerizedIndicator)) {
            throw new \InvalidArgumentException('non-nullable containerizedIndicator cannot be null');
        }


        $this->container['containerizedIndicator'] = $containerizedIndicator;

        return $this;
    }

    /**
     * Gets overridePaperlessIndicator
     *
     * @return string|null
     */
    public function getOverridePaperlessIndicator()
    {
        return $this->container['overridePaperlessIndicator'];
    }

    /**
     * Sets overridePaperlessIndicator
     *
     * @param string|null $overridePaperlessIndicator The application will automatically provide a copy of the invoice or NAFTA/CO with each response regardless of whether the user has enabled Paperless account. The user now has the option to print or ignore the copy provided.
     *
     * @return self
     */
    public function setOverridePaperlessIndicator($overridePaperlessIndicator)
    {
        if (is_null($overridePaperlessIndicator)) {
            throw new \InvalidArgumentException('non-nullable overridePaperlessIndicator cannot be null');
        }


        $this->container['overridePaperlessIndicator'] = $overridePaperlessIndicator;

        return $this;
    }

    /**
     * Gets shipperMemo
     *
     * @return string|null
     */
    public function getShipperMemo()
    {
        return $this->container['shipperMemo'];
    }

    /**
     * Sets shipperMemo
     *
     * @param string|null $shipperMemo Text for the shipper to add additional information.  Forward shipment only.
     *
     * @return self
     */
    public function setShipperMemo($shipperMemo)
    {
        if (is_null($shipperMemo)) {
            throw new \InvalidArgumentException('non-nullable shipperMemo cannot be null');
        }
        if ((mb_strlen($shipperMemo) > 300)) {
            throw new \InvalidArgumentException('invalid length for $shipperMemo when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($shipperMemo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shipperMemo when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['shipperMemo'] = $shipperMemo;

        return $this;
    }

    /**
     * Gets hazardousMaterialsIndicator
     *
     * @return string|null
     */
    public function getHazardousMaterialsIndicator()
    {
        return $this->container['hazardousMaterialsIndicator'];
    }

    /**
     * Sets hazardousMaterialsIndicator
     *
     * @param string|null $hazardousMaterialsIndicator This is an empty tag. Presence of the indicator for EEI form means shipment contains hazardous material.
     *
     * @return self
     */
    public function setHazardousMaterialsIndicator($hazardousMaterialsIndicator)
    {
        if (is_null($hazardousMaterialsIndicator)) {
            throw new \InvalidArgumentException('non-nullable hazardousMaterialsIndicator cannot be null');
        }


        $this->container['hazardousMaterialsIndicator'] = $hazardousMaterialsIndicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


