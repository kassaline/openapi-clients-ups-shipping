<?php
/**
 * InternationalFormsProduct
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * InternationalFormsProduct Class Doc Comment
 *
 * @category Class
 * @description Contains the commodity/product information.  Applies to EEI, Invoice, Partial Invoice, CO and NAFTA CO. When any International form is requested, at least one Product must be present.   Maximum number of products allowed for different forms are:  50: Package Packing List  100: Commercial Invoice, NAFTA, CO, EEI  1000: Air Freight packing list  Note: For Partial Invoice this container is optional.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InternationalFormsProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InternationalForms_Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string[]',
        'unit' => '\OpenAPIClientUPSShipping\Model\ProductUnit',
        'commodityCode' => 'string',
        'partNumber' => 'string',
        'originCountryCode' => 'string',
        'jointProductionIndicator' => 'string',
        'netCostCode' => 'string',
        'netCostDateRange' => '\OpenAPIClientUPSShipping\Model\ProductNetCostDateRange',
        'preferenceCriteria' => 'string',
        'producerInfo' => 'string',
        'marksAndNumbers' => 'string',
        'numberOfPackagesPerCommodity' => 'string',
        'productWeight' => '\OpenAPIClientUPSShipping\Model\ProductProductWeight',
        'vehicleID' => 'string',
        'scheduleB' => '\OpenAPIClientUPSShipping\Model\ProductScheduleB',
        'exportType' => 'string',
        'sEDTotalValue' => 'string',
        'taxesPaid' => 'string',
        'excludeFromForm' => '\OpenAPIClientUPSShipping\Model\ProductExcludeFromForm',
        'packingListInfo' => '\OpenAPIClientUPSShipping\Model\ProductPackingListInfo',
        'eEIInformation' => '\OpenAPIClientUPSShipping\Model\ProductEEIInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'unit' => null,
        'commodityCode' => null,
        'partNumber' => null,
        'originCountryCode' => null,
        'jointProductionIndicator' => null,
        'netCostCode' => null,
        'netCostDateRange' => null,
        'preferenceCriteria' => null,
        'producerInfo' => null,
        'marksAndNumbers' => null,
        'numberOfPackagesPerCommodity' => null,
        'productWeight' => null,
        'vehicleID' => null,
        'scheduleB' => null,
        'exportType' => null,
        'sEDTotalValue' => null,
        'taxesPaid' => null,
        'excludeFromForm' => null,
        'packingListInfo' => null,
        'eEIInformation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'unit' => false,
        'commodityCode' => false,
        'partNumber' => false,
        'originCountryCode' => false,
        'jointProductionIndicator' => false,
        'netCostCode' => false,
        'netCostDateRange' => false,
        'preferenceCriteria' => false,
        'producerInfo' => false,
        'marksAndNumbers' => false,
        'numberOfPackagesPerCommodity' => false,
        'productWeight' => false,
        'vehicleID' => false,
        'scheduleB' => false,
        'exportType' => false,
        'sEDTotalValue' => false,
        'taxesPaid' => false,
        'excludeFromForm' => false,
        'packingListInfo' => false,
        'eEIInformation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'unit' => 'Unit',
        'commodityCode' => 'CommodityCode',
        'partNumber' => 'PartNumber',
        'originCountryCode' => 'OriginCountryCode',
        'jointProductionIndicator' => 'JointProductionIndicator',
        'netCostCode' => 'NetCostCode',
        'netCostDateRange' => 'NetCostDateRange',
        'preferenceCriteria' => 'PreferenceCriteria',
        'producerInfo' => 'ProducerInfo',
        'marksAndNumbers' => 'MarksAndNumbers',
        'numberOfPackagesPerCommodity' => 'NumberOfPackagesPerCommodity',
        'productWeight' => 'ProductWeight',
        'vehicleID' => 'VehicleID',
        'scheduleB' => 'ScheduleB',
        'exportType' => 'ExportType',
        'sEDTotalValue' => 'SEDTotalValue',
        'taxesPaid' => 'TaxesPaid',
        'excludeFromForm' => 'ExcludeFromForm',
        'packingListInfo' => 'PackingListInfo',
        'eEIInformation' => 'EEIInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'unit' => 'setUnit',
        'commodityCode' => 'setCommodityCode',
        'partNumber' => 'setPartNumber',
        'originCountryCode' => 'setOriginCountryCode',
        'jointProductionIndicator' => 'setJointProductionIndicator',
        'netCostCode' => 'setNetCostCode',
        'netCostDateRange' => 'setNetCostDateRange',
        'preferenceCriteria' => 'setPreferenceCriteria',
        'producerInfo' => 'setProducerInfo',
        'marksAndNumbers' => 'setMarksAndNumbers',
        'numberOfPackagesPerCommodity' => 'setNumberOfPackagesPerCommodity',
        'productWeight' => 'setProductWeight',
        'vehicleID' => 'setVehicleID',
        'scheduleB' => 'setScheduleB',
        'exportType' => 'setExportType',
        'sEDTotalValue' => 'setSEDTotalValue',
        'taxesPaid' => 'setTaxesPaid',
        'excludeFromForm' => 'setExcludeFromForm',
        'packingListInfo' => 'setPackingListInfo',
        'eEIInformation' => 'setEEIInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'unit' => 'getUnit',
        'commodityCode' => 'getCommodityCode',
        'partNumber' => 'getPartNumber',
        'originCountryCode' => 'getOriginCountryCode',
        'jointProductionIndicator' => 'getJointProductionIndicator',
        'netCostCode' => 'getNetCostCode',
        'netCostDateRange' => 'getNetCostDateRange',
        'preferenceCriteria' => 'getPreferenceCriteria',
        'producerInfo' => 'getProducerInfo',
        'marksAndNumbers' => 'getMarksAndNumbers',
        'numberOfPackagesPerCommodity' => 'getNumberOfPackagesPerCommodity',
        'productWeight' => 'getProductWeight',
        'vehicleID' => 'getVehicleID',
        'scheduleB' => 'getScheduleB',
        'exportType' => 'getExportType',
        'sEDTotalValue' => 'getSEDTotalValue',
        'taxesPaid' => 'getTaxesPaid',
        'excludeFromForm' => 'getExcludeFromForm',
        'packingListInfo' => 'getPackingListInfo',
        'eEIInformation' => 'getEEIInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('commodityCode', $data ?? [], null);
        $this->setIfExists('partNumber', $data ?? [], null);
        $this->setIfExists('originCountryCode', $data ?? [], null);
        $this->setIfExists('jointProductionIndicator', $data ?? [], null);
        $this->setIfExists('netCostCode', $data ?? [], null);
        $this->setIfExists('netCostDateRange', $data ?? [], null);
        $this->setIfExists('preferenceCriteria', $data ?? [], null);
        $this->setIfExists('producerInfo', $data ?? [], null);
        $this->setIfExists('marksAndNumbers', $data ?? [], null);
        $this->setIfExists('numberOfPackagesPerCommodity', $data ?? [], null);
        $this->setIfExists('productWeight', $data ?? [], null);
        $this->setIfExists('vehicleID', $data ?? [], null);
        $this->setIfExists('scheduleB', $data ?? [], null);
        $this->setIfExists('exportType', $data ?? [], null);
        $this->setIfExists('sEDTotalValue', $data ?? [], null);
        $this->setIfExists('taxesPaid', $data ?? [], null);
        $this->setIfExists('excludeFromForm', $data ?? [], null);
        $this->setIfExists('packingListInfo', $data ?? [], null);
        $this->setIfExists('eEIInformation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if (!is_null($this->container['commodityCode']) && (mb_strlen($this->container['commodityCode']) > 15)) {
            $invalidProperties[] = "invalid value for 'commodityCode', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['commodityCode']) && (mb_strlen($this->container['commodityCode']) < 6)) {
            $invalidProperties[] = "invalid value for 'commodityCode', the character length must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['partNumber']) && (mb_strlen($this->container['partNumber']) > 35)) {
            $invalidProperties[] = "invalid value for 'partNumber', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['partNumber']) && (mb_strlen($this->container['partNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'partNumber', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['originCountryCode']) && (mb_strlen($this->container['originCountryCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'originCountryCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['originCountryCode']) && (mb_strlen($this->container['originCountryCode']) < 2)) {
            $invalidProperties[] = "invalid value for 'originCountryCode', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['netCostCode']) && (mb_strlen($this->container['netCostCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'netCostCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['netCostCode']) && (mb_strlen($this->container['netCostCode']) < 2)) {
            $invalidProperties[] = "invalid value for 'netCostCode', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['preferenceCriteria']) && (mb_strlen($this->container['preferenceCriteria']) > 1)) {
            $invalidProperties[] = "invalid value for 'preferenceCriteria', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['preferenceCriteria']) && (mb_strlen($this->container['preferenceCriteria']) < 1)) {
            $invalidProperties[] = "invalid value for 'preferenceCriteria', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['producerInfo']) && (mb_strlen($this->container['producerInfo']) > 5)) {
            $invalidProperties[] = "invalid value for 'producerInfo', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['producerInfo']) && (mb_strlen($this->container['producerInfo']) < 3)) {
            $invalidProperties[] = "invalid value for 'producerInfo', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['marksAndNumbers']) && (mb_strlen($this->container['marksAndNumbers']) > 35)) {
            $invalidProperties[] = "invalid value for 'marksAndNumbers', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['marksAndNumbers']) && (mb_strlen($this->container['marksAndNumbers']) < 1)) {
            $invalidProperties[] = "invalid value for 'marksAndNumbers', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['numberOfPackagesPerCommodity']) && (mb_strlen($this->container['numberOfPackagesPerCommodity']) > 3)) {
            $invalidProperties[] = "invalid value for 'numberOfPackagesPerCommodity', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['numberOfPackagesPerCommodity']) && (mb_strlen($this->container['numberOfPackagesPerCommodity']) < 1)) {
            $invalidProperties[] = "invalid value for 'numberOfPackagesPerCommodity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['vehicleID']) && (mb_strlen($this->container['vehicleID']) > 25)) {
            $invalidProperties[] = "invalid value for 'vehicleID', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['vehicleID']) && (mb_strlen($this->container['vehicleID']) < 1)) {
            $invalidProperties[] = "invalid value for 'vehicleID', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['exportType']) && (mb_strlen($this->container['exportType']) > 1)) {
            $invalidProperties[] = "invalid value for 'exportType', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['exportType']) && (mb_strlen($this->container['exportType']) < 1)) {
            $invalidProperties[] = "invalid value for 'exportType', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sEDTotalValue']) && (mb_strlen($this->container['sEDTotalValue']) > 15)) {
            $invalidProperties[] = "invalid value for 'sEDTotalValue', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['sEDTotalValue']) && (mb_strlen($this->container['sEDTotalValue']) < 1)) {
            $invalidProperties[] = "invalid value for 'sEDTotalValue', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string[] $description Description of the product.  Applies to all International Forms. Optional for Partial Invoice. Must be present at least once and can occur for a maximum of 3 times.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }


        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return \OpenAPIClientUPSShipping\Model\ProductUnit|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param \OpenAPIClientUPSShipping\Model\ProductUnit|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets commodityCode
     *
     * @return string|null
     */
    public function getCommodityCode()
    {
        return $this->container['commodityCode'];
    }

    /**
     * Sets commodityCode
     *
     * @param string|null $commodityCode 6-to-15-alphanumeric commodity code. Customs uses this code to determine what duties should be assessed on the commodity.  Applies to Invoice, Partial Invoice and NAFTA CO. Required for NAFTA CO and optional for Partial Invoice. Should be at least 6 alphanumeric. For NAFTA CO: For each good described in Description of Goods field, identify the H.S. tariff classification to six digits. If the good is subject to a specific rule of origin in Annex 401 that requires eight digits, identify to eight digits, using the H.S. tariff classification of the country or territory into whose territory the good is imported.
     *
     * @return self
     */
    public function setCommodityCode($commodityCode)
    {
        if (is_null($commodityCode)) {
            throw new \InvalidArgumentException('non-nullable commodityCode cannot be null');
        }
        if ((mb_strlen($commodityCode) > 15)) {
            throw new \InvalidArgumentException('invalid length for $commodityCode when calling InternationalFormsProduct., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($commodityCode) < 6)) {
            throw new \InvalidArgumentException('invalid length for $commodityCode when calling InternationalFormsProduct., must be bigger than or equal to 6.');
        }

        $this->container['commodityCode'] = $commodityCode;

        return $this;
    }

    /**
     * Gets partNumber
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['partNumber'];
    }

    /**
     * Sets partNumber
     *
     * @param string|null $partNumber The part number or reference number for the product contained in the invoice line, as indicated on the customs invoice.  Applies to Invoice and Partial Invoice. Required for Invoice forms and optional for Partial Invoice.
     *
     * @return self
     */
    public function setPartNumber($partNumber)
    {
        if (is_null($partNumber)) {
            throw new \InvalidArgumentException('non-nullable partNumber cannot be null');
        }
        if ((mb_strlen($partNumber) > 35)) {
            throw new \InvalidArgumentException('invalid length for $partNumber when calling InternationalFormsProduct., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($partNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partNumber when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['partNumber'] = $partNumber;

        return $this;
    }

    /**
     * Gets originCountryCode
     *
     * @return string|null
     */
    public function getOriginCountryCode()
    {
        return $this->container['originCountryCode'];
    }

    /**
     * Sets originCountryCode
     *
     * @param string|null $originCountryCode The country or territory in which the good was manufactured, produced or grown. For detailed information on country or territory of origin, certificate of origin, rules of origin, and any related matters, please refer to the U.S. Customs and Border Protection Web site at www.customs.gov or contact your country or territory's Customs authority.
     *
     * @return self
     */
    public function setOriginCountryCode($originCountryCode)
    {
        if (is_null($originCountryCode)) {
            throw new \InvalidArgumentException('non-nullable originCountryCode cannot be null');
        }
        if ((mb_strlen($originCountryCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $originCountryCode when calling InternationalFormsProduct., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($originCountryCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $originCountryCode when calling InternationalFormsProduct., must be bigger than or equal to 2.');
        }

        $this->container['originCountryCode'] = $originCountryCode;

        return $this;
    }

    /**
     * Gets jointProductionIndicator
     *
     * @return string|null
     */
    public function getJointProductionIndicator()
    {
        return $this->container['jointProductionIndicator'];
    }

    /**
     * Sets jointProductionIndicator
     *
     * @param string|null $jointProductionIndicator If present, JNT will be used as the origin of country or territory code on the NAFTA form and the Product/Origincountry or territoryCode tag will be ignored.  Applies to NAFTA CO only.
     *
     * @return self
     */
    public function setJointProductionIndicator($jointProductionIndicator)
    {
        if (is_null($jointProductionIndicator)) {
            throw new \InvalidArgumentException('non-nullable jointProductionIndicator cannot be null');
        }


        $this->container['jointProductionIndicator'] = $jointProductionIndicator;

        return $this;
    }

    /**
     * Gets netCostCode
     *
     * @return string|null
     */
    public function getNetCostCode()
    {
        return $this->container['netCostCode'];
    }

    /**
     * Sets netCostCode
     *
     * @param string|null $netCostCode For each good described in the Description of Goods field, where the good is subject to a regional value content (RVC) requirement, indicate NC if the RVC is calculated according to the net cost method; otherwise, indicate NO. If the RVC is calculated over a period of time then indicate \"NC with begin/end date\" by passing code \"ND\"  Applies to NAFTA CO only. Required for NAFTA CO.  Valid values: - NC - ND - NO
     *
     * @return self
     */
    public function setNetCostCode($netCostCode)
    {
        if (is_null($netCostCode)) {
            throw new \InvalidArgumentException('non-nullable netCostCode cannot be null');
        }
        if ((mb_strlen($netCostCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $netCostCode when calling InternationalFormsProduct., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($netCostCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $netCostCode when calling InternationalFormsProduct., must be bigger than or equal to 2.');
        }

        $this->container['netCostCode'] = $netCostCode;

        return $this;
    }

    /**
     * Gets netCostDateRange
     *
     * @return \OpenAPIClientUPSShipping\Model\ProductNetCostDateRange|null
     */
    public function getNetCostDateRange()
    {
        return $this->container['netCostDateRange'];
    }

    /**
     * Sets netCostDateRange
     *
     * @param \OpenAPIClientUPSShipping\Model\ProductNetCostDateRange|null $netCostDateRange netCostDateRange
     *
     * @return self
     */
    public function setNetCostDateRange($netCostDateRange)
    {
        if (is_null($netCostDateRange)) {
            throw new \InvalidArgumentException('non-nullable netCostDateRange cannot be null');
        }
        $this->container['netCostDateRange'] = $netCostDateRange;

        return $this;
    }

    /**
     * Gets preferenceCriteria
     *
     * @return string|null
     */
    public function getPreferenceCriteria()
    {
        return $this->container['preferenceCriteria'];
    }

    /**
     * Sets preferenceCriteria
     *
     * @param string|null $preferenceCriteria Indicates the criterion (A through F) for each good described in the Description of Goods field if applicable.   The rules of origin are contained in Chapter Four and Annex 401.   Additional rules are described in Annex 703.2 (certain agricultural goods), Annex 300-B, Appendix 6 (certain textile goods) and Annex 308.1 (certain automatic data processing goods and their parts).  Applies to NAFTA CO only.
     *
     * @return self
     */
    public function setPreferenceCriteria($preferenceCriteria)
    {
        if (is_null($preferenceCriteria)) {
            throw new \InvalidArgumentException('non-nullable preferenceCriteria cannot be null');
        }
        if ((mb_strlen($preferenceCriteria) > 1)) {
            throw new \InvalidArgumentException('invalid length for $preferenceCriteria when calling InternationalFormsProduct., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($preferenceCriteria) < 1)) {
            throw new \InvalidArgumentException('invalid length for $preferenceCriteria when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['preferenceCriteria'] = $preferenceCriteria;

        return $this;
    }

    /**
     * Gets producerInfo
     *
     * @return string|null
     */
    public function getProducerInfo()
    {
        return $this->container['producerInfo'];
    }

    /**
     * Sets producerInfo
     *
     * @param string|null $producerInfo Indicate the following:  Yes - If shipper is the producer of the good. If not, state 02, 03, and 04 depending on whether this certificate was based upon:   No [1] - Knowledge of whether the good qualifies as an originating good.  No [2] - Reliance on the producers written representation (other than a Certificate of Origin) that the good qualifies as an originating good.  No [3] - A completed and signed Certificate for the good voluntarily provided to the exporter by the producer.  Applicable for NAFTA CO and is required. Valid values: Yes, No [1], No [2], and No [3].
     *
     * @return self
     */
    public function setProducerInfo($producerInfo)
    {
        if (is_null($producerInfo)) {
            throw new \InvalidArgumentException('non-nullable producerInfo cannot be null');
        }
        if ((mb_strlen($producerInfo) > 5)) {
            throw new \InvalidArgumentException('invalid length for $producerInfo when calling InternationalFormsProduct., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($producerInfo) < 3)) {
            throw new \InvalidArgumentException('invalid length for $producerInfo when calling InternationalFormsProduct., must be bigger than or equal to 3.');
        }

        $this->container['producerInfo'] = $producerInfo;

        return $this;
    }

    /**
     * Gets marksAndNumbers
     *
     * @return string|null
     */
    public function getMarksAndNumbers()
    {
        return $this->container['marksAndNumbers'];
    }

    /**
     * Sets marksAndNumbers
     *
     * @param string|null $marksAndNumbers Any special marks, codes, and numbers that may appear on package.  Applies to CO Only.
     *
     * @return self
     */
    public function setMarksAndNumbers($marksAndNumbers)
    {
        if (is_null($marksAndNumbers)) {
            throw new \InvalidArgumentException('non-nullable marksAndNumbers cannot be null');
        }
        if ((mb_strlen($marksAndNumbers) > 35)) {
            throw new \InvalidArgumentException('invalid length for $marksAndNumbers when calling InternationalFormsProduct., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($marksAndNumbers) < 1)) {
            throw new \InvalidArgumentException('invalid length for $marksAndNumbers when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['marksAndNumbers'] = $marksAndNumbers;

        return $this;
    }

    /**
     * Gets numberOfPackagesPerCommodity
     *
     * @return string|null
     */
    public function getNumberOfPackagesPerCommodity()
    {
        return $this->container['numberOfPackagesPerCommodity'];
    }

    /**
     * Sets numberOfPackagesPerCommodity
     *
     * @param string|null $numberOfPackagesPerCommodity The total number of packages, cartons, or containers for the commodity.  Applicable for CO and is required. Should be numeric. Valid characters are 0 -9.
     *
     * @return self
     */
    public function setNumberOfPackagesPerCommodity($numberOfPackagesPerCommodity)
    {
        if (is_null($numberOfPackagesPerCommodity)) {
            throw new \InvalidArgumentException('non-nullable numberOfPackagesPerCommodity cannot be null');
        }
        if ((mb_strlen($numberOfPackagesPerCommodity) > 3)) {
            throw new \InvalidArgumentException('invalid length for $numberOfPackagesPerCommodity when calling InternationalFormsProduct., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($numberOfPackagesPerCommodity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $numberOfPackagesPerCommodity when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['numberOfPackagesPerCommodity'] = $numberOfPackagesPerCommodity;

        return $this;
    }

    /**
     * Gets productWeight
     *
     * @return \OpenAPIClientUPSShipping\Model\ProductProductWeight|null
     */
    public function getProductWeight()
    {
        return $this->container['productWeight'];
    }

    /**
     * Sets productWeight
     *
     * @param \OpenAPIClientUPSShipping\Model\ProductProductWeight|null $productWeight productWeight
     *
     * @return self
     */
    public function setProductWeight($productWeight)
    {
        if (is_null($productWeight)) {
            throw new \InvalidArgumentException('non-nullable productWeight cannot be null');
        }
        $this->container['productWeight'] = $productWeight;

        return $this;
    }

    /**
     * Gets vehicleID
     *
     * @return string|null
     */
    public function getVehicleID()
    {
        return $this->container['vehicleID'];
    }

    /**
     * Sets vehicleID
     *
     * @param string|null $vehicleID Includes the following information for used self-propelled vehicles as defined in Customs regulations 19 CFR 192.1: The unique Vehicle Identification Number (VIN) in the proper format. Or The Product Identification Number (PIN) for those used self-propelled vehicles for which there are no VINs.  Or the Vehicle Title Number.  Applies to EEI forms only.
     *
     * @return self
     */
    public function setVehicleID($vehicleID)
    {
        if (is_null($vehicleID)) {
            throw new \InvalidArgumentException('non-nullable vehicleID cannot be null');
        }
        if ((mb_strlen($vehicleID) > 25)) {
            throw new \InvalidArgumentException('invalid length for $vehicleID when calling InternationalFormsProduct., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($vehicleID) < 1)) {
            throw new \InvalidArgumentException('invalid length for $vehicleID when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['vehicleID'] = $vehicleID;

        return $this;
    }

    /**
     * Gets scheduleB
     *
     * @return \OpenAPIClientUPSShipping\Model\ProductScheduleB|null
     */
    public function getScheduleB()
    {
        return $this->container['scheduleB'];
    }

    /**
     * Sets scheduleB
     *
     * @param \OpenAPIClientUPSShipping\Model\ProductScheduleB|null $scheduleB scheduleB
     *
     * @return self
     */
    public function setScheduleB($scheduleB)
    {
        if (is_null($scheduleB)) {
            throw new \InvalidArgumentException('non-nullable scheduleB cannot be null');
        }
        $this->container['scheduleB'] = $scheduleB;

        return $this;
    }

    /**
     * Gets exportType
     *
     * @return string|null
     */
    public function getExportType()
    {
        return $this->container['exportType'];
    }

    /**
     * Sets exportType
     *
     * @param string|null $exportType Code indicating Domestic: Exports that have been produced, manufactured, or grown in the United States or Puerto Rico. This includes imported merchandise which has been enhanced in value or changed from the form in which imported by further manufacture or processing in the United States or Puerto Rico. Foreign: Merchandise that has entered the United States and is being exported again in the same condition as when imported.   Applies to EEI forms only. Required for EEI form.  Valid values:  D: Domestic; F: Foreign.
     *
     * @return self
     */
    public function setExportType($exportType)
    {
        if (is_null($exportType)) {
            throw new \InvalidArgumentException('non-nullable exportType cannot be null');
        }
        if ((mb_strlen($exportType) > 1)) {
            throw new \InvalidArgumentException('invalid length for $exportType when calling InternationalFormsProduct., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($exportType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $exportType when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['exportType'] = $exportType;

        return $this;
    }

    /**
     * Gets sEDTotalValue
     *
     * @return string|null
     */
    public function getSEDTotalValue()
    {
        return $this->container['sEDTotalValue'];
    }

    /**
     * Sets sEDTotalValue
     *
     * @param string|null $sEDTotalValue This amount will always be USD.  Applies to EEI forms only. Required for EEI form. Valid characters are 0-9 and \\'.\\' (Decimal point). Limit to 2 digit after the decimal. The maximum length of the field is 15 including \\'.\\' and can hold up to 2 decimal places.  Note: This value is calculated based on the Product/Unit/Value and /Product/Unit/Number (Number of Units * Price per Unit). If the total value is incorrect it will be replaced by the actual calculated total value.
     *
     * @return self
     */
    public function setSEDTotalValue($sEDTotalValue)
    {
        if (is_null($sEDTotalValue)) {
            throw new \InvalidArgumentException('non-nullable sEDTotalValue cannot be null');
        }
        if ((mb_strlen($sEDTotalValue) > 15)) {
            throw new \InvalidArgumentException('invalid length for $sEDTotalValue when calling InternationalFormsProduct., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($sEDTotalValue) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sEDTotalValue when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['sEDTotalValue'] = $sEDTotalValue;

        return $this;
    }

    /**
     * Gets taxesPaid
     *
     * @return string|null
     */
    public function getTaxesPaid()
    {
        return $this->container['taxesPaid'];
    }

    /**
     * Sets taxesPaid
     *
     * @param string|null $taxesPaid Invoice Commodity Level Tax Collected Code for each shipment commodity line.Taxes paid Indicator is only applicable for shipments to Singapore. [TaxesPaid = 0 - No on Report], [TaxesPaid = 1 -Yes on Report], [TaxesPaid = empty - null on Report], [If TaxesPaid is not passed in input request = null on Report]
     *
     * @return self
     */
    public function setTaxesPaid($taxesPaid)
    {
        if (is_null($taxesPaid)) {
            throw new \InvalidArgumentException('non-nullable taxesPaid cannot be null');
        }
        $this->container['taxesPaid'] = $taxesPaid;

        return $this;
    }

    /**
     * Gets excludeFromForm
     *
     * @return \OpenAPIClientUPSShipping\Model\ProductExcludeFromForm|null
     */
    public function getExcludeFromForm()
    {
        return $this->container['excludeFromForm'];
    }

    /**
     * Sets excludeFromForm
     *
     * @param \OpenAPIClientUPSShipping\Model\ProductExcludeFromForm|null $excludeFromForm excludeFromForm
     *
     * @return self
     */
    public function setExcludeFromForm($excludeFromForm)
    {
        if (is_null($excludeFromForm)) {
            throw new \InvalidArgumentException('non-nullable excludeFromForm cannot be null');
        }
        $this->container['excludeFromForm'] = $excludeFromForm;

        return $this;
    }

    /**
     * Gets packingListInfo
     *
     * @return \OpenAPIClientUPSShipping\Model\ProductPackingListInfo|null
     */
    public function getPackingListInfo()
    {
        return $this->container['packingListInfo'];
    }

    /**
     * Sets packingListInfo
     *
     * @param \OpenAPIClientUPSShipping\Model\ProductPackingListInfo|null $packingListInfo packingListInfo
     *
     * @return self
     */
    public function setPackingListInfo($packingListInfo)
    {
        if (is_null($packingListInfo)) {
            throw new \InvalidArgumentException('non-nullable packingListInfo cannot be null');
        }
        $this->container['packingListInfo'] = $packingListInfo;

        return $this;
    }

    /**
     * Gets eEIInformation
     *
     * @return \OpenAPIClientUPSShipping\Model\ProductEEIInformation|null
     */
    public function getEEIInformation()
    {
        return $this->container['eEIInformation'];
    }

    /**
     * Sets eEIInformation
     *
     * @param \OpenAPIClientUPSShipping\Model\ProductEEIInformation|null $eEIInformation eEIInformation
     *
     * @return self
     */
    public function setEEIInformation($eEIInformation)
    {
        if (is_null($eEIInformation)) {
            throw new \InvalidArgumentException('non-nullable eEIInformation cannot be null');
        }
        $this->container['eEIInformation'] = $eEIInformation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


