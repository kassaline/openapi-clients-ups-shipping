<?php
/**
 * PackageServiceOptionsHazMat
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * PackageServiceOptionsHazMat Class Doc Comment
 *
 * @category Class
 * @description Container to hold HazMat Chemical Records.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PackageServiceOptionsHazMat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PackageServiceOptions_HazMat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'packagingTypeQuantity' => 'string',
        'recordIdentifier1' => 'string',
        'recordIdentifier2' => 'string',
        'recordIdentifier3' => 'string',
        'subRiskClass' => 'string',
        'aDRItemNumber' => 'string',
        'aDRPackingGroupLetter' => 'string',
        'technicalName' => 'string',
        'hazardLabelRequired' => 'string',
        'classDivisionNumber' => 'string',
        'referenceNumber' => 'string',
        'quantity' => 'string',
        'uOM' => 'string',
        'packagingType' => 'string',
        'iDNumber' => 'string',
        'properShippingName' => 'string',
        'additionalDescription' => 'string',
        'packagingGroupType' => 'string',
        'packagingInstructionCode' => 'string',
        'emergencyPhone' => 'string',
        'emergencyContact' => 'string',
        'reportableQuantity' => 'string',
        'regulationSet' => 'string',
        'transportationMode' => 'string',
        'commodityRegulatedLevelCode' => 'string',
        'transportCategory' => 'string',
        'tunnelRestrictionCode' => 'string',
        'chemicalRecordIdentifier' => 'string',
        'localTechnicalName' => 'string',
        'localProperShippingName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'packagingTypeQuantity' => null,
        'recordIdentifier1' => null,
        'recordIdentifier2' => null,
        'recordIdentifier3' => null,
        'subRiskClass' => null,
        'aDRItemNumber' => null,
        'aDRPackingGroupLetter' => null,
        'technicalName' => null,
        'hazardLabelRequired' => null,
        'classDivisionNumber' => null,
        'referenceNumber' => null,
        'quantity' => null,
        'uOM' => null,
        'packagingType' => null,
        'iDNumber' => null,
        'properShippingName' => null,
        'additionalDescription' => null,
        'packagingGroupType' => null,
        'packagingInstructionCode' => null,
        'emergencyPhone' => null,
        'emergencyContact' => null,
        'reportableQuantity' => null,
        'regulationSet' => null,
        'transportationMode' => null,
        'commodityRegulatedLevelCode' => null,
        'transportCategory' => null,
        'tunnelRestrictionCode' => null,
        'chemicalRecordIdentifier' => null,
        'localTechnicalName' => null,
        'localProperShippingName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'packagingTypeQuantity' => false,
        'recordIdentifier1' => false,
        'recordIdentifier2' => false,
        'recordIdentifier3' => false,
        'subRiskClass' => false,
        'aDRItemNumber' => false,
        'aDRPackingGroupLetter' => false,
        'technicalName' => false,
        'hazardLabelRequired' => false,
        'classDivisionNumber' => false,
        'referenceNumber' => false,
        'quantity' => false,
        'uOM' => false,
        'packagingType' => false,
        'iDNumber' => false,
        'properShippingName' => false,
        'additionalDescription' => false,
        'packagingGroupType' => false,
        'packagingInstructionCode' => false,
        'emergencyPhone' => false,
        'emergencyContact' => false,
        'reportableQuantity' => false,
        'regulationSet' => false,
        'transportationMode' => false,
        'commodityRegulatedLevelCode' => false,
        'transportCategory' => false,
        'tunnelRestrictionCode' => false,
        'chemicalRecordIdentifier' => false,
        'localTechnicalName' => false,
        'localProperShippingName' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'packagingTypeQuantity' => 'PackagingTypeQuantity',
        'recordIdentifier1' => 'RecordIdentifier1',
        'recordIdentifier2' => 'RecordIdentifier2',
        'recordIdentifier3' => 'RecordIdentifier3',
        'subRiskClass' => 'SubRiskClass',
        'aDRItemNumber' => 'aDRItemNumber',
        'aDRPackingGroupLetter' => 'aDRPackingGroupLetter',
        'technicalName' => 'TechnicalName',
        'hazardLabelRequired' => 'HazardLabelRequired',
        'classDivisionNumber' => 'ClassDivisionNumber',
        'referenceNumber' => 'ReferenceNumber',
        'quantity' => 'Quantity',
        'uOM' => 'UOM',
        'packagingType' => 'PackagingType',
        'iDNumber' => 'IDNumber',
        'properShippingName' => 'ProperShippingName',
        'additionalDescription' => 'AdditionalDescription',
        'packagingGroupType' => 'PackagingGroupType',
        'packagingInstructionCode' => 'PackagingInstructionCode',
        'emergencyPhone' => 'EmergencyPhone',
        'emergencyContact' => 'EmergencyContact',
        'reportableQuantity' => 'ReportableQuantity',
        'regulationSet' => 'RegulationSet',
        'transportationMode' => 'TransportationMode',
        'commodityRegulatedLevelCode' => 'CommodityRegulatedLevelCode',
        'transportCategory' => 'TransportCategory',
        'tunnelRestrictionCode' => 'TunnelRestrictionCode',
        'chemicalRecordIdentifier' => 'ChemicalRecordIdentifier',
        'localTechnicalName' => 'LocalTechnicalName',
        'localProperShippingName' => 'LocalProperShippingName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'packagingTypeQuantity' => 'setPackagingTypeQuantity',
        'recordIdentifier1' => 'setRecordIdentifier1',
        'recordIdentifier2' => 'setRecordIdentifier2',
        'recordIdentifier3' => 'setRecordIdentifier3',
        'subRiskClass' => 'setSubRiskClass',
        'aDRItemNumber' => 'setADRItemNumber',
        'aDRPackingGroupLetter' => 'setADRPackingGroupLetter',
        'technicalName' => 'setTechnicalName',
        'hazardLabelRequired' => 'setHazardLabelRequired',
        'classDivisionNumber' => 'setClassDivisionNumber',
        'referenceNumber' => 'setReferenceNumber',
        'quantity' => 'setQuantity',
        'uOM' => 'setUOM',
        'packagingType' => 'setPackagingType',
        'iDNumber' => 'setIDNumber',
        'properShippingName' => 'setProperShippingName',
        'additionalDescription' => 'setAdditionalDescription',
        'packagingGroupType' => 'setPackagingGroupType',
        'packagingInstructionCode' => 'setPackagingInstructionCode',
        'emergencyPhone' => 'setEmergencyPhone',
        'emergencyContact' => 'setEmergencyContact',
        'reportableQuantity' => 'setReportableQuantity',
        'regulationSet' => 'setRegulationSet',
        'transportationMode' => 'setTransportationMode',
        'commodityRegulatedLevelCode' => 'setCommodityRegulatedLevelCode',
        'transportCategory' => 'setTransportCategory',
        'tunnelRestrictionCode' => 'setTunnelRestrictionCode',
        'chemicalRecordIdentifier' => 'setChemicalRecordIdentifier',
        'localTechnicalName' => 'setLocalTechnicalName',
        'localProperShippingName' => 'setLocalProperShippingName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'packagingTypeQuantity' => 'getPackagingTypeQuantity',
        'recordIdentifier1' => 'getRecordIdentifier1',
        'recordIdentifier2' => 'getRecordIdentifier2',
        'recordIdentifier3' => 'getRecordIdentifier3',
        'subRiskClass' => 'getSubRiskClass',
        'aDRItemNumber' => 'getADRItemNumber',
        'aDRPackingGroupLetter' => 'getADRPackingGroupLetter',
        'technicalName' => 'getTechnicalName',
        'hazardLabelRequired' => 'getHazardLabelRequired',
        'classDivisionNumber' => 'getClassDivisionNumber',
        'referenceNumber' => 'getReferenceNumber',
        'quantity' => 'getQuantity',
        'uOM' => 'getUOM',
        'packagingType' => 'getPackagingType',
        'iDNumber' => 'getIDNumber',
        'properShippingName' => 'getProperShippingName',
        'additionalDescription' => 'getAdditionalDescription',
        'packagingGroupType' => 'getPackagingGroupType',
        'packagingInstructionCode' => 'getPackagingInstructionCode',
        'emergencyPhone' => 'getEmergencyPhone',
        'emergencyContact' => 'getEmergencyContact',
        'reportableQuantity' => 'getReportableQuantity',
        'regulationSet' => 'getRegulationSet',
        'transportationMode' => 'getTransportationMode',
        'commodityRegulatedLevelCode' => 'getCommodityRegulatedLevelCode',
        'transportCategory' => 'getTransportCategory',
        'tunnelRestrictionCode' => 'getTunnelRestrictionCode',
        'chemicalRecordIdentifier' => 'getChemicalRecordIdentifier',
        'localTechnicalName' => 'getLocalTechnicalName',
        'localProperShippingName' => 'getLocalProperShippingName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('packagingTypeQuantity', $data ?? [], null);
        $this->setIfExists('recordIdentifier1', $data ?? [], null);
        $this->setIfExists('recordIdentifier2', $data ?? [], null);
        $this->setIfExists('recordIdentifier3', $data ?? [], null);
        $this->setIfExists('subRiskClass', $data ?? [], null);
        $this->setIfExists('aDRItemNumber', $data ?? [], null);
        $this->setIfExists('aDRPackingGroupLetter', $data ?? [], null);
        $this->setIfExists('technicalName', $data ?? [], null);
        $this->setIfExists('hazardLabelRequired', $data ?? [], null);
        $this->setIfExists('classDivisionNumber', $data ?? [], null);
        $this->setIfExists('referenceNumber', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('uOM', $data ?? [], null);
        $this->setIfExists('packagingType', $data ?? [], null);
        $this->setIfExists('iDNumber', $data ?? [], null);
        $this->setIfExists('properShippingName', $data ?? [], null);
        $this->setIfExists('additionalDescription', $data ?? [], null);
        $this->setIfExists('packagingGroupType', $data ?? [], null);
        $this->setIfExists('packagingInstructionCode', $data ?? [], null);
        $this->setIfExists('emergencyPhone', $data ?? [], null);
        $this->setIfExists('emergencyContact', $data ?? [], null);
        $this->setIfExists('reportableQuantity', $data ?? [], null);
        $this->setIfExists('regulationSet', $data ?? [], null);
        $this->setIfExists('transportationMode', $data ?? [], null);
        $this->setIfExists('commodityRegulatedLevelCode', $data ?? [], null);
        $this->setIfExists('transportCategory', $data ?? [], null);
        $this->setIfExists('tunnelRestrictionCode', $data ?? [], null);
        $this->setIfExists('chemicalRecordIdentifier', $data ?? [], null);
        $this->setIfExists('localTechnicalName', $data ?? [], null);
        $this->setIfExists('localProperShippingName', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['packagingTypeQuantity']) && (mb_strlen($this->container['packagingTypeQuantity']) > 3)) {
            $invalidProperties[] = "invalid value for 'packagingTypeQuantity', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['packagingTypeQuantity']) && (mb_strlen($this->container['packagingTypeQuantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'packagingTypeQuantity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['subRiskClass']) && (mb_strlen($this->container['subRiskClass']) > 7)) {
            $invalidProperties[] = "invalid value for 'subRiskClass', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['subRiskClass']) && (mb_strlen($this->container['subRiskClass']) < 7)) {
            $invalidProperties[] = "invalid value for 'subRiskClass', the character length must be bigger than or equal to 7.";
        }

        if (!is_null($this->container['aDRItemNumber']) && (mb_strlen($this->container['aDRItemNumber']) > 10)) {
            $invalidProperties[] = "invalid value for 'aDRItemNumber', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['aDRItemNumber']) && (mb_strlen($this->container['aDRItemNumber']) < 10)) {
            $invalidProperties[] = "invalid value for 'aDRItemNumber', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['aDRPackingGroupLetter']) && (mb_strlen($this->container['aDRPackingGroupLetter']) > 1)) {
            $invalidProperties[] = "invalid value for 'aDRPackingGroupLetter', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['aDRPackingGroupLetter']) && (mb_strlen($this->container['aDRPackingGroupLetter']) < 1)) {
            $invalidProperties[] = "invalid value for 'aDRPackingGroupLetter', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['technicalName']) && (mb_strlen($this->container['technicalName']) > 200)) {
            $invalidProperties[] = "invalid value for 'technicalName', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['technicalName']) && (mb_strlen($this->container['technicalName']) < 200)) {
            $invalidProperties[] = "invalid value for 'technicalName', the character length must be bigger than or equal to 200.";
        }

        if (!is_null($this->container['hazardLabelRequired']) && (mb_strlen($this->container['hazardLabelRequired']) > 50)) {
            $invalidProperties[] = "invalid value for 'hazardLabelRequired', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['hazardLabelRequired']) && (mb_strlen($this->container['hazardLabelRequired']) < 50)) {
            $invalidProperties[] = "invalid value for 'hazardLabelRequired', the character length must be bigger than or equal to 50.";
        }

        if (!is_null($this->container['classDivisionNumber']) && (mb_strlen($this->container['classDivisionNumber']) > 7)) {
            $invalidProperties[] = "invalid value for 'classDivisionNumber', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['classDivisionNumber']) && (mb_strlen($this->container['classDivisionNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'classDivisionNumber', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['referenceNumber']) && (mb_strlen($this->container['referenceNumber']) > 15)) {
            $invalidProperties[] = "invalid value for 'referenceNumber', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['referenceNumber']) && (mb_strlen($this->container['referenceNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'referenceNumber', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['quantity']) && (mb_strlen($this->container['quantity']) > 5)) {
            $invalidProperties[] = "invalid value for 'quantity', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['quantity']) && (mb_strlen($this->container['quantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['uOM']) && (mb_strlen($this->container['uOM']) > 10)) {
            $invalidProperties[] = "invalid value for 'uOM', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['uOM']) && (mb_strlen($this->container['uOM']) < 1)) {
            $invalidProperties[] = "invalid value for 'uOM', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packagingType']) && (mb_strlen($this->container['packagingType']) > 255)) {
            $invalidProperties[] = "invalid value for 'packagingType', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['packagingType']) && (mb_strlen($this->container['packagingType']) < 1)) {
            $invalidProperties[] = "invalid value for 'packagingType', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['iDNumber']) && (mb_strlen($this->container['iDNumber']) > 6)) {
            $invalidProperties[] = "invalid value for 'iDNumber', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['iDNumber']) && (mb_strlen($this->container['iDNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'iDNumber', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['properShippingName'] === null) {
            $invalidProperties[] = "'properShippingName' can't be null";
        }
        if ((mb_strlen($this->container['properShippingName']) > 150)) {
            $invalidProperties[] = "invalid value for 'properShippingName', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['properShippingName']) < 1)) {
            $invalidProperties[] = "invalid value for 'properShippingName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['additionalDescription']) && (mb_strlen($this->container['additionalDescription']) > 255)) {
            $invalidProperties[] = "invalid value for 'additionalDescription', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['additionalDescription']) && (mb_strlen($this->container['additionalDescription']) < 1)) {
            $invalidProperties[] = "invalid value for 'additionalDescription', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packagingGroupType']) && (mb_strlen($this->container['packagingGroupType']) > 5)) {
            $invalidProperties[] = "invalid value for 'packagingGroupType', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['packagingGroupType']) && (mb_strlen($this->container['packagingGroupType']) < 1)) {
            $invalidProperties[] = "invalid value for 'packagingGroupType', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packagingInstructionCode']) && (mb_strlen($this->container['packagingInstructionCode']) > 4)) {
            $invalidProperties[] = "invalid value for 'packagingInstructionCode', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['packagingInstructionCode']) && (mb_strlen($this->container['packagingInstructionCode']) < 1)) {
            $invalidProperties[] = "invalid value for 'packagingInstructionCode', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['emergencyPhone']) && (mb_strlen($this->container['emergencyPhone']) > 25)) {
            $invalidProperties[] = "invalid value for 'emergencyPhone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['emergencyPhone']) && (mb_strlen($this->container['emergencyPhone']) < 1)) {
            $invalidProperties[] = "invalid value for 'emergencyPhone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['emergencyContact']) && (mb_strlen($this->container['emergencyContact']) > 35)) {
            $invalidProperties[] = "invalid value for 'emergencyContact', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['emergencyContact']) && (mb_strlen($this->container['emergencyContact']) < 1)) {
            $invalidProperties[] = "invalid value for 'emergencyContact', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reportableQuantity']) && (mb_strlen($this->container['reportableQuantity']) > 2)) {
            $invalidProperties[] = "invalid value for 'reportableQuantity', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['reportableQuantity']) && (mb_strlen($this->container['reportableQuantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'reportableQuantity', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['regulationSet'] === null) {
            $invalidProperties[] = "'regulationSet' can't be null";
        }
        if ((mb_strlen($this->container['regulationSet']) > 4)) {
            $invalidProperties[] = "invalid value for 'regulationSet', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['regulationSet']) < 3)) {
            $invalidProperties[] = "invalid value for 'regulationSet', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['transportationMode'] === null) {
            $invalidProperties[] = "'transportationMode' can't be null";
        }
        if ((mb_strlen($this->container['transportationMode']) > 30)) {
            $invalidProperties[] = "invalid value for 'transportationMode', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['transportationMode']) < 3)) {
            $invalidProperties[] = "invalid value for 'transportationMode', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['commodityRegulatedLevelCode']) && (mb_strlen($this->container['commodityRegulatedLevelCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'commodityRegulatedLevelCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['commodityRegulatedLevelCode']) && (mb_strlen($this->container['commodityRegulatedLevelCode']) < 2)) {
            $invalidProperties[] = "invalid value for 'commodityRegulatedLevelCode', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['transportCategory']) && (mb_strlen($this->container['transportCategory']) > 1)) {
            $invalidProperties[] = "invalid value for 'transportCategory', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['transportCategory']) && (mb_strlen($this->container['transportCategory']) < 1)) {
            $invalidProperties[] = "invalid value for 'transportCategory', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tunnelRestrictionCode']) && (mb_strlen($this->container['tunnelRestrictionCode']) > 10)) {
            $invalidProperties[] = "invalid value for 'tunnelRestrictionCode', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['tunnelRestrictionCode']) && (mb_strlen($this->container['tunnelRestrictionCode']) < 1)) {
            $invalidProperties[] = "invalid value for 'tunnelRestrictionCode', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['chemicalRecordIdentifier']) && (mb_strlen($this->container['chemicalRecordIdentifier']) > 3)) {
            $invalidProperties[] = "invalid value for 'chemicalRecordIdentifier', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['chemicalRecordIdentifier']) && (mb_strlen($this->container['chemicalRecordIdentifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'chemicalRecordIdentifier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['localTechnicalName']) && (mb_strlen($this->container['localTechnicalName']) > 200)) {
            $invalidProperties[] = "invalid value for 'localTechnicalName', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['localTechnicalName']) && (mb_strlen($this->container['localTechnicalName']) < 1)) {
            $invalidProperties[] = "invalid value for 'localTechnicalName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['localProperShippingName']) && (mb_strlen($this->container['localProperShippingName']) > 150)) {
            $invalidProperties[] = "invalid value for 'localProperShippingName', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['localProperShippingName']) && (mb_strlen($this->container['localProperShippingName']) < 1)) {
            $invalidProperties[] = "invalid value for 'localProperShippingName', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets packagingTypeQuantity
     *
     * @return string|null
     */
    public function getPackagingTypeQuantity()
    {
        return $this->container['packagingTypeQuantity'];
    }

    /**
     * Sets packagingTypeQuantity
     *
     * @param string|null $packagingTypeQuantity The number of pieces of the specific commodity. Required if CommodityRegulatedLevelCode = LQ or FR.  Valid values are 1 to 999.
     *
     * @return self
     */
    public function setPackagingTypeQuantity($packagingTypeQuantity)
    {
        if (is_null($packagingTypeQuantity)) {
            throw new \InvalidArgumentException('non-nullable packagingTypeQuantity cannot be null');
        }
        if ((mb_strlen($packagingTypeQuantity) > 3)) {
            throw new \InvalidArgumentException('invalid length for $packagingTypeQuantity when calling PackageServiceOptionsHazMat., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($packagingTypeQuantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packagingTypeQuantity when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['packagingTypeQuantity'] = $packagingTypeQuantity;

        return $this;
    }

    /**
     * Gets recordIdentifier1
     *
     * @return string|null
     */
    public function getRecordIdentifier1()
    {
        return $this->container['recordIdentifier1'];
    }

    /**
     * Sets recordIdentifier1
     *
     * @param string|null $recordIdentifier1 Reserved for future use.
     *
     * @return self
     */
    public function setRecordIdentifier1($recordIdentifier1)
    {
        if (is_null($recordIdentifier1)) {
            throw new \InvalidArgumentException('non-nullable recordIdentifier1 cannot be null');
        }


        $this->container['recordIdentifier1'] = $recordIdentifier1;

        return $this;
    }

    /**
     * Gets recordIdentifier2
     *
     * @return string|null
     */
    public function getRecordIdentifier2()
    {
        return $this->container['recordIdentifier2'];
    }

    /**
     * Sets recordIdentifier2
     *
     * @param string|null $recordIdentifier2 Reserved for future use.
     *
     * @return self
     */
    public function setRecordIdentifier2($recordIdentifier2)
    {
        if (is_null($recordIdentifier2)) {
            throw new \InvalidArgumentException('non-nullable recordIdentifier2 cannot be null');
        }


        $this->container['recordIdentifier2'] = $recordIdentifier2;

        return $this;
    }

    /**
     * Gets recordIdentifier3
     *
     * @return string|null
     */
    public function getRecordIdentifier3()
    {
        return $this->container['recordIdentifier3'];
    }

    /**
     * Sets recordIdentifier3
     *
     * @param string|null $recordIdentifier3 Reserved for future use.
     *
     * @return self
     */
    public function setRecordIdentifier3($recordIdentifier3)
    {
        if (is_null($recordIdentifier3)) {
            throw new \InvalidArgumentException('non-nullable recordIdentifier3 cannot be null');
        }


        $this->container['recordIdentifier3'] = $recordIdentifier3;

        return $this;
    }

    /**
     * Gets subRiskClass
     *
     * @return string|null
     */
    public function getSubRiskClass()
    {
        return $this->container['subRiskClass'];
    }

    /**
     * Sets subRiskClass
     *
     * @param string|null $subRiskClass Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation.  Secondary hazardous characteristics of a package. (There can be more than one – separate each with a comma).
     *
     * @return self
     */
    public function setSubRiskClass($subRiskClass)
    {
        if (is_null($subRiskClass)) {
            throw new \InvalidArgumentException('non-nullable subRiskClass cannot be null');
        }
        if ((mb_strlen($subRiskClass) > 7)) {
            throw new \InvalidArgumentException('invalid length for $subRiskClass when calling PackageServiceOptionsHazMat., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($subRiskClass) < 7)) {
            throw new \InvalidArgumentException('invalid length for $subRiskClass when calling PackageServiceOptionsHazMat., must be bigger than or equal to 7.');
        }

        $this->container['subRiskClass'] = $subRiskClass;

        return $this;
    }

    /**
     * Gets aDRItemNumber
     *
     * @return string|null
     */
    public function getADRItemNumber()
    {
        return $this->container['aDRItemNumber'];
    }

    /**
     * Sets aDRItemNumber
     *
     * @param string|null $aDRItemNumber The type of regulated good for an ADR package where ADR is for Europe to Europe ground movement.
     *
     * @return self
     */
    public function setADRItemNumber($aDRItemNumber)
    {
        if (is_null($aDRItemNumber)) {
            throw new \InvalidArgumentException('non-nullable aDRItemNumber cannot be null');
        }
        if ((mb_strlen($aDRItemNumber) > 10)) {
            throw new \InvalidArgumentException('invalid length for $aDRItemNumber when calling PackageServiceOptionsHazMat., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($aDRItemNumber) < 10)) {
            throw new \InvalidArgumentException('invalid length for $aDRItemNumber when calling PackageServiceOptionsHazMat., must be bigger than or equal to 10.');
        }

        $this->container['aDRItemNumber'] = $aDRItemNumber;

        return $this;
    }

    /**
     * Gets aDRPackingGroupLetter
     *
     * @return string|null
     */
    public function getADRPackingGroupLetter()
    {
        return $this->container['aDRPackingGroupLetter'];
    }

    /**
     * Sets aDRPackingGroupLetter
     *
     * @param string|null $aDRPackingGroupLetter Required if the field applies to the material by regulation. Field input is Arabic numerals, output is Roman numerals. Will be shown in Roman Numerals.  Valid values: - \"1\" = \"I\", - \"2\" = \"II\", - \"3\" = \"III\", - and blank.
     *
     * @return self
     */
    public function setADRPackingGroupLetter($aDRPackingGroupLetter)
    {
        if (is_null($aDRPackingGroupLetter)) {
            throw new \InvalidArgumentException('non-nullable aDRPackingGroupLetter cannot be null');
        }
        if ((mb_strlen($aDRPackingGroupLetter) > 1)) {
            throw new \InvalidArgumentException('invalid length for $aDRPackingGroupLetter when calling PackageServiceOptionsHazMat., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($aDRPackingGroupLetter) < 1)) {
            throw new \InvalidArgumentException('invalid length for $aDRPackingGroupLetter when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['aDRPackingGroupLetter'] = $aDRPackingGroupLetter;

        return $this;
    }

    /**
     * Gets technicalName
     *
     * @return string|null
     */
    public function getTechnicalName()
    {
        return $this->container['technicalName'];
    }

    /**
     * Sets technicalName
     *
     * @param string|null $technicalName The technical name (when required) for the specified commodity. Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation.
     *
     * @return self
     */
    public function setTechnicalName($technicalName)
    {
        if (is_null($technicalName)) {
            throw new \InvalidArgumentException('non-nullable technicalName cannot be null');
        }
        if ((mb_strlen($technicalName) > 200)) {
            throw new \InvalidArgumentException('invalid length for $technicalName when calling PackageServiceOptionsHazMat., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($technicalName) < 200)) {
            throw new \InvalidArgumentException('invalid length for $technicalName when calling PackageServiceOptionsHazMat., must be bigger than or equal to 200.');
        }

        $this->container['technicalName'] = $technicalName;

        return $this;
    }

    /**
     * Gets hazardLabelRequired
     *
     * @return string|null
     */
    public function getHazardLabelRequired()
    {
        return $this->container['hazardLabelRequired'];
    }

    /**
     * Sets hazardLabelRequired
     *
     * @param string|null $hazardLabelRequired Defines the type of label that is required on the package for the commodity.   Not applicable if CommodityRegulatedLevelCode = LR or EQ.
     *
     * @return self
     */
    public function setHazardLabelRequired($hazardLabelRequired)
    {
        if (is_null($hazardLabelRequired)) {
            throw new \InvalidArgumentException('non-nullable hazardLabelRequired cannot be null');
        }
        if ((mb_strlen($hazardLabelRequired) > 50)) {
            throw new \InvalidArgumentException('invalid length for $hazardLabelRequired when calling PackageServiceOptionsHazMat., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($hazardLabelRequired) < 50)) {
            throw new \InvalidArgumentException('invalid length for $hazardLabelRequired when calling PackageServiceOptionsHazMat., must be bigger than or equal to 50.');
        }

        $this->container['hazardLabelRequired'] = $hazardLabelRequired;

        return $this;
    }

    /**
     * Gets classDivisionNumber
     *
     * @return string|null
     */
    public function getClassDivisionNumber()
    {
        return $this->container['classDivisionNumber'];
    }

    /**
     * Sets classDivisionNumber
     *
     * @param string|null $classDivisionNumber This is the hazard class associated to the specified commodity.  Required if CommodityRegulatedLevelCode is 'EQ', 'LQ' or 'FR'
     *
     * @return self
     */
    public function setClassDivisionNumber($classDivisionNumber)
    {
        if (is_null($classDivisionNumber)) {
            throw new \InvalidArgumentException('non-nullable classDivisionNumber cannot be null');
        }
        if ((mb_strlen($classDivisionNumber) > 7)) {
            throw new \InvalidArgumentException('invalid length for $classDivisionNumber when calling PackageServiceOptionsHazMat., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($classDivisionNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $classDivisionNumber when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['classDivisionNumber'] = $classDivisionNumber;

        return $this;
    }

    /**
     * Gets referenceNumber
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['referenceNumber'];
    }

    /**
     * Sets referenceNumber
     *
     * @param string|null $referenceNumber Optional reference number. It will be displayed only on label.
     *
     * @return self
     */
    public function setReferenceNumber($referenceNumber)
    {
        if (is_null($referenceNumber)) {
            throw new \InvalidArgumentException('non-nullable referenceNumber cannot be null');
        }
        if ((mb_strlen($referenceNumber) > 15)) {
            throw new \InvalidArgumentException('invalid length for $referenceNumber when calling PackageServiceOptionsHazMat., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($referenceNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $referenceNumber when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['referenceNumber'] = $referenceNumber;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string|null $quantity Required if CommodityRegulatedLevelCode = EQ, LQ or FR. The numerical value of the mass capacity of the regulated good.  Should be more than 0.0. Valid characters are 0-9 and \".\" (Decimal point). Limit to 1 digit after the decimal. The maximum length of the field is 5 including \".\" (Decimal point) and can hold up to 1 decimal place.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        if ((mb_strlen($quantity) > 5)) {
            throw new \InvalidArgumentException('invalid length for $quantity when calling PackageServiceOptionsHazMat., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($quantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $quantity when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets uOM
     *
     * @return string|null
     */
    public function getUOM()
    {
        return $this->container['uOM'];
    }

    /**
     * Sets uOM
     *
     * @param string|null $uOM Required if CommodityRegulatedLevelCode = LQ, EQ or FR. The unit of measure used for the mass capacity of the regulated good.   For Example: ml, L, g, mg, kg, cylinder, pound, pint, quart, gallon, ounce etc.
     *
     * @return self
     */
    public function setUOM($uOM)
    {
        if (is_null($uOM)) {
            throw new \InvalidArgumentException('non-nullable uOM cannot be null');
        }
        if ((mb_strlen($uOM) > 10)) {
            throw new \InvalidArgumentException('invalid length for $uOM when calling PackageServiceOptionsHazMat., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($uOM) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uOM when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['uOM'] = $uOM;

        return $this;
    }

    /**
     * Gets packagingType
     *
     * @return string|null
     */
    public function getPackagingType()
    {
        return $this->container['packagingType'];
    }

    /**
     * Sets packagingType
     *
     * @param string|null $packagingType The type of package used to contain the regulated good. (Ex: Fiberboard Box). Required if CommodityRegulatedLevelCode = LQ or FR.   Ex. FIBERBOARD BOX, WOOD(EN) BOX, PLASTIC JERRICAN, METAL BOX, STEEL DRUM, OTHER, PLASTIC BOX, PLASTIC DRUM, STYROFOAM BOX, CYLINDERS, ENVIROTAINER, PLYWOOD BOX, ALUMINUM DRUM, ALUMINUM CYLINDERS, PLASTIC PAIL, PLYWOOD DRUM, FIBER DRUM, STEEL JERRICAN, ALUMINUM JERRICAN, STEEL BOX, CARTON, ALUMINUM BOX
     *
     * @return self
     */
    public function setPackagingType($packagingType)
    {
        if (is_null($packagingType)) {
            throw new \InvalidArgumentException('non-nullable packagingType cannot be null');
        }
        if ((mb_strlen($packagingType) > 255)) {
            throw new \InvalidArgumentException('invalid length for $packagingType when calling PackageServiceOptionsHazMat., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($packagingType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packagingType when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['packagingType'] = $packagingType;

        return $this;
    }

    /**
     * Gets iDNumber
     *
     * @return string|null
     */
    public function getIDNumber()
    {
        return $this->container['iDNumber'];
    }

    /**
     * Sets iDNumber
     *
     * @param string|null $iDNumber This is the ID number (UN/NA/ID) for the specified commodity.  Required if CommodityRegulatedLevelCode = LR, LQ or FR and if the field applies to the material by regulation.  UN/NA/ID Identification Number assigned to the specified regulated good. (Include the UN/NA/ID as part of the entry).
     *
     * @return self
     */
    public function setIDNumber($iDNumber)
    {
        if (is_null($iDNumber)) {
            throw new \InvalidArgumentException('non-nullable iDNumber cannot be null');
        }
        if ((mb_strlen($iDNumber) > 6)) {
            throw new \InvalidArgumentException('invalid length for $iDNumber when calling PackageServiceOptionsHazMat., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($iDNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $iDNumber when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['iDNumber'] = $iDNumber;

        return $this;
    }

    /**
     * Gets properShippingName
     *
     * @return string
     */
    public function getProperShippingName()
    {
        return $this->container['properShippingName'];
    }

    /**
     * Sets properShippingName
     *
     * @param string $properShippingName The Proper Shipping Name assigned by ADR, CFR or IATA. Required if CommodityRegulatedLevelCode = LR, LQ or FR.
     *
     * @return self
     */
    public function setProperShippingName($properShippingName)
    {
        if (is_null($properShippingName)) {
            throw new \InvalidArgumentException('non-nullable properShippingName cannot be null');
        }
        if ((mb_strlen($properShippingName) > 150)) {
            throw new \InvalidArgumentException('invalid length for $properShippingName when calling PackageServiceOptionsHazMat., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($properShippingName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $properShippingName when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['properShippingName'] = $properShippingName;

        return $this;
    }

    /**
     * Gets additionalDescription
     *
     * @return string|null
     */
    public function getAdditionalDescription()
    {
        return $this->container['additionalDescription'];
    }

    /**
     * Sets additionalDescription
     *
     * @param string|null $additionalDescription Additional remarks or special provision information. Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation.  Additional information that may be required by regulation about a hazardous material, such as, \"Limited Quantity\", DOT-SP numbers, EX numbers.
     *
     * @return self
     */
    public function setAdditionalDescription($additionalDescription)
    {
        if (is_null($additionalDescription)) {
            throw new \InvalidArgumentException('non-nullable additionalDescription cannot be null');
        }
        if ((mb_strlen($additionalDescription) > 255)) {
            throw new \InvalidArgumentException('invalid length for $additionalDescription when calling PackageServiceOptionsHazMat., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($additionalDescription) < 1)) {
            throw new \InvalidArgumentException('invalid length for $additionalDescription when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['additionalDescription'] = $additionalDescription;

        return $this;
    }

    /**
     * Gets packagingGroupType
     *
     * @return string|null
     */
    public function getPackagingGroupType()
    {
        return $this->container['packagingGroupType'];
    }

    /**
     * Sets packagingGroupType
     *
     * @param string|null $packagingGroupType This is the packing group category associated to the specified commodity. Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation. Must be shown in Roman Numerals.   Valid values: I II III blank
     *
     * @return self
     */
    public function setPackagingGroupType($packagingGroupType)
    {
        if (is_null($packagingGroupType)) {
            throw new \InvalidArgumentException('non-nullable packagingGroupType cannot be null');
        }
        if ((mb_strlen($packagingGroupType) > 5)) {
            throw new \InvalidArgumentException('invalid length for $packagingGroupType when calling PackageServiceOptionsHazMat., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($packagingGroupType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packagingGroupType when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['packagingGroupType'] = $packagingGroupType;

        return $this;
    }

    /**
     * Gets packagingInstructionCode
     *
     * @return string|null
     */
    public function getPackagingInstructionCode()
    {
        return $this->container['packagingInstructionCode'];
    }

    /**
     * Sets packagingInstructionCode
     *
     * @param string|null $packagingInstructionCode The packing instructions related to the chemical record. Required if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation.
     *
     * @return self
     */
    public function setPackagingInstructionCode($packagingInstructionCode)
    {
        if (is_null($packagingInstructionCode)) {
            throw new \InvalidArgumentException('non-nullable packagingInstructionCode cannot be null');
        }
        if ((mb_strlen($packagingInstructionCode) > 4)) {
            throw new \InvalidArgumentException('invalid length for $packagingInstructionCode when calling PackageServiceOptionsHazMat., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($packagingInstructionCode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packagingInstructionCode when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['packagingInstructionCode'] = $packagingInstructionCode;

        return $this;
    }

    /**
     * Gets emergencyPhone
     *
     * @return string|null
     */
    public function getEmergencyPhone()
    {
        return $this->container['emergencyPhone'];
    }

    /**
     * Sets emergencyPhone
     *
     * @param string|null $emergencyPhone 24 Hour Emergency Phone Number of the shipper. Valid values for this field are (0) through (9) with trailing blanks. For numbers within the U.S., the layout is 1, area code, 7-digit number. For all other countries or territories the layout is country or territory code, area code, number.  The following are restricted in the phone number period \".\", dash \"-\", plus sign \"+\" and conventional parentheses \"(\" and \")\", \"EXT\" or \"OPT\"
     *
     * @return self
     */
    public function setEmergencyPhone($emergencyPhone)
    {
        if (is_null($emergencyPhone)) {
            throw new \InvalidArgumentException('non-nullable emergencyPhone cannot be null');
        }
        if ((mb_strlen($emergencyPhone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $emergencyPhone when calling PackageServiceOptionsHazMat., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($emergencyPhone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $emergencyPhone when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['emergencyPhone'] = $emergencyPhone;

        return $this;
    }

    /**
     * Gets emergencyContact
     *
     * @return string|null
     */
    public function getEmergencyContact()
    {
        return $this->container['emergencyContact'];
    }

    /**
     * Sets emergencyContact
     *
     * @param string|null $emergencyContact The emergency information, contact name and/or contract number, required to be communicated when a call is placed to the EmergencyPhoneNumber. The information is required if there is a value in the EmergencyPhoneNumber field above and the shipment is with a US50 or PR origin and/or destination and the RegulationSet is IATA.
     *
     * @return self
     */
    public function setEmergencyContact($emergencyContact)
    {
        if (is_null($emergencyContact)) {
            throw new \InvalidArgumentException('non-nullable emergencyContact cannot be null');
        }
        if ((mb_strlen($emergencyContact) > 35)) {
            throw new \InvalidArgumentException('invalid length for $emergencyContact when calling PackageServiceOptionsHazMat., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($emergencyContact) < 1)) {
            throw new \InvalidArgumentException('invalid length for $emergencyContact when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['emergencyContact'] = $emergencyContact;

        return $this;
    }

    /**
     * Gets reportableQuantity
     *
     * @return string|null
     */
    public function getReportableQuantity()
    {
        return $this->container['reportableQuantity'];
    }

    /**
     * Sets reportableQuantity
     *
     * @param string|null $reportableQuantity Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation. If reportable quantity is met, 'RQ' should be entered.
     *
     * @return self
     */
    public function setReportableQuantity($reportableQuantity)
    {
        if (is_null($reportableQuantity)) {
            throw new \InvalidArgumentException('non-nullable reportableQuantity cannot be null');
        }
        if ((mb_strlen($reportableQuantity) > 2)) {
            throw new \InvalidArgumentException('invalid length for $reportableQuantity when calling PackageServiceOptionsHazMat., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($reportableQuantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reportableQuantity when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['reportableQuantity'] = $reportableQuantity;

        return $this;
    }

    /**
     * Gets regulationSet
     *
     * @return string
     */
    public function getRegulationSet()
    {
        return $this->container['regulationSet'];
    }

    /**
     * Sets regulationSet
     *
     * @param string $regulationSet The Regulatory set associated with every regulated shipment. It must be same across the shipment.  Valid values:  ADR = Europe to Europe Ground Movement  CFR = HazMat regulated by US Dept. of Transportation within the U.S. or ground shipments to Canada  IATA= Worldwide Air movement  TDG= Canada to Canada ground movement or Canada to U.S. standard movement.  Valid values are ADR, CFR, IATA and TDG. For multiple Chemical Records per package or multiple packages containing different RegulationSet, RegulationSet of first Chemical Record would be considered for validating and rating the entire shipment.
     *
     * @return self
     */
    public function setRegulationSet($regulationSet)
    {
        if (is_null($regulationSet)) {
            throw new \InvalidArgumentException('non-nullable regulationSet cannot be null');
        }
        if ((mb_strlen($regulationSet) > 4)) {
            throw new \InvalidArgumentException('invalid length for $regulationSet when calling PackageServiceOptionsHazMat., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($regulationSet) < 3)) {
            throw new \InvalidArgumentException('invalid length for $regulationSet when calling PackageServiceOptionsHazMat., must be bigger than or equal to 3.');
        }

        $this->container['regulationSet'] = $regulationSet;

        return $this;
    }

    /**
     * Gets transportationMode
     *
     * @return string
     */
    public function getTransportationMode()
    {
        return $this->container['transportationMode'];
    }

    /**
     * Sets transportationMode
     *
     * @param string $transportationMode Not applicable for ADR regulation set. Required for any other regulation set. Declares that a package was prepared according to ground passenger aircraft or cargo aircraft only.  Valid values:  Highway=Highway  Ground=Ground  PAX=Passenger Aircraft  Passenger Aircraft=Passenger Aircraft  CAO=Cargo Aircraft Only  Cargo Aircraft Only=Cargo Aircraft Only  Valid entries include: Highway, Ground, PAX, Passenger Aircraft, CAO and Cargo Aircraft Only.
     *
     * @return self
     */
    public function setTransportationMode($transportationMode)
    {
        if (is_null($transportationMode)) {
            throw new \InvalidArgumentException('non-nullable transportationMode cannot be null');
        }
        if ((mb_strlen($transportationMode) > 30)) {
            throw new \InvalidArgumentException('invalid length for $transportationMode when calling PackageServiceOptionsHazMat., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($transportationMode) < 3)) {
            throw new \InvalidArgumentException('invalid length for $transportationMode when calling PackageServiceOptionsHazMat., must be bigger than or equal to 3.');
        }

        $this->container['transportationMode'] = $transportationMode;

        return $this;
    }

    /**
     * Gets commodityRegulatedLevelCode
     *
     * @return string|null
     */
    public function getCommodityRegulatedLevelCode()
    {
        return $this->container['commodityRegulatedLevelCode'];
    }

    /**
     * Sets commodityRegulatedLevelCode
     *
     * @param string|null $commodityRegulatedLevelCode Indicates the type of commodity - Fully Regulated (FR), Limited Quantity (LQ), Excepted Quantity (EQ) or Lightly Regulated (LR).  Valid values are LR, FR, LQ and EQ. Required for subversion 1701 or greater. LR and EQ are validated if subversion is 1701 or greater. FR, LQ will be validated if subversion is 1807 or greater
     *
     * @return self
     */
    public function setCommodityRegulatedLevelCode($commodityRegulatedLevelCode)
    {
        if (is_null($commodityRegulatedLevelCode)) {
            throw new \InvalidArgumentException('non-nullable commodityRegulatedLevelCode cannot be null');
        }
        if ((mb_strlen($commodityRegulatedLevelCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $commodityRegulatedLevelCode when calling PackageServiceOptionsHazMat., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($commodityRegulatedLevelCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $commodityRegulatedLevelCode when calling PackageServiceOptionsHazMat., must be bigger than or equal to 2.');
        }

        $this->container['commodityRegulatedLevelCode'] = $commodityRegulatedLevelCode;

        return $this;
    }

    /**
     * Gets transportCategory
     *
     * @return string|null
     */
    public function getTransportCategory()
    {
        return $this->container['transportCategory'];
    }

    /**
     * Sets transportCategory
     *
     * @param string|null $transportCategory Transport Category.  Valid values are 0 to 4.
     *
     * @return self
     */
    public function setTransportCategory($transportCategory)
    {
        if (is_null($transportCategory)) {
            throw new \InvalidArgumentException('non-nullable transportCategory cannot be null');
        }
        if ((mb_strlen($transportCategory) > 1)) {
            throw new \InvalidArgumentException('invalid length for $transportCategory when calling PackageServiceOptionsHazMat., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($transportCategory) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transportCategory when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['transportCategory'] = $transportCategory;

        return $this;
    }

    /**
     * Gets tunnelRestrictionCode
     *
     * @return string|null
     */
    public function getTunnelRestrictionCode()
    {
        return $this->container['tunnelRestrictionCode'];
    }

    /**
     * Sets tunnelRestrictionCode
     *
     * @param string|null $tunnelRestrictionCode Defines what is restricted to pass through a tunnel.
     *
     * @return self
     */
    public function setTunnelRestrictionCode($tunnelRestrictionCode)
    {
        if (is_null($tunnelRestrictionCode)) {
            throw new \InvalidArgumentException('non-nullable tunnelRestrictionCode cannot be null');
        }
        if ((mb_strlen($tunnelRestrictionCode) > 10)) {
            throw new \InvalidArgumentException('invalid length for $tunnelRestrictionCode when calling PackageServiceOptionsHazMat., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($tunnelRestrictionCode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tunnelRestrictionCode when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['tunnelRestrictionCode'] = $tunnelRestrictionCode;

        return $this;
    }

    /**
     * Gets chemicalRecordIdentifier
     *
     * @return string|null
     */
    public function getChemicalRecordIdentifier()
    {
        return $this->container['chemicalRecordIdentifier'];
    }

    /**
     * Sets chemicalRecordIdentifier
     *
     * @param string|null $chemicalRecordIdentifier Identifies the Chemical Record.  Required if SubVersion is greater than or equal to 1701.
     *
     * @return self
     */
    public function setChemicalRecordIdentifier($chemicalRecordIdentifier)
    {
        if (is_null($chemicalRecordIdentifier)) {
            throw new \InvalidArgumentException('non-nullable chemicalRecordIdentifier cannot be null');
        }
        if ((mb_strlen($chemicalRecordIdentifier) > 3)) {
            throw new \InvalidArgumentException('invalid length for $chemicalRecordIdentifier when calling PackageServiceOptionsHazMat., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($chemicalRecordIdentifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $chemicalRecordIdentifier when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['chemicalRecordIdentifier'] = $chemicalRecordIdentifier;

        return $this;
    }

    /**
     * Gets localTechnicalName
     *
     * @return string|null
     */
    public function getLocalTechnicalName()
    {
        return $this->container['localTechnicalName'];
    }

    /**
     * Sets localTechnicalName
     *
     * @param string|null $localTechnicalName Technical name in local language.
     *
     * @return self
     */
    public function setLocalTechnicalName($localTechnicalName)
    {
        if (is_null($localTechnicalName)) {
            throw new \InvalidArgumentException('non-nullable localTechnicalName cannot be null');
        }
        if ((mb_strlen($localTechnicalName) > 200)) {
            throw new \InvalidArgumentException('invalid length for $localTechnicalName when calling PackageServiceOptionsHazMat., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($localTechnicalName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $localTechnicalName when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['localTechnicalName'] = $localTechnicalName;

        return $this;
    }

    /**
     * Gets localProperShippingName
     *
     * @return string|null
     */
    public function getLocalProperShippingName()
    {
        return $this->container['localProperShippingName'];
    }

    /**
     * Sets localProperShippingName
     *
     * @param string|null $localProperShippingName Proper shipping name in local langauge.
     *
     * @return self
     */
    public function setLocalProperShippingName($localProperShippingName)
    {
        if (is_null($localProperShippingName)) {
            throw new \InvalidArgumentException('non-nullable localProperShippingName cannot be null');
        }
        if ((mb_strlen($localProperShippingName) > 150)) {
            throw new \InvalidArgumentException('invalid length for $localProperShippingName when calling PackageServiceOptionsHazMat., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($localProperShippingName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $localProperShippingName when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['localProperShippingName'] = $localProperShippingName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


