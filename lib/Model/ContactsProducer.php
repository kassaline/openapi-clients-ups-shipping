<?php
/**
 * ContactsProducer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ContactsProducer Class Doc Comment
 *
 * @category Class
 * @description Information of the producer. The NAFTA Certificate of Origin must be completed, signed, and dated by the exporter.  When the Certificate is completed by the producer for use by the exporter, it must be completed, signed, and dated by the producer. The date must be the date the Certificate was completed and signed.  Applies to NAFTA CO.  Required for NAFTA CO forms.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContactsProducer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Contacts_Producer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'option' => 'string',
        'companyName' => 'string',
        'taxIdentificationNumber' => 'string',
        'address' => '\OpenAPIClientUPSShipping\Model\ProducerAddress',
        'attentionName' => 'string',
        'phone' => '\OpenAPIClientUPSShipping\Model\ProducerPhone',
        'eMailAddress' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'option' => null,
        'companyName' => null,
        'taxIdentificationNumber' => null,
        'address' => null,
        'attentionName' => null,
        'phone' => null,
        'eMailAddress' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'option' => false,
        'companyName' => false,
        'taxIdentificationNumber' => false,
        'address' => false,
        'attentionName' => false,
        'phone' => false,
        'eMailAddress' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'option' => 'Option',
        'companyName' => 'CompanyName',
        'taxIdentificationNumber' => 'TaxIdentificationNumber',
        'address' => 'Address',
        'attentionName' => 'AttentionName',
        'phone' => 'Phone',
        'eMailAddress' => 'EMailAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'option' => 'setOption',
        'companyName' => 'setCompanyName',
        'taxIdentificationNumber' => 'setTaxIdentificationNumber',
        'address' => 'setAddress',
        'attentionName' => 'setAttentionName',
        'phone' => 'setPhone',
        'eMailAddress' => 'setEMailAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'option' => 'getOption',
        'companyName' => 'getCompanyName',
        'taxIdentificationNumber' => 'getTaxIdentificationNumber',
        'address' => 'getAddress',
        'attentionName' => 'getAttentionName',
        'phone' => 'getPhone',
        'eMailAddress' => 'getEMailAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('option', $data ?? [], null);
        $this->setIfExists('companyName', $data ?? [], null);
        $this->setIfExists('taxIdentificationNumber', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('attentionName', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('eMailAddress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['option']) && (mb_strlen($this->container['option']) > 2)) {
            $invalidProperties[] = "invalid value for 'option', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['option']) && (mb_strlen($this->container['option']) < 2)) {
            $invalidProperties[] = "invalid value for 'option', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['companyName']) && (mb_strlen($this->container['companyName']) > 35)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['companyName']) && (mb_strlen($this->container['companyName']) < 1)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['taxIdentificationNumber']) && (mb_strlen($this->container['taxIdentificationNumber']) > 15)) {
            $invalidProperties[] = "invalid value for 'taxIdentificationNumber', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['taxIdentificationNumber']) && (mb_strlen($this->container['taxIdentificationNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'taxIdentificationNumber', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['attentionName']) && (mb_strlen($this->container['attentionName']) > 35)) {
            $invalidProperties[] = "invalid value for 'attentionName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['attentionName']) && (mb_strlen($this->container['attentionName']) < 1)) {
            $invalidProperties[] = "invalid value for 'attentionName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['eMailAddress']) && (mb_strlen($this->container['eMailAddress']) > 50)) {
            $invalidProperties[] = "invalid value for 'eMailAddress', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['eMailAddress']) && (mb_strlen($this->container['eMailAddress']) < 1)) {
            $invalidProperties[] = "invalid value for 'eMailAddress', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets option
     *
     * @return string|null
     */
    public function getOption()
    {
        return $this->container['option'];
    }

    /**
     * Sets option
     *
     * @param string|null $option The text associated with the code will be printed in the producer section instead of producer contact information.  Use attached List if more than one producer's good is included on the Certificate, attach a list of additional producers, including the legal name, address (including country or territory), and legal tax identification number, cross-referenced to the goods described in the Description of Goods field.  Applies to NAFTA CO.   Valid values:  01 - AVAILABLE TO CUSTOMS UPON REQUEST 02 - SAME AS EXPORTER 03 - ATTACHED LIST 04 - UNKNOWN
     *
     * @return self
     */
    public function setOption($option)
    {
        if (is_null($option)) {
            throw new \InvalidArgumentException('non-nullable option cannot be null');
        }
        if ((mb_strlen($option) > 2)) {
            throw new \InvalidArgumentException('invalid length for $option when calling ContactsProducer., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($option) < 2)) {
            throw new \InvalidArgumentException('invalid length for $option when calling ContactsProducer., must be bigger than or equal to 2.');
        }

        $this->container['option'] = $option;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string|null $companyName Company Name or the Individual name of the Producer.  Applies to NAFTA CO.  Only applicable when producer option is empty or not present. Conditionally required for: NAFTA CO, when Producer option is not specified.
     *
     * @return self
     */
    public function setCompanyName($companyName)
    {
        if (is_null($companyName)) {
            throw new \InvalidArgumentException('non-nullable companyName cannot be null');
        }
        if ((mb_strlen($companyName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling ContactsProducer., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($companyName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling ContactsProducer., must be bigger than or equal to 1.');
        }

        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets taxIdentificationNumber
     *
     * @return string|null
     */
    public function getTaxIdentificationNumber()
    {
        return $this->container['taxIdentificationNumber'];
    }

    /**
     * Sets taxIdentificationNumber
     *
     * @param string|null $taxIdentificationNumber Tax ID of the Producer.  Applies to NAFTA CO. Only applicable when producer option is empty or not present
     *
     * @return self
     */
    public function setTaxIdentificationNumber($taxIdentificationNumber)
    {
        if (is_null($taxIdentificationNumber)) {
            throw new \InvalidArgumentException('non-nullable taxIdentificationNumber cannot be null');
        }
        if ((mb_strlen($taxIdentificationNumber) > 15)) {
            throw new \InvalidArgumentException('invalid length for $taxIdentificationNumber when calling ContactsProducer., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($taxIdentificationNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $taxIdentificationNumber when calling ContactsProducer., must be bigger than or equal to 1.');
        }

        $this->container['taxIdentificationNumber'] = $taxIdentificationNumber;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPIClientUPSShipping\Model\ProducerAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPIClientUPSShipping\Model\ProducerAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets attentionName
     *
     * @return string|null
     */
    public function getAttentionName()
    {
        return $this->container['attentionName'];
    }

    /**
     * Sets attentionName
     *
     * @param string|null $attentionName Contact name at the Producer location.  Applies to NAFTA CO.
     *
     * @return self
     */
    public function setAttentionName($attentionName)
    {
        if (is_null($attentionName)) {
            throw new \InvalidArgumentException('non-nullable attentionName cannot be null');
        }
        if ((mb_strlen($attentionName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $attentionName when calling ContactsProducer., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($attentionName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $attentionName when calling ContactsProducer., must be bigger than or equal to 1.');
        }

        $this->container['attentionName'] = $attentionName;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPIClientUPSShipping\Model\ProducerPhone|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPIClientUPSShipping\Model\ProducerPhone|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets eMailAddress
     *
     * @return string|null
     */
    public function getEMailAddress()
    {
        return $this->container['eMailAddress'];
    }

    /**
     * Sets eMailAddress
     *
     * @param string|null $eMailAddress Producer email address.  Applies to NAFTA CO.
     *
     * @return self
     */
    public function setEMailAddress($eMailAddress)
    {
        if (is_null($eMailAddress)) {
            throw new \InvalidArgumentException('non-nullable eMailAddress cannot be null');
        }
        if ((mb_strlen($eMailAddress) > 50)) {
            throw new \InvalidArgumentException('invalid length for $eMailAddress when calling ContactsProducer., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($eMailAddress) < 1)) {
            throw new \InvalidArgumentException('invalid length for $eMailAddress when calling ContactsProducer., must be bigger than or equal to 1.');
        }

        $this->container['eMailAddress'] = $eMailAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


