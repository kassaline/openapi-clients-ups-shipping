<?php
/**
 * TradeDirectAddress
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * TradeDirectAddress Class Doc Comment
 *
 * @category Class
 * @description Contains the address details including street address, city, state or province code, postal code, and country code.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TradeDirectAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TradeDirect_Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addressLine' => 'string',
        'city' => 'string',
        'stateProvinceCode' => 'string',
        'postalCode' => 'string',
        'countryCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'addressLine' => null,
        'city' => null,
        'stateProvinceCode' => null,
        'postalCode' => null,
        'countryCode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'addressLine' => false,
        'city' => false,
        'stateProvinceCode' => false,
        'postalCode' => false,
        'countryCode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addressLine' => 'AddressLine',
        'city' => 'City',
        'stateProvinceCode' => 'StateProvinceCode',
        'postalCode' => 'PostalCode',
        'countryCode' => 'CountryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addressLine' => 'setAddressLine',
        'city' => 'setCity',
        'stateProvinceCode' => 'setStateProvinceCode',
        'postalCode' => 'setPostalCode',
        'countryCode' => 'setCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addressLine' => 'getAddressLine',
        'city' => 'getCity',
        'stateProvinceCode' => 'getStateProvinceCode',
        'postalCode' => 'getPostalCode',
        'countryCode' => 'getCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('addressLine', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('stateProvinceCode', $data ?? [], null);
        $this->setIfExists('postalCode', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['addressLine'] === null) {
            $invalidProperties[] = "'addressLine' can't be null";
        }
        if (!preg_match("/^[A-Za-z0-9\\s.,#\/-]{1,35}$/", $this->container['addressLine'])) {
            $invalidProperties[] = "invalid value for 'addressLine', must be conform to the pattern /^[A-Za-z0-9\\s.,#\/-]{1,35}$/.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if (!preg_match("/^[a-zA-Z\\s.,]{1,35}$/", $this->container['city'])) {
            $invalidProperties[] = "invalid value for 'city', must be conform to the pattern /^[a-zA-Z\\s.,]{1,35}$/.";
        }

        if (!is_null($this->container['stateProvinceCode']) && !preg_match("/^[a-zA-Z]{2,5}$/", $this->container['stateProvinceCode'])) {
            $invalidProperties[] = "invalid value for 'stateProvinceCode', must be conform to the pattern /^[a-zA-Z]{2,5}$/.";
        }

        if (!is_null($this->container['postalCode']) && !preg_match("/^(?!.*\\s.*\\s)(?!.*-.*-)[A-Za-z0-9\\s-]{2,10}$/", $this->container['postalCode'])) {
            $invalidProperties[] = "invalid value for 'postalCode', must be conform to the pattern /^(?!.*\\s.*\\s)(?!.*-.*-)[A-Za-z0-9\\s-]{2,10}$/.";
        }

        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if (!preg_match("/^[A-Z]{2}$/", $this->container['countryCode'])) {
            $invalidProperties[] = "invalid value for 'countryCode', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addressLine
     *
     * @return string
     */
    public function getAddressLine()
    {
        return $this->container['addressLine'];
    }

    /**
     * Sets addressLine
     *
     * @param string $addressLine Primary address line includes street number and street name (when applicable).
     *
     * @return self
     */
    public function setAddressLine($addressLine)
    {
        if (is_null($addressLine)) {
            throw new \InvalidArgumentException('non-nullable addressLine cannot be null');
        }

        if ((!preg_match("/^[A-Za-z0-9\\s.,#\/-]{1,35}$/", ObjectSerializer::toString($addressLine)))) {
            throw new \InvalidArgumentException("invalid value for \$addressLine when calling TradeDirectAddress., must conform to the pattern /^[A-Za-z0-9\\s.,#\/-]{1,35}$/.");
        }

        $this->container['addressLine'] = $addressLine;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The name of the city for the address.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z\\s.,]{1,35}$/", ObjectSerializer::toString($city)))) {
            throw new \InvalidArgumentException("invalid value for \$city when calling TradeDirectAddress., must conform to the pattern /^[a-zA-Z\\s.,]{1,35}$/.");
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets stateProvinceCode
     *
     * @return string|null
     */
    public function getStateProvinceCode()
    {
        return $this->container['stateProvinceCode'];
    }

    /**
     * Sets stateProvinceCode
     *
     * @param string|null $stateProvinceCode The code for the state or province for the address.
     *
     * @return self
     */
    public function setStateProvinceCode($stateProvinceCode)
    {
        if (is_null($stateProvinceCode)) {
            throw new \InvalidArgumentException('non-nullable stateProvinceCode cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z]{2,5}$/", ObjectSerializer::toString($stateProvinceCode)))) {
            throw new \InvalidArgumentException("invalid value for \$stateProvinceCode when calling TradeDirectAddress., must conform to the pattern /^[a-zA-Z]{2,5}$/.");
        }

        $this->container['stateProvinceCode'] = $stateProvinceCode;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode The postal code for the address.
     *
     * @return self
     */
    public function setPostalCode($postalCode)
    {
        if (is_null($postalCode)) {
            throw new \InvalidArgumentException('non-nullable postalCode cannot be null');
        }

        if ((!preg_match("/^(?!.*\\s.*\\s)(?!.*-.*-)[A-Za-z0-9\\s-]{2,10}$/", ObjectSerializer::toString($postalCode)))) {
            throw new \InvalidArgumentException("invalid value for \$postalCode when calling TradeDirectAddress., must conform to the pattern /^(?!.*\\s.*\\s)(?!.*-.*-)[A-Za-z0-9\\s-]{2,10}$/.");
        }

        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode The code for the country for the address
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            throw new \InvalidArgumentException('non-nullable countryCode cannot be null');
        }

        if ((!preg_match("/^[A-Z]{2}$/", ObjectSerializer::toString($countryCode)))) {
            throw new \InvalidArgumentException("invalid value for \$countryCode when calling TradeDirectAddress., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['countryCode'] = $countryCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


