<?php
/**
 * ShipmentRequestShipment
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ShipmentRequestShipment Class Doc Comment
 *
 * @category Class
 * @description Shipment Container
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentRequestShipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentRequest_Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'returnService' => '\OpenAPIClientUPSShipping\Model\ShipmentReturnService',
        'documentsOnlyIndicator' => 'string',
        'shipper' => '\OpenAPIClientUPSShipping\Model\ShipmentShipper',
        'shipTo' => '\OpenAPIClientUPSShipping\Model\ShipmentShipTo',
        'alternateDeliveryAddress' => '\OpenAPIClientUPSShipping\Model\ShipmentAlternateDeliveryAddress',
        'shipFrom' => '\OpenAPIClientUPSShipping\Model\ShipmentShipFrom',
        'paymentInformation' => '\OpenAPIClientUPSShipping\Model\ShipmentPaymentInformation',
        'fRSPaymentInformation' => '\OpenAPIClientUPSShipping\Model\ShipmentFRSPaymentInformation',
        'globalTaxInformation' => '\OpenAPIClientUPSShipping\Model\ShipmentGlobalTaxInformation',
        'worldEase' => '\OpenAPIClientUPSShipping\Model\ShipmentWorldEase',
        'freightShipmentInformation' => '\OpenAPIClientUPSShipping\Model\ShipmentFreightShipmentInformation',
        'goodsNotInFreeCirculationIndicator' => 'string',
        'promotionalDiscountInformation' => '\OpenAPIClientUPSShipping\Model\ShipmentPromotionalDiscountInformation',
        'dGSignatoryInfo' => '\OpenAPIClientUPSShipping\Model\ShipmentDGSignatoryInfo',
        'shipmentRatingOptions' => '\OpenAPIClientUPSShipping\Model\ShipmentShipmentRatingOptions',
        'movementReferenceNumber' => 'string',
        'referenceNumber' => '\OpenAPIClientUPSShipping\Model\ShipmentReferenceNumber[]',
        'service' => '\OpenAPIClientUPSShipping\Model\ShipmentService',
        'invoiceLineTotal' => '\OpenAPIClientUPSShipping\Model\ShipmentInvoiceLineTotal',
        'shipmentRiskEnteringEU' => 'string',
        'numOfPiecesInShipment' => 'string',
        'uSPSEndorsement' => 'string',
        'mILabelCN22Indicator' => 'string',
        'subClassification' => 'string',
        'costCenter' => 'string',
        'costCenterBarcodeIndicator' => 'string',
        'packageID' => 'string',
        'packageIDBarcodeIndicator' => 'string',
        'irregularIndicator' => 'string',
        'shipmentIndicationType' => '\OpenAPIClientUPSShipping\Model\ShipmentShipmentIndicationType[]',
        'mIDualReturnShipmentKey' => 'string',
        'mIDualReturnShipmentIndicator' => 'string',
        'ratingMethodRequestedIndicator' => 'string',
        'taxInformationIndicator' => 'string',
        'shipmentServiceOptions' => '\OpenAPIClientUPSShipping\Model\ShipmentShipmentServiceOptions',
        'locale' => 'string',
        'shipmentValueThresholdCode' => 'string',
        'masterCartonID' => 'string',
        'masterCartonIndicator' => 'string',
        'shipmentDate' => 'string',
        'package' => '\OpenAPIClientUPSShipping\Model\ShipmentPackage[]',
        'quoteID' => 'string',
        'tradeDirect' => '\OpenAPIClientUPSShipping\Model\ShipmentTradeDirect'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'returnService' => null,
        'documentsOnlyIndicator' => null,
        'shipper' => null,
        'shipTo' => null,
        'alternateDeliveryAddress' => null,
        'shipFrom' => null,
        'paymentInformation' => null,
        'fRSPaymentInformation' => null,
        'globalTaxInformation' => null,
        'worldEase' => null,
        'freightShipmentInformation' => null,
        'goodsNotInFreeCirculationIndicator' => null,
        'promotionalDiscountInformation' => null,
        'dGSignatoryInfo' => null,
        'shipmentRatingOptions' => null,
        'movementReferenceNumber' => null,
        'referenceNumber' => null,
        'service' => null,
        'invoiceLineTotal' => null,
        'shipmentRiskEnteringEU' => null,
        'numOfPiecesInShipment' => null,
        'uSPSEndorsement' => null,
        'mILabelCN22Indicator' => null,
        'subClassification' => null,
        'costCenter' => null,
        'costCenterBarcodeIndicator' => null,
        'packageID' => null,
        'packageIDBarcodeIndicator' => null,
        'irregularIndicator' => null,
        'shipmentIndicationType' => null,
        'mIDualReturnShipmentKey' => null,
        'mIDualReturnShipmentIndicator' => null,
        'ratingMethodRequestedIndicator' => null,
        'taxInformationIndicator' => null,
        'shipmentServiceOptions' => null,
        'locale' => null,
        'shipmentValueThresholdCode' => null,
        'masterCartonID' => null,
        'masterCartonIndicator' => null,
        'shipmentDate' => null,
        'package' => null,
        'quoteID' => null,
        'tradeDirect' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'returnService' => false,
        'documentsOnlyIndicator' => false,
        'shipper' => false,
        'shipTo' => false,
        'alternateDeliveryAddress' => false,
        'shipFrom' => false,
        'paymentInformation' => false,
        'fRSPaymentInformation' => false,
        'globalTaxInformation' => false,
        'worldEase' => false,
        'freightShipmentInformation' => false,
        'goodsNotInFreeCirculationIndicator' => false,
        'promotionalDiscountInformation' => false,
        'dGSignatoryInfo' => false,
        'shipmentRatingOptions' => false,
        'movementReferenceNumber' => false,
        'referenceNumber' => false,
        'service' => false,
        'invoiceLineTotal' => false,
        'shipmentRiskEnteringEU' => false,
        'numOfPiecesInShipment' => false,
        'uSPSEndorsement' => false,
        'mILabelCN22Indicator' => false,
        'subClassification' => false,
        'costCenter' => false,
        'costCenterBarcodeIndicator' => false,
        'packageID' => false,
        'packageIDBarcodeIndicator' => false,
        'irregularIndicator' => false,
        'shipmentIndicationType' => false,
        'mIDualReturnShipmentKey' => false,
        'mIDualReturnShipmentIndicator' => false,
        'ratingMethodRequestedIndicator' => false,
        'taxInformationIndicator' => false,
        'shipmentServiceOptions' => false,
        'locale' => false,
        'shipmentValueThresholdCode' => false,
        'masterCartonID' => false,
        'masterCartonIndicator' => false,
        'shipmentDate' => false,
        'package' => false,
        'quoteID' => false,
        'tradeDirect' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'returnService' => 'ReturnService',
        'documentsOnlyIndicator' => 'DocumentsOnlyIndicator',
        'shipper' => 'Shipper',
        'shipTo' => 'ShipTo',
        'alternateDeliveryAddress' => 'AlternateDeliveryAddress',
        'shipFrom' => 'ShipFrom',
        'paymentInformation' => 'PaymentInformation',
        'fRSPaymentInformation' => 'FRSPaymentInformation',
        'globalTaxInformation' => 'GlobalTaxInformation',
        'worldEase' => 'WorldEase',
        'freightShipmentInformation' => 'FreightShipmentInformation',
        'goodsNotInFreeCirculationIndicator' => 'GoodsNotInFreeCirculationIndicator',
        'promotionalDiscountInformation' => 'PromotionalDiscountInformation',
        'dGSignatoryInfo' => 'DGSignatoryInfo',
        'shipmentRatingOptions' => 'ShipmentRatingOptions',
        'movementReferenceNumber' => 'MovementReferenceNumber',
        'referenceNumber' => 'ReferenceNumber',
        'service' => 'Service',
        'invoiceLineTotal' => 'InvoiceLineTotal',
        'shipmentRiskEnteringEU' => 'ShipmentRiskEnteringEU',
        'numOfPiecesInShipment' => 'NumOfPiecesInShipment',
        'uSPSEndorsement' => 'USPSEndorsement',
        'mILabelCN22Indicator' => 'MILabelCN22Indicator',
        'subClassification' => 'SubClassification',
        'costCenter' => 'CostCenter',
        'costCenterBarcodeIndicator' => 'CostCenterBarcodeIndicator',
        'packageID' => 'PackageID',
        'packageIDBarcodeIndicator' => 'PackageIDBarcodeIndicator',
        'irregularIndicator' => 'IrregularIndicator',
        'shipmentIndicationType' => 'ShipmentIndicationType',
        'mIDualReturnShipmentKey' => 'MIDualReturnShipmentKey',
        'mIDualReturnShipmentIndicator' => 'MIDualReturnShipmentIndicator',
        'ratingMethodRequestedIndicator' => 'RatingMethodRequestedIndicator',
        'taxInformationIndicator' => 'TaxInformationIndicator',
        'shipmentServiceOptions' => 'ShipmentServiceOptions',
        'locale' => 'Locale',
        'shipmentValueThresholdCode' => 'ShipmentValueThresholdCode',
        'masterCartonID' => 'MasterCartonID',
        'masterCartonIndicator' => 'MasterCartonIndicator',
        'shipmentDate' => 'ShipmentDate',
        'package' => 'Package',
        'quoteID' => 'QuoteID',
        'tradeDirect' => 'TradeDirect'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'returnService' => 'setReturnService',
        'documentsOnlyIndicator' => 'setDocumentsOnlyIndicator',
        'shipper' => 'setShipper',
        'shipTo' => 'setShipTo',
        'alternateDeliveryAddress' => 'setAlternateDeliveryAddress',
        'shipFrom' => 'setShipFrom',
        'paymentInformation' => 'setPaymentInformation',
        'fRSPaymentInformation' => 'setFRSPaymentInformation',
        'globalTaxInformation' => 'setGlobalTaxInformation',
        'worldEase' => 'setWorldEase',
        'freightShipmentInformation' => 'setFreightShipmentInformation',
        'goodsNotInFreeCirculationIndicator' => 'setGoodsNotInFreeCirculationIndicator',
        'promotionalDiscountInformation' => 'setPromotionalDiscountInformation',
        'dGSignatoryInfo' => 'setDGSignatoryInfo',
        'shipmentRatingOptions' => 'setShipmentRatingOptions',
        'movementReferenceNumber' => 'setMovementReferenceNumber',
        'referenceNumber' => 'setReferenceNumber',
        'service' => 'setService',
        'invoiceLineTotal' => 'setInvoiceLineTotal',
        'shipmentRiskEnteringEU' => 'setShipmentRiskEnteringEU',
        'numOfPiecesInShipment' => 'setNumOfPiecesInShipment',
        'uSPSEndorsement' => 'setUSPSEndorsement',
        'mILabelCN22Indicator' => 'setMILabelCN22Indicator',
        'subClassification' => 'setSubClassification',
        'costCenter' => 'setCostCenter',
        'costCenterBarcodeIndicator' => 'setCostCenterBarcodeIndicator',
        'packageID' => 'setPackageID',
        'packageIDBarcodeIndicator' => 'setPackageIDBarcodeIndicator',
        'irregularIndicator' => 'setIrregularIndicator',
        'shipmentIndicationType' => 'setShipmentIndicationType',
        'mIDualReturnShipmentKey' => 'setMIDualReturnShipmentKey',
        'mIDualReturnShipmentIndicator' => 'setMIDualReturnShipmentIndicator',
        'ratingMethodRequestedIndicator' => 'setRatingMethodRequestedIndicator',
        'taxInformationIndicator' => 'setTaxInformationIndicator',
        'shipmentServiceOptions' => 'setShipmentServiceOptions',
        'locale' => 'setLocale',
        'shipmentValueThresholdCode' => 'setShipmentValueThresholdCode',
        'masterCartonID' => 'setMasterCartonID',
        'masterCartonIndicator' => 'setMasterCartonIndicator',
        'shipmentDate' => 'setShipmentDate',
        'package' => 'setPackage',
        'quoteID' => 'setQuoteID',
        'tradeDirect' => 'setTradeDirect'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'returnService' => 'getReturnService',
        'documentsOnlyIndicator' => 'getDocumentsOnlyIndicator',
        'shipper' => 'getShipper',
        'shipTo' => 'getShipTo',
        'alternateDeliveryAddress' => 'getAlternateDeliveryAddress',
        'shipFrom' => 'getShipFrom',
        'paymentInformation' => 'getPaymentInformation',
        'fRSPaymentInformation' => 'getFRSPaymentInformation',
        'globalTaxInformation' => 'getGlobalTaxInformation',
        'worldEase' => 'getWorldEase',
        'freightShipmentInformation' => 'getFreightShipmentInformation',
        'goodsNotInFreeCirculationIndicator' => 'getGoodsNotInFreeCirculationIndicator',
        'promotionalDiscountInformation' => 'getPromotionalDiscountInformation',
        'dGSignatoryInfo' => 'getDGSignatoryInfo',
        'shipmentRatingOptions' => 'getShipmentRatingOptions',
        'movementReferenceNumber' => 'getMovementReferenceNumber',
        'referenceNumber' => 'getReferenceNumber',
        'service' => 'getService',
        'invoiceLineTotal' => 'getInvoiceLineTotal',
        'shipmentRiskEnteringEU' => 'getShipmentRiskEnteringEU',
        'numOfPiecesInShipment' => 'getNumOfPiecesInShipment',
        'uSPSEndorsement' => 'getUSPSEndorsement',
        'mILabelCN22Indicator' => 'getMILabelCN22Indicator',
        'subClassification' => 'getSubClassification',
        'costCenter' => 'getCostCenter',
        'costCenterBarcodeIndicator' => 'getCostCenterBarcodeIndicator',
        'packageID' => 'getPackageID',
        'packageIDBarcodeIndicator' => 'getPackageIDBarcodeIndicator',
        'irregularIndicator' => 'getIrregularIndicator',
        'shipmentIndicationType' => 'getShipmentIndicationType',
        'mIDualReturnShipmentKey' => 'getMIDualReturnShipmentKey',
        'mIDualReturnShipmentIndicator' => 'getMIDualReturnShipmentIndicator',
        'ratingMethodRequestedIndicator' => 'getRatingMethodRequestedIndicator',
        'taxInformationIndicator' => 'getTaxInformationIndicator',
        'shipmentServiceOptions' => 'getShipmentServiceOptions',
        'locale' => 'getLocale',
        'shipmentValueThresholdCode' => 'getShipmentValueThresholdCode',
        'masterCartonID' => 'getMasterCartonID',
        'masterCartonIndicator' => 'getMasterCartonIndicator',
        'shipmentDate' => 'getShipmentDate',
        'package' => 'getPackage',
        'quoteID' => 'getQuoteID',
        'tradeDirect' => 'getTradeDirect'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('returnService', $data ?? [], null);
        $this->setIfExists('documentsOnlyIndicator', $data ?? [], null);
        $this->setIfExists('shipper', $data ?? [], null);
        $this->setIfExists('shipTo', $data ?? [], null);
        $this->setIfExists('alternateDeliveryAddress', $data ?? [], null);
        $this->setIfExists('shipFrom', $data ?? [], null);
        $this->setIfExists('paymentInformation', $data ?? [], null);
        $this->setIfExists('fRSPaymentInformation', $data ?? [], null);
        $this->setIfExists('globalTaxInformation', $data ?? [], null);
        $this->setIfExists('worldEase', $data ?? [], null);
        $this->setIfExists('freightShipmentInformation', $data ?? [], null);
        $this->setIfExists('goodsNotInFreeCirculationIndicator', $data ?? [], null);
        $this->setIfExists('promotionalDiscountInformation', $data ?? [], null);
        $this->setIfExists('dGSignatoryInfo', $data ?? [], null);
        $this->setIfExists('shipmentRatingOptions', $data ?? [], null);
        $this->setIfExists('movementReferenceNumber', $data ?? [], null);
        $this->setIfExists('referenceNumber', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('invoiceLineTotal', $data ?? [], null);
        $this->setIfExists('shipmentRiskEnteringEU', $data ?? [], null);
        $this->setIfExists('numOfPiecesInShipment', $data ?? [], null);
        $this->setIfExists('uSPSEndorsement', $data ?? [], null);
        $this->setIfExists('mILabelCN22Indicator', $data ?? [], null);
        $this->setIfExists('subClassification', $data ?? [], null);
        $this->setIfExists('costCenter', $data ?? [], null);
        $this->setIfExists('costCenterBarcodeIndicator', $data ?? [], null);
        $this->setIfExists('packageID', $data ?? [], null);
        $this->setIfExists('packageIDBarcodeIndicator', $data ?? [], null);
        $this->setIfExists('irregularIndicator', $data ?? [], null);
        $this->setIfExists('shipmentIndicationType', $data ?? [], null);
        $this->setIfExists('mIDualReturnShipmentKey', $data ?? [], null);
        $this->setIfExists('mIDualReturnShipmentIndicator', $data ?? [], null);
        $this->setIfExists('ratingMethodRequestedIndicator', $data ?? [], null);
        $this->setIfExists('taxInformationIndicator', $data ?? [], null);
        $this->setIfExists('shipmentServiceOptions', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('shipmentValueThresholdCode', $data ?? [], null);
        $this->setIfExists('masterCartonID', $data ?? [], null);
        $this->setIfExists('masterCartonIndicator', $data ?? [], null);
        $this->setIfExists('shipmentDate', $data ?? [], null);
        $this->setIfExists('package', $data ?? [], null);
        $this->setIfExists('quoteID', $data ?? [], null);
        $this->setIfExists('tradeDirect', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 50)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['shipper'] === null) {
            $invalidProperties[] = "'shipper' can't be null";
        }
        if ($this->container['shipTo'] === null) {
            $invalidProperties[] = "'shipTo' can't be null";
        }
        if (!is_null($this->container['movementReferenceNumber']) && (mb_strlen($this->container['movementReferenceNumber']) > 18)) {
            $invalidProperties[] = "invalid value for 'movementReferenceNumber', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['movementReferenceNumber']) && (mb_strlen($this->container['movementReferenceNumber']) < 18)) {
            $invalidProperties[] = "invalid value for 'movementReferenceNumber', the character length must be bigger than or equal to 18.";
        }

        if ($this->container['service'] === null) {
            $invalidProperties[] = "'service' can't be null";
        }
        if (!is_null($this->container['shipmentRiskEnteringEU']) && (mb_strlen($this->container['shipmentRiskEnteringEU']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipmentRiskEnteringEU', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipmentRiskEnteringEU']) && (mb_strlen($this->container['shipmentRiskEnteringEU']) < 2)) {
            $invalidProperties[] = "invalid value for 'shipmentRiskEnteringEU', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['numOfPiecesInShipment']) && (mb_strlen($this->container['numOfPiecesInShipment']) > 5)) {
            $invalidProperties[] = "invalid value for 'numOfPiecesInShipment', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['numOfPiecesInShipment']) && (mb_strlen($this->container['numOfPiecesInShipment']) < 1)) {
            $invalidProperties[] = "invalid value for 'numOfPiecesInShipment', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['uSPSEndorsement']) && (mb_strlen($this->container['uSPSEndorsement']) > 1)) {
            $invalidProperties[] = "invalid value for 'uSPSEndorsement', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['uSPSEndorsement']) && (mb_strlen($this->container['uSPSEndorsement']) < 1)) {
            $invalidProperties[] = "invalid value for 'uSPSEndorsement', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['subClassification']) && (mb_strlen($this->container['subClassification']) > 2)) {
            $invalidProperties[] = "invalid value for 'subClassification', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['subClassification']) && (mb_strlen($this->container['subClassification']) < 2)) {
            $invalidProperties[] = "invalid value for 'subClassification', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['costCenter']) && (mb_strlen($this->container['costCenter']) > 30)) {
            $invalidProperties[] = "invalid value for 'costCenter', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['costCenter']) && (mb_strlen($this->container['costCenter']) < 1)) {
            $invalidProperties[] = "invalid value for 'costCenter', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packageID']) && (mb_strlen($this->container['packageID']) > 30)) {
            $invalidProperties[] = "invalid value for 'packageID', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['packageID']) && (mb_strlen($this->container['packageID']) < 1)) {
            $invalidProperties[] = "invalid value for 'packageID', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['irregularIndicator']) && (mb_strlen($this->container['irregularIndicator']) > 1)) {
            $invalidProperties[] = "invalid value for 'irregularIndicator', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['irregularIndicator']) && (mb_strlen($this->container['irregularIndicator']) < 1)) {
            $invalidProperties[] = "invalid value for 'irregularIndicator', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mIDualReturnShipmentKey']) && (mb_strlen($this->container['mIDualReturnShipmentKey']) > 50)) {
            $invalidProperties[] = "invalid value for 'mIDualReturnShipmentKey', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mIDualReturnShipmentKey']) && (mb_strlen($this->container['mIDualReturnShipmentKey']) < 4)) {
            $invalidProperties[] = "invalid value for 'mIDualReturnShipmentKey', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) > 5)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) < 5)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['shipmentValueThresholdCode']) && (mb_strlen($this->container['shipmentValueThresholdCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipmentValueThresholdCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipmentValueThresholdCode']) && (mb_strlen($this->container['shipmentValueThresholdCode']) < 2)) {
            $invalidProperties[] = "invalid value for 'shipmentValueThresholdCode', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['masterCartonID']) && (mb_strlen($this->container['masterCartonID']) > 24)) {
            $invalidProperties[] = "invalid value for 'masterCartonID', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['masterCartonID']) && (mb_strlen($this->container['masterCartonID']) < 1)) {
            $invalidProperties[] = "invalid value for 'masterCartonID', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shipmentDate']) && (mb_strlen($this->container['shipmentDate']) > 8)) {
            $invalidProperties[] = "invalid value for 'shipmentDate', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['shipmentDate']) && (mb_strlen($this->container['shipmentDate']) < 8)) {
            $invalidProperties[] = "invalid value for 'shipmentDate', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['package'] === null) {
            $invalidProperties[] = "'package' can't be null";
        }
        if (!is_null($this->container['quoteID']) && (mb_strlen($this->container['quoteID']) > 35)) {
            $invalidProperties[] = "invalid value for 'quoteID', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['quoteID']) && (mb_strlen($this->container['quoteID']) < 35)) {
            $invalidProperties[] = "invalid value for 'quoteID', the character length must be bigger than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The Description of Goods for the shipment. Applies to international and domestic shipments.   Provide a detailed description of items being shipped for documents and non-documents.   Examples: \"annual reports\" and \"9 mm steel screws\".  Required if all of the listed conditions are true:  ShipFrom and ShipTo countries or territories are not the same; The packaging type is not UPS Letter; The ShipFrom and or ShipTo countries or territories are not in the European Union or the ShipFrom and ShipTo countries or territories are both in the European Union and the shipments service type is not UPS Standard.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ShipmentRequestShipment., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets returnService
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentReturnService|null
     */
    public function getReturnService()
    {
        return $this->container['returnService'];
    }

    /**
     * Sets returnService
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentReturnService|null $returnService returnService
     *
     * @return self
     */
    public function setReturnService($returnService)
    {
        if (is_null($returnService)) {
            throw new \InvalidArgumentException('non-nullable returnService cannot be null');
        }
        $this->container['returnService'] = $returnService;

        return $this;
    }

    /**
     * Gets documentsOnlyIndicator
     *
     * @return string|null
     */
    public function getDocumentsOnlyIndicator()
    {
        return $this->container['documentsOnlyIndicator'];
    }

    /**
     * Sets documentsOnlyIndicator
     *
     * @param string|null $documentsOnlyIndicator Indicates a shipment contains written, typed, or printed communication of no commercial value.   If DocumentsOnly is not specified then it implies that the shipment contains non documents or documents of commercial value.   Default is a shipment contains non- documents or documents of commercial value.  This is an empty tag, any value inside is ignored.   Valid only for shipments with different origin and destination countries or territories. The origin country or territory is not US, and the destination country or territory is not CA, PR or MX.
     *
     * @return self
     */
    public function setDocumentsOnlyIndicator($documentsOnlyIndicator)
    {
        if (is_null($documentsOnlyIndicator)) {
            throw new \InvalidArgumentException('non-nullable documentsOnlyIndicator cannot be null');
        }


        $this->container['documentsOnlyIndicator'] = $documentsOnlyIndicator;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentShipper
     */
    public function getShipper()
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentShipper $shipper shipper
     *
     * @return self
     */
    public function setShipper($shipper)
    {
        if (is_null($shipper)) {
            throw new \InvalidArgumentException('non-nullable shipper cannot be null');
        }
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets shipTo
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentShipTo
     */
    public function getShipTo()
    {
        return $this->container['shipTo'];
    }

    /**
     * Sets shipTo
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentShipTo $shipTo shipTo
     *
     * @return self
     */
    public function setShipTo($shipTo)
    {
        if (is_null($shipTo)) {
            throw new \InvalidArgumentException('non-nullable shipTo cannot be null');
        }
        $this->container['shipTo'] = $shipTo;

        return $this;
    }

    /**
     * Gets alternateDeliveryAddress
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentAlternateDeliveryAddress|null
     */
    public function getAlternateDeliveryAddress()
    {
        return $this->container['alternateDeliveryAddress'];
    }

    /**
     * Sets alternateDeliveryAddress
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentAlternateDeliveryAddress|null $alternateDeliveryAddress alternateDeliveryAddress
     *
     * @return self
     */
    public function setAlternateDeliveryAddress($alternateDeliveryAddress)
    {
        if (is_null($alternateDeliveryAddress)) {
            throw new \InvalidArgumentException('non-nullable alternateDeliveryAddress cannot be null');
        }
        $this->container['alternateDeliveryAddress'] = $alternateDeliveryAddress;

        return $this;
    }

    /**
     * Gets shipFrom
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentShipFrom|null
     */
    public function getShipFrom()
    {
        return $this->container['shipFrom'];
    }

    /**
     * Sets shipFrom
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentShipFrom|null $shipFrom shipFrom
     *
     * @return self
     */
    public function setShipFrom($shipFrom)
    {
        if (is_null($shipFrom)) {
            throw new \InvalidArgumentException('non-nullable shipFrom cannot be null');
        }
        $this->container['shipFrom'] = $shipFrom;

        return $this;
    }

    /**
     * Gets paymentInformation
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentPaymentInformation|null
     */
    public function getPaymentInformation()
    {
        return $this->container['paymentInformation'];
    }

    /**
     * Sets paymentInformation
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentPaymentInformation|null $paymentInformation paymentInformation
     *
     * @return self
     */
    public function setPaymentInformation($paymentInformation)
    {
        if (is_null($paymentInformation)) {
            throw new \InvalidArgumentException('non-nullable paymentInformation cannot be null');
        }
        $this->container['paymentInformation'] = $paymentInformation;

        return $this;
    }

    /**
     * Gets fRSPaymentInformation
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentFRSPaymentInformation|null
     */
    public function getFRSPaymentInformation()
    {
        return $this->container['fRSPaymentInformation'];
    }

    /**
     * Sets fRSPaymentInformation
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentFRSPaymentInformation|null $fRSPaymentInformation fRSPaymentInformation
     *
     * @return self
     */
    public function setFRSPaymentInformation($fRSPaymentInformation)
    {
        if (is_null($fRSPaymentInformation)) {
            throw new \InvalidArgumentException('non-nullable fRSPaymentInformation cannot be null');
        }
        $this->container['fRSPaymentInformation'] = $fRSPaymentInformation;

        return $this;
    }

    /**
     * Gets globalTaxInformation
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentGlobalTaxInformation|null
     */
    public function getGlobalTaxInformation()
    {
        return $this->container['globalTaxInformation'];
    }

    /**
     * Sets globalTaxInformation
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentGlobalTaxInformation|null $globalTaxInformation globalTaxInformation
     *
     * @return self
     */
    public function setGlobalTaxInformation($globalTaxInformation)
    {
        if (is_null($globalTaxInformation)) {
            throw new \InvalidArgumentException('non-nullable globalTaxInformation cannot be null');
        }
        $this->container['globalTaxInformation'] = $globalTaxInformation;

        return $this;
    }

    /**
     * Gets worldEase
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentWorldEase|null
     */
    public function getWorldEase()
    {
        return $this->container['worldEase'];
    }

    /**
     * Sets worldEase
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentWorldEase|null $worldEase worldEase
     *
     * @return self
     */
    public function setWorldEase($worldEase)
    {
        if (is_null($worldEase)) {
            throw new \InvalidArgumentException('non-nullable worldEase cannot be null');
        }
        $this->container['worldEase'] = $worldEase;

        return $this;
    }

    /**
     * Gets freightShipmentInformation
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentFreightShipmentInformation|null
     */
    public function getFreightShipmentInformation()
    {
        return $this->container['freightShipmentInformation'];
    }

    /**
     * Sets freightShipmentInformation
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentFreightShipmentInformation|null $freightShipmentInformation freightShipmentInformation
     *
     * @return self
     */
    public function setFreightShipmentInformation($freightShipmentInformation)
    {
        if (is_null($freightShipmentInformation)) {
            throw new \InvalidArgumentException('non-nullable freightShipmentInformation cannot be null');
        }
        $this->container['freightShipmentInformation'] = $freightShipmentInformation;

        return $this;
    }

    /**
     * Gets goodsNotInFreeCirculationIndicator
     *
     * @return string|null
     */
    public function getGoodsNotInFreeCirculationIndicator()
    {
        return $this->container['goodsNotInFreeCirculationIndicator'];
    }

    /**
     * Sets goodsNotInFreeCirculationIndicator
     *
     * @param string|null $goodsNotInFreeCirculationIndicator Goods Not In Free Circulation indicator.  This is an empty tag, any value inside is ignored. This indicator is invalid for a package type of UPS Letter and DocumentsOnly.
     *
     * @return self
     */
    public function setGoodsNotInFreeCirculationIndicator($goodsNotInFreeCirculationIndicator)
    {
        if (is_null($goodsNotInFreeCirculationIndicator)) {
            throw new \InvalidArgumentException('non-nullable goodsNotInFreeCirculationIndicator cannot be null');
        }


        $this->container['goodsNotInFreeCirculationIndicator'] = $goodsNotInFreeCirculationIndicator;

        return $this;
    }

    /**
     * Gets promotionalDiscountInformation
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentPromotionalDiscountInformation|null
     */
    public function getPromotionalDiscountInformation()
    {
        return $this->container['promotionalDiscountInformation'];
    }

    /**
     * Sets promotionalDiscountInformation
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentPromotionalDiscountInformation|null $promotionalDiscountInformation promotionalDiscountInformation
     *
     * @return self
     */
    public function setPromotionalDiscountInformation($promotionalDiscountInformation)
    {
        if (is_null($promotionalDiscountInformation)) {
            throw new \InvalidArgumentException('non-nullable promotionalDiscountInformation cannot be null');
        }
        $this->container['promotionalDiscountInformation'] = $promotionalDiscountInformation;

        return $this;
    }

    /**
     * Gets dGSignatoryInfo
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentDGSignatoryInfo|null
     */
    public function getDGSignatoryInfo()
    {
        return $this->container['dGSignatoryInfo'];
    }

    /**
     * Sets dGSignatoryInfo
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentDGSignatoryInfo|null $dGSignatoryInfo dGSignatoryInfo
     *
     * @return self
     */
    public function setDGSignatoryInfo($dGSignatoryInfo)
    {
        if (is_null($dGSignatoryInfo)) {
            throw new \InvalidArgumentException('non-nullable dGSignatoryInfo cannot be null');
        }
        $this->container['dGSignatoryInfo'] = $dGSignatoryInfo;

        return $this;
    }

    /**
     * Gets shipmentRatingOptions
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentShipmentRatingOptions|null
     */
    public function getShipmentRatingOptions()
    {
        return $this->container['shipmentRatingOptions'];
    }

    /**
     * Sets shipmentRatingOptions
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentShipmentRatingOptions|null $shipmentRatingOptions shipmentRatingOptions
     *
     * @return self
     */
    public function setShipmentRatingOptions($shipmentRatingOptions)
    {
        if (is_null($shipmentRatingOptions)) {
            throw new \InvalidArgumentException('non-nullable shipmentRatingOptions cannot be null');
        }
        $this->container['shipmentRatingOptions'] = $shipmentRatingOptions;

        return $this;
    }

    /**
     * Gets movementReferenceNumber
     *
     * @return string|null
     */
    public function getMovementReferenceNumber()
    {
        return $this->container['movementReferenceNumber'];
    }

    /**
     * Sets movementReferenceNumber
     *
     * @param string|null $movementReferenceNumber Movement Reference Number (MRN) information.  Must contain alphanumeric characters only. Must be a length of 18 characters. The 3rd and 4th Characters must be the Shipper country or territory ISO Code.
     *
     * @return self
     */
    public function setMovementReferenceNumber($movementReferenceNumber)
    {
        if (is_null($movementReferenceNumber)) {
            throw new \InvalidArgumentException('non-nullable movementReferenceNumber cannot be null');
        }
        if ((mb_strlen($movementReferenceNumber) > 18)) {
            throw new \InvalidArgumentException('invalid length for $movementReferenceNumber when calling ShipmentRequestShipment., must be smaller than or equal to 18.');
        }
        if ((mb_strlen($movementReferenceNumber) < 18)) {
            throw new \InvalidArgumentException('invalid length for $movementReferenceNumber when calling ShipmentRequestShipment., must be bigger than or equal to 18.');
        }

        $this->container['movementReferenceNumber'] = $movementReferenceNumber;

        return $this;
    }

    /**
     * Gets referenceNumber
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentReferenceNumber[]|null
     */
    public function getReferenceNumber()
    {
        return $this->container['referenceNumber'];
    }

    /**
     * Sets referenceNumber
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentReferenceNumber[]|null $referenceNumber referenceNumber
     *
     * @return self
     */
    public function setReferenceNumber($referenceNumber)
    {
        if (is_null($referenceNumber)) {
            throw new \InvalidArgumentException('non-nullable referenceNumber cannot be null');
        }
        $this->container['referenceNumber'] = $referenceNumber;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentService
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentService $service service
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets invoiceLineTotal
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentInvoiceLineTotal|null
     */
    public function getInvoiceLineTotal()
    {
        return $this->container['invoiceLineTotal'];
    }

    /**
     * Sets invoiceLineTotal
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentInvoiceLineTotal|null $invoiceLineTotal invoiceLineTotal
     *
     * @return self
     */
    public function setInvoiceLineTotal($invoiceLineTotal)
    {
        if (is_null($invoiceLineTotal)) {
            throw new \InvalidArgumentException('non-nullable invoiceLineTotal cannot be null');
        }
        $this->container['invoiceLineTotal'] = $invoiceLineTotal;

        return $this;
    }

    /**
     * Gets shipmentRiskEnteringEU
     *
     * @return string|null
     */
    public function getShipmentRiskEnteringEU()
    {
        return $this->container['shipmentRiskEnteringEU'];
    }

    /**
     * Sets shipmentRiskEnteringEU
     *
     * @param string|null $shipmentRiskEnteringEU Code that identifies the risk of the Shipment entering the European Union (EU).   Values: 01 = AT RISK of Entering the EU   02 = NOT AT RISK of Entering the EU   03 = RISK UNKNOWN of Entering the EU
     *
     * @return self
     */
    public function setShipmentRiskEnteringEU($shipmentRiskEnteringEU)
    {
        if (is_null($shipmentRiskEnteringEU)) {
            throw new \InvalidArgumentException('non-nullable shipmentRiskEnteringEU cannot be null');
        }
        if ((mb_strlen($shipmentRiskEnteringEU) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipmentRiskEnteringEU when calling ShipmentRequestShipment., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($shipmentRiskEnteringEU) < 2)) {
            throw new \InvalidArgumentException('invalid length for $shipmentRiskEnteringEU when calling ShipmentRequestShipment., must be bigger than or equal to 2.');
        }

        $this->container['shipmentRiskEnteringEU'] = $shipmentRiskEnteringEU;

        return $this;
    }

    /**
     * Gets numOfPiecesInShipment
     *
     * @return string|null
     */
    public function getNumOfPiecesInShipment()
    {
        return $this->container['numOfPiecesInShipment'];
    }

    /**
     * Sets numOfPiecesInShipment
     *
     * @param string|null $numOfPiecesInShipment Total number of pieces in all pallets in a UPS Worldwide Express Freight Shipment.  It is required for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment. Valid values are 1 to 99999.
     *
     * @return self
     */
    public function setNumOfPiecesInShipment($numOfPiecesInShipment)
    {
        if (is_null($numOfPiecesInShipment)) {
            throw new \InvalidArgumentException('non-nullable numOfPiecesInShipment cannot be null');
        }
        if ((mb_strlen($numOfPiecesInShipment) > 5)) {
            throw new \InvalidArgumentException('invalid length for $numOfPiecesInShipment when calling ShipmentRequestShipment., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($numOfPiecesInShipment) < 1)) {
            throw new \InvalidArgumentException('invalid length for $numOfPiecesInShipment when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['numOfPiecesInShipment'] = $numOfPiecesInShipment;

        return $this;
    }

    /**
     * Gets uSPSEndorsement
     *
     * @return string|null
     */
    public function getUSPSEndorsement()
    {
        return $this->container['uSPSEndorsement'];
    }

    /**
     * Sets uSPSEndorsement
     *
     * @param string|null $uSPSEndorsement USPS Endorsement. Valid values:  1 = Return Service Requested  2 = Forwarding Service Requested  3 = Address Service Requested  4 = Change Service Requested and  5 = No Service Selected.  Note: For International Mail Innovations shipments use No Service Selected. International Mail Innovations shipments are applicable for Priority Mail Innovations and Mail Innovations Economy Mail Innovations services only.  Required for Mail Innovations forward shipments.
     *
     * @return self
     */
    public function setUSPSEndorsement($uSPSEndorsement)
    {
        if (is_null($uSPSEndorsement)) {
            throw new \InvalidArgumentException('non-nullable uSPSEndorsement cannot be null');
        }
        if ((mb_strlen($uSPSEndorsement) > 1)) {
            throw new \InvalidArgumentException('invalid length for $uSPSEndorsement when calling ShipmentRequestShipment., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($uSPSEndorsement) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uSPSEndorsement when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['uSPSEndorsement'] = $uSPSEndorsement;

        return $this;
    }

    /**
     * Gets mILabelCN22Indicator
     *
     * @return string|null
     */
    public function getMILabelCN22Indicator()
    {
        return $this->container['mILabelCN22Indicator'];
    }

    /**
     * Sets mILabelCN22Indicator
     *
     * @param string|null $mILabelCN22Indicator Indicates single label with both MI label and CN22 form.  International CN22 form is required.
     *
     * @return self
     */
    public function setMILabelCN22Indicator($mILabelCN22Indicator)
    {
        if (is_null($mILabelCN22Indicator)) {
            throw new \InvalidArgumentException('non-nullable mILabelCN22Indicator cannot be null');
        }


        $this->container['mILabelCN22Indicator'] = $mILabelCN22Indicator;

        return $this;
    }

    /**
     * Gets subClassification
     *
     * @return string|null
     */
    public function getSubClassification()
    {
        return $this->container['subClassification'];
    }

    /**
     * Sets subClassification
     *
     * @param string|null $subClassification A component encoded on the barcode of the Mail Innovations label.   Valid values:  IR = Irregular MA = Machineable SubClass is only required if the customer's contract have them subclass the package not UPS.
     *
     * @return self
     */
    public function setSubClassification($subClassification)
    {
        if (is_null($subClassification)) {
            throw new \InvalidArgumentException('non-nullable subClassification cannot be null');
        }
        if ((mb_strlen($subClassification) > 2)) {
            throw new \InvalidArgumentException('invalid length for $subClassification when calling ShipmentRequestShipment., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($subClassification) < 2)) {
            throw new \InvalidArgumentException('invalid length for $subClassification when calling ShipmentRequestShipment., must be bigger than or equal to 2.');
        }

        $this->container['subClassification'] = $subClassification;

        return $this;
    }

    /**
     * Gets costCenter
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['costCenter'];
    }

    /**
     * Sets costCenter
     *
     * @param string|null $costCenter Customer assigned identifier for report and billing summarization displays to the right of the Cost Center title.  Required for Mail Innovations Return shipments. It is shown on the bottom of the shipping label as reference 2.  Cost Center length is alphanumeric with a max length of 30 for Mail Innovations forward shipments.  Cost Center length is numeric with a max length of 4 for Mail Innovations Return shipments.
     *
     * @return self
     */
    public function setCostCenter($costCenter)
    {
        if (is_null($costCenter)) {
            throw new \InvalidArgumentException('non-nullable costCenter cannot be null');
        }
        if ((mb_strlen($costCenter) > 30)) {
            throw new \InvalidArgumentException('invalid length for $costCenter when calling ShipmentRequestShipment., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($costCenter) < 1)) {
            throw new \InvalidArgumentException('invalid length for $costCenter when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['costCenter'] = $costCenter;

        return $this;
    }

    /**
     * Gets costCenterBarcodeIndicator
     *
     * @return string|null
     */
    public function getCostCenterBarcodeIndicator()
    {
        return $this->container['costCenterBarcodeIndicator'];
    }

    /**
     * Sets costCenterBarcodeIndicator
     *
     * @param string|null $costCenterBarcodeIndicator Presence/Absence indicator. Presence of this indicator means that the customer is requesting for the CostCenter field to be barcoded at the bottom of the label.
     *
     * @return self
     */
    public function setCostCenterBarcodeIndicator($costCenterBarcodeIndicator)
    {
        if (is_null($costCenterBarcodeIndicator)) {
            throw new \InvalidArgumentException('non-nullable costCenterBarcodeIndicator cannot be null');
        }


        $this->container['costCenterBarcodeIndicator'] = $costCenterBarcodeIndicator;

        return $this;
    }

    /**
     * Gets packageID
     *
     * @return string|null
     */
    public function getPackageID()
    {
        return $this->container['packageID'];
    }

    /**
     * Sets packageID
     *
     * @param string|null $packageID Customer-assigned unique piece identifier that returns visibility events.  Required only for Mail Innovations forward shipments. Alpha numeric values only. It is shown on the bottom of the shipping label as reference 1.
     *
     * @return self
     */
    public function setPackageID($packageID)
    {
        if (is_null($packageID)) {
            throw new \InvalidArgumentException('non-nullable packageID cannot be null');
        }
        if ((mb_strlen($packageID) > 30)) {
            throw new \InvalidArgumentException('invalid length for $packageID when calling ShipmentRequestShipment., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($packageID) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packageID when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['packageID'] = $packageID;

        return $this;
    }

    /**
     * Gets packageIDBarcodeIndicator
     *
     * @return string|null
     */
    public function getPackageIDBarcodeIndicator()
    {
        return $this->container['packageIDBarcodeIndicator'];
    }

    /**
     * Sets packageIDBarcodeIndicator
     *
     * @param string|null $packageIDBarcodeIndicator Presence/Absence indicator. Presence of this indicator means that the customer is requesting for the PackageID field to be barcoded at the bottom of the label.
     *
     * @return self
     */
    public function setPackageIDBarcodeIndicator($packageIDBarcodeIndicator)
    {
        if (is_null($packageIDBarcodeIndicator)) {
            throw new \InvalidArgumentException('non-nullable packageIDBarcodeIndicator cannot be null');
        }


        $this->container['packageIDBarcodeIndicator'] = $packageIDBarcodeIndicator;

        return $this;
    }

    /**
     * Gets irregularIndicator
     *
     * @return string|null
     */
    public function getIrregularIndicator()
    {
        return $this->container['irregularIndicator'];
    }

    /**
     * Sets irregularIndicator
     *
     * @param string|null $irregularIndicator Mail classification defined by the USPS.   Valid values:  1 = Balloon 2 = Oversize 3 = Not Applicable
     *
     * @return self
     */
    public function setIrregularIndicator($irregularIndicator)
    {
        if (is_null($irregularIndicator)) {
            throw new \InvalidArgumentException('non-nullable irregularIndicator cannot be null');
        }
        if ((mb_strlen($irregularIndicator) > 1)) {
            throw new \InvalidArgumentException('invalid length for $irregularIndicator when calling ShipmentRequestShipment., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($irregularIndicator) < 1)) {
            throw new \InvalidArgumentException('invalid length for $irregularIndicator when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['irregularIndicator'] = $irregularIndicator;

        return $this;
    }

    /**
     * Gets shipmentIndicationType
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentShipmentIndicationType[]|null
     */
    public function getShipmentIndicationType()
    {
        return $this->container['shipmentIndicationType'];
    }

    /**
     * Sets shipmentIndicationType
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentShipmentIndicationType[]|null $shipmentIndicationType shipmentIndicationType
     *
     * @return self
     */
    public function setShipmentIndicationType($shipmentIndicationType)
    {
        if (is_null($shipmentIndicationType)) {
            throw new \InvalidArgumentException('non-nullable shipmentIndicationType cannot be null');
        }
        $this->container['shipmentIndicationType'] = $shipmentIndicationType;

        return $this;
    }

    /**
     * Gets mIDualReturnShipmentKey
     *
     * @return string|null
     */
    public function getMIDualReturnShipmentKey()
    {
        return $this->container['mIDualReturnShipmentKey'];
    }

    /**
     * Sets mIDualReturnShipmentKey
     *
     * @param string|null $mIDualReturnShipmentKey MIDualReturnShipmentKey is unique key required to process Mail Innovations Dual Return Shipment.   The unique identifier (key) would be returned in response of first phase of Mail Innovations Dual Return Shipments.   This unique identifier (key) would be part of request for second phase of Mail Innovations Dual Return Shipments.  Format:  For Package return shipments, the package tracking number is concatenated with the system time (YYYY-MM-DDHH.MM.SS.NNN), followed by service code.   For MI Return shipments, the Mail Manifest ID (MMI) is concatenated with the system time.  The unique identifier (key) is required to link the package and the Mail Innovations portion of Dual Return shipment.   If unique identifier (key) is empty in the request for UPS Mail Innovations Return Service, the request will be treated as the first phase of the Mail Innovations Dual Returns Request.   If the MIDualReturnShipmentIndicator is present with empty or null MIDualReturnShipmentKey in UPS Package Return Shipment, the request will be treated as the first phase of Dual MI Return Label Shipment.   This field would be ignored if MIDualReturnShipmentIndicator is not present in UPS Package Return Shipment request.
     *
     * @return self
     */
    public function setMIDualReturnShipmentKey($mIDualReturnShipmentKey)
    {
        if (is_null($mIDualReturnShipmentKey)) {
            throw new \InvalidArgumentException('non-nullable mIDualReturnShipmentKey cannot be null');
        }
        if ((mb_strlen($mIDualReturnShipmentKey) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mIDualReturnShipmentKey when calling ShipmentRequestShipment., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($mIDualReturnShipmentKey) < 4)) {
            throw new \InvalidArgumentException('invalid length for $mIDualReturnShipmentKey when calling ShipmentRequestShipment., must be bigger than or equal to 4.');
        }

        $this->container['mIDualReturnShipmentKey'] = $mIDualReturnShipmentKey;

        return $this;
    }

    /**
     * Gets mIDualReturnShipmentIndicator
     *
     * @return string|null
     */
    public function getMIDualReturnShipmentIndicator()
    {
        return $this->container['mIDualReturnShipmentIndicator'];
    }

    /**
     * Sets mIDualReturnShipmentIndicator
     *
     * @param string|null $mIDualReturnShipmentIndicator MIDualReturnShipmentIndicator is an indicator to identify a Package Shipment is part of UPS Mail Innovations Dual Label Shipment.   Its presence means Package Shipment is part of UPS Mail Innovations Dual Label shipment.  If the indicator is present in Package Shipment request, shipment would be considered as part of a Dual Mail Innovations Returns.   This indicator is not valid with UPS Mail Innovations Returns Service code.
     *
     * @return self
     */
    public function setMIDualReturnShipmentIndicator($mIDualReturnShipmentIndicator)
    {
        if (is_null($mIDualReturnShipmentIndicator)) {
            throw new \InvalidArgumentException('non-nullable mIDualReturnShipmentIndicator cannot be null');
        }


        $this->container['mIDualReturnShipmentIndicator'] = $mIDualReturnShipmentIndicator;

        return $this;
    }

    /**
     * Gets ratingMethodRequestedIndicator
     *
     * @return string|null
     */
    public function getRatingMethodRequestedIndicator()
    {
        return $this->container['ratingMethodRequestedIndicator'];
    }

    /**
     * Sets ratingMethodRequestedIndicator
     *
     * @param string|null $ratingMethodRequestedIndicator Presence/Absence Indicator. Any value inside is ignored. RatingMethodRequestedIndicator is an indicator. If present, Billable Weight Calculation method information and Rating Method information would be returned in response.
     *
     * @return self
     */
    public function setRatingMethodRequestedIndicator($ratingMethodRequestedIndicator)
    {
        if (is_null($ratingMethodRequestedIndicator)) {
            throw new \InvalidArgumentException('non-nullable ratingMethodRequestedIndicator cannot be null');
        }


        $this->container['ratingMethodRequestedIndicator'] = $ratingMethodRequestedIndicator;

        return $this;
    }

    /**
     * Gets taxInformationIndicator
     *
     * @return string|null
     */
    public function getTaxInformationIndicator()
    {
        return $this->container['taxInformationIndicator'];
    }

    /**
     * Sets taxInformationIndicator
     *
     * @param string|null $taxInformationIndicator Presence/Absence Indicator. Any value inside is ignored. TaxInformationIndicator is an indicator. If present, any taxes that may be applicable to a shipment would be returned in response. If this indicator is requested with NegotiatedRatesIndicator, Tax related information, if applicable, would be returned only for Negotiated Rates and not for Published Rates. The Tax related information includes any type of Taxes, corresponding Monetary Values, Total Charges with Taxes and disclaimers (if applicable) would be returned in response.
     *
     * @return self
     */
    public function setTaxInformationIndicator($taxInformationIndicator)
    {
        if (is_null($taxInformationIndicator)) {
            throw new \InvalidArgumentException('non-nullable taxInformationIndicator cannot be null');
        }


        $this->container['taxInformationIndicator'] = $taxInformationIndicator;

        return $this;
    }

    /**
     * Gets shipmentServiceOptions
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentShipmentServiceOptions|null
     */
    public function getShipmentServiceOptions()
    {
        return $this->container['shipmentServiceOptions'];
    }

    /**
     * Sets shipmentServiceOptions
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentShipmentServiceOptions|null $shipmentServiceOptions shipmentServiceOptions
     *
     * @return self
     */
    public function setShipmentServiceOptions($shipmentServiceOptions)
    {
        if (is_null($shipmentServiceOptions)) {
            throw new \InvalidArgumentException('non-nullable shipmentServiceOptions cannot be null');
        }
        $this->container['shipmentServiceOptions'] = $shipmentServiceOptions;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale Represents 5 character ISO Locale that allows the user to request Reference Number Code on Label, Label instructions and Receipt instructions (if applicable) in desired language.  Locale is specified by the combination of language code and country or territory code - 2 character language code and 2 character country or territory code seperated by an underscore ('_') character.  If Locale element is requested along with LabelLinksIndicator, the URL to retrieve Label and Receipts (if applicable) will be returned in the requested Locale. Please note only LabelURL and ReceiptURL (if applicable) will be returned. LocalLanguageLabelURL and LocalLanguageReceiptURL will not be returned if Locale element is present in request. Queen's English (en_GB) is the default
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        if ((mb_strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling ShipmentRequestShipment., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($locale) < 5)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling ShipmentRequestShipment., must be bigger than or equal to 5.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets shipmentValueThresholdCode
     *
     * @return string|null
     */
    public function getShipmentValueThresholdCode()
    {
        return $this->container['shipmentValueThresholdCode'];
    }

    /**
     * Sets shipmentValueThresholdCode
     *
     * @param string|null $shipmentValueThresholdCode Shipment Value Threshold Code. 01 = Shipment value is below or equals to threshold value 02 = Shipment value is above threshold value.     NA = Not Applicable
     *
     * @return self
     */
    public function setShipmentValueThresholdCode($shipmentValueThresholdCode)
    {
        if (is_null($shipmentValueThresholdCode)) {
            throw new \InvalidArgumentException('non-nullable shipmentValueThresholdCode cannot be null');
        }
        if ((mb_strlen($shipmentValueThresholdCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipmentValueThresholdCode when calling ShipmentRequestShipment., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($shipmentValueThresholdCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $shipmentValueThresholdCode when calling ShipmentRequestShipment., must be bigger than or equal to 2.');
        }

        $this->container['shipmentValueThresholdCode'] = $shipmentValueThresholdCode;

        return $this;
    }

    /**
     * Gets masterCartonID
     *
     * @return string|null
     */
    public function getMasterCartonID()
    {
        return $this->container['masterCartonID'];
    }

    /**
     * Sets masterCartonID
     *
     * @param string|null $masterCartonID Master Carton ID. If Economy Service (17 or 72) : Economy Shipment will be associated with given Master Carton ID. If Non-Economy Service: Master Carton Shipment will be created for given Master Carton ID.
     *
     * @return self
     */
    public function setMasterCartonID($masterCartonID)
    {
        if (is_null($masterCartonID)) {
            throw new \InvalidArgumentException('non-nullable masterCartonID cannot be null');
        }
        if ((mb_strlen($masterCartonID) > 24)) {
            throw new \InvalidArgumentException('invalid length for $masterCartonID when calling ShipmentRequestShipment., must be smaller than or equal to 24.');
        }
        if ((mb_strlen($masterCartonID) < 1)) {
            throw new \InvalidArgumentException('invalid length for $masterCartonID when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['masterCartonID'] = $masterCartonID;

        return $this;
    }

    /**
     * Gets masterCartonIndicator
     *
     * @return string|null
     */
    public function getMasterCartonIndicator()
    {
        return $this->container['masterCartonIndicator'];
    }

    /**
     * Sets masterCartonIndicator
     *
     * @param string|null $masterCartonIndicator Master Carton Indicator. Presence of the indicator means Master Carton ID will be created and returned to client.  This is an empty tag, any value inside is ignored.                                                                  MasterCartonIndicator is only valid with Econmoy Shipment (Service Code 17 or 72). Will be ignored if master carton id present.
     *
     * @return self
     */
    public function setMasterCartonIndicator($masterCartonIndicator)
    {
        if (is_null($masterCartonIndicator)) {
            throw new \InvalidArgumentException('non-nullable masterCartonIndicator cannot be null');
        }


        $this->container['masterCartonIndicator'] = $masterCartonIndicator;

        return $this;
    }

    /**
     * Gets shipmentDate
     *
     * @return string|null
     */
    public function getShipmentDate()
    {
        return $this->container['shipmentDate'];
    }

    /**
     * Sets shipmentDate
     *
     * @param string|null $shipmentDate User can send up to 7 days in the future with current date as day zero. Format: YYYYMMDD
     *
     * @return self
     */
    public function setShipmentDate($shipmentDate)
    {
        if (is_null($shipmentDate)) {
            throw new \InvalidArgumentException('non-nullable shipmentDate cannot be null');
        }
        if ((mb_strlen($shipmentDate) > 8)) {
            throw new \InvalidArgumentException('invalid length for $shipmentDate when calling ShipmentRequestShipment., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($shipmentDate) < 8)) {
            throw new \InvalidArgumentException('invalid length for $shipmentDate when calling ShipmentRequestShipment., must be bigger than or equal to 8.');
        }

        $this->container['shipmentDate'] = $shipmentDate;

        return $this;
    }

    /**
     * Gets package
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentPackage[]
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentPackage[] $package package
     *
     * @return self
     */
    public function setPackage($package)
    {
        if (is_null($package)) {
            throw new \InvalidArgumentException('non-nullable package cannot be null');
        }


        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets quoteID
     *
     * @return string|null
     */
    public function getQuoteID()
    {
        return $this->container['quoteID'];
    }

    /**
     * Sets quoteID
     *
     * @param string|null $quoteID This field is used to pass the Quote ID generated from the Global Checkout API. This is mandatory to validate your Global Checkout Guaranteed Landed Cost.
     *
     * @return self
     */
    public function setQuoteID($quoteID)
    {
        if (is_null($quoteID)) {
            throw new \InvalidArgumentException('non-nullable quoteID cannot be null');
        }
        if ((mb_strlen($quoteID) > 35)) {
            throw new \InvalidArgumentException('invalid length for $quoteID when calling ShipmentRequestShipment., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($quoteID) < 35)) {
            throw new \InvalidArgumentException('invalid length for $quoteID when calling ShipmentRequestShipment., must be bigger than or equal to 35.');
        }

        $this->container['quoteID'] = $quoteID;

        return $this;
    }

    /**
     * Gets tradeDirect
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentTradeDirect|null
     */
    public function getTradeDirect()
    {
        return $this->container['tradeDirect'];
    }

    /**
     * Sets tradeDirect
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentTradeDirect|null $tradeDirect tradeDirect
     *
     * @return self
     */
    public function setTradeDirect($tradeDirect)
    {
        if (is_null($tradeDirect)) {
            throw new \InvalidArgumentException('non-nullable tradeDirect cannot be null');
        }
        $this->container['tradeDirect'] = $tradeDirect;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


