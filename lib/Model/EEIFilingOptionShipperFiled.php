<?php
/**
 * EEIFilingOptionShipperFiled
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * EEIFilingOptionShipperFiled Class Doc Comment
 *
 * @category Class
 * @description Indicates the EEI Shipper Filed option or AES Direct. (Option 1 or 2).  Applicable for EEI form.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EEIFilingOptionShipperFiled implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EEIFilingOption_ShipperFiled';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'description' => 'string',
        'preDepartureITNNumber' => 'string',
        'exemptionLegend' => 'string',
        'eEIShipmentReferenceNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'description' => null,
        'preDepartureITNNumber' => null,
        'exemptionLegend' => null,
        'eEIShipmentReferenceNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => false,
        'description' => false,
        'preDepartureITNNumber' => false,
        'exemptionLegend' => false,
        'eEIShipmentReferenceNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'description' => 'Description',
        'preDepartureITNNumber' => 'PreDepartureITNNumber',
        'exemptionLegend' => 'ExemptionLegend',
        'eEIShipmentReferenceNumber' => 'EEIShipmentReferenceNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'description' => 'setDescription',
        'preDepartureITNNumber' => 'setPreDepartureITNNumber',
        'exemptionLegend' => 'setExemptionLegend',
        'eEIShipmentReferenceNumber' => 'setEEIShipmentReferenceNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'description' => 'getDescription',
        'preDepartureITNNumber' => 'getPreDepartureITNNumber',
        'exemptionLegend' => 'getExemptionLegend',
        'eEIShipmentReferenceNumber' => 'getEEIShipmentReferenceNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('preDepartureITNNumber', $data ?? [], null);
        $this->setIfExists('exemptionLegend', $data ?? [], null);
        $this->setIfExists('eEIShipmentReferenceNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) > 1)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['code']) < 1)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 20)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['preDepartureITNNumber']) && (mb_strlen($this->container['preDepartureITNNumber']) > 17)) {
            $invalidProperties[] = "invalid value for 'preDepartureITNNumber', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['preDepartureITNNumber']) && (mb_strlen($this->container['preDepartureITNNumber']) < 17)) {
            $invalidProperties[] = "invalid value for 'preDepartureITNNumber', the character length must be bigger than or equal to 17.";
        }

        if (!is_null($this->container['exemptionLegend']) && (mb_strlen($this->container['exemptionLegend']) > 20)) {
            $invalidProperties[] = "invalid value for 'exemptionLegend', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['exemptionLegend']) && (mb_strlen($this->container['exemptionLegend']) < 20)) {
            $invalidProperties[] = "invalid value for 'exemptionLegend', the character length must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['eEIShipmentReferenceNumber']) && (mb_strlen($this->container['eEIShipmentReferenceNumber']) > 17)) {
            $invalidProperties[] = "invalid value for 'eEIShipmentReferenceNumber', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['eEIShipmentReferenceNumber']) && (mb_strlen($this->container['eEIShipmentReferenceNumber']) < 2)) {
            $invalidProperties[] = "invalid value for 'eEIShipmentReferenceNumber', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Indicates the EEI Shipper sub option.  Applicable for EEI form and is required. Valid value is: A- requires the ITN; B- requires the Exemption Legend; C- requires the post departure filing citation.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        if ((mb_strlen($code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling EEIFilingOptionShipperFiled., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling EEIFilingOptionShipperFiled., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of ShipperFiled Code.  Applicable for EEI form.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 20)) {
            throw new \InvalidArgumentException('invalid length for $description when calling EEIFilingOptionShipperFiled., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling EEIFilingOptionShipperFiled., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets preDepartureITNNumber
     *
     * @return string|null
     */
    public function getPreDepartureITNNumber()
    {
        return $this->container['preDepartureITNNumber'];
    }

    /**
     * Sets preDepartureITNNumber
     *
     * @param string|null $preDepartureITNNumber Input for Shipper Filed option A and AES Direct. The format is available from AESDirect website.  Valid and Required for Shipper Filed option A. EEI form only.
     *
     * @return self
     */
    public function setPreDepartureITNNumber($preDepartureITNNumber)
    {
        if (is_null($preDepartureITNNumber)) {
            throw new \InvalidArgumentException('non-nullable preDepartureITNNumber cannot be null');
        }
        if ((mb_strlen($preDepartureITNNumber) > 17)) {
            throw new \InvalidArgumentException('invalid length for $preDepartureITNNumber when calling EEIFilingOptionShipperFiled., must be smaller than or equal to 17.');
        }
        if ((mb_strlen($preDepartureITNNumber) < 17)) {
            throw new \InvalidArgumentException('invalid length for $preDepartureITNNumber when calling EEIFilingOptionShipperFiled., must be bigger than or equal to 17.');
        }

        $this->container['preDepartureITNNumber'] = $preDepartureITNNumber;

        return $this;
    }

    /**
     * Gets exemptionLegend
     *
     * @return string|null
     */
    public function getExemptionLegend()
    {
        return $this->container['exemptionLegend'];
    }

    /**
     * Sets exemptionLegend
     *
     * @param string|null $exemptionLegend Input for Shipper Filed option B. 30.2(d)(2), 30.26(a), 30.36, 30.37(a), 30.37(b), 30.37(c), 30.37(d), 30.37(e), 30.37(f), 30.37(h), 30.37(i), 30.30(j), 30.37(k), 30.37(i), 30.37(j), 30.37(k), 30.37(l), 30.37(m), 30.37(n), 30.37(o), 30.37(p), 30.37(q), 30.37(r), 30.37(s), 30.37(t), 30.37(u), 30.37(x), 30.37(y)(1), 30.37(y)(2), 30.37(y)(3), 30.37(y)(4), 30.37(y)(5), 30.37(y)(6), 30.39, 30.40(a), 30.40(b), 30.40(c), 30.40(d), 30.8(b)  Valid and Required for Shipper Filed option B. EEI form only.
     *
     * @return self
     */
    public function setExemptionLegend($exemptionLegend)
    {
        if (is_null($exemptionLegend)) {
            throw new \InvalidArgumentException('non-nullable exemptionLegend cannot be null');
        }
        if ((mb_strlen($exemptionLegend) > 20)) {
            throw new \InvalidArgumentException('invalid length for $exemptionLegend when calling EEIFilingOptionShipperFiled., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($exemptionLegend) < 20)) {
            throw new \InvalidArgumentException('invalid length for $exemptionLegend when calling EEIFilingOptionShipperFiled., must be bigger than or equal to 20.');
        }

        $this->container['exemptionLegend'] = $exemptionLegend;

        return $this;
    }

    /**
     * Gets eEIShipmentReferenceNumber
     *
     * @return string|null
     */
    public function getEEIShipmentReferenceNumber()
    {
        return $this->container['eEIShipmentReferenceNumber'];
    }

    /**
     * Sets eEIShipmentReferenceNumber
     *
     * @param string|null $eEIShipmentReferenceNumber Shipment Reference Number for use during interaction with AES. Valid for EEI form for Shipper Filed option 'C' and AES Direct Filed.
     *
     * @return self
     */
    public function setEEIShipmentReferenceNumber($eEIShipmentReferenceNumber)
    {
        if (is_null($eEIShipmentReferenceNumber)) {
            throw new \InvalidArgumentException('non-nullable eEIShipmentReferenceNumber cannot be null');
        }
        if ((mb_strlen($eEIShipmentReferenceNumber) > 17)) {
            throw new \InvalidArgumentException('invalid length for $eEIShipmentReferenceNumber when calling EEIFilingOptionShipperFiled., must be smaller than or equal to 17.');
        }
        if ((mb_strlen($eEIShipmentReferenceNumber) < 2)) {
            throw new \InvalidArgumentException('invalid length for $eEIShipmentReferenceNumber when calling EEIFilingOptionShipperFiled., must be bigger than or equal to 2.');
        }

        $this->container['eEIShipmentReferenceNumber'] = $eEIShipmentReferenceNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


