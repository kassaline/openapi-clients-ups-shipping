<?php
/**
 * ShipmentPackage
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ShipmentPackage Class Doc Comment
 *
 * @category Class
 * @description Package Information container.  For Return Shipments up to and including 20 packages are allowed. US/PR origin return movements are limited to only one package. For Mail Innovations and Simple Rate shipments only one package is allowed.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentPackage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment_Package';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'palletDescription' => 'string',
        'numOfPieces' => 'string',
        'unitPrice' => 'string',
        'packaging' => '\OpenAPIClientUPSShipping\Model\PackagePackaging',
        'dimensions' => '\OpenAPIClientUPSShipping\Model\PackageDimensions',
        'dimWeight' => '\OpenAPIClientUPSShipping\Model\PackageDimWeight',
        'packageWeight' => '\OpenAPIClientUPSShipping\Model\PackagePackageWeight',
        'largePackageIndicator' => 'string',
        'oversizeIndicator' => 'string',
        'minimumBillableWeightIndicator' => 'string',
        'referenceNumber' => '\OpenAPIClientUPSShipping\Model\PackageReferenceNumber[]',
        'additionalHandlingIndicator' => 'string',
        'simpleRate' => '\OpenAPIClientUPSShipping\Model\PackageSimpleRate',
        'uPSPremier' => '\OpenAPIClientUPSShipping\Model\PackageUPSPremier',
        'packageServiceOptions' => '\OpenAPIClientUPSShipping\Model\PackagePackageServiceOptions',
        'commodity' => '\OpenAPIClientUPSShipping\Model\PackageCommodity',
        'hazMatPackageInformation' => '\OpenAPIClientUPSShipping\Model\PackageHazMatPackageInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'palletDescription' => null,
        'numOfPieces' => null,
        'unitPrice' => null,
        'packaging' => null,
        'dimensions' => null,
        'dimWeight' => null,
        'packageWeight' => null,
        'largePackageIndicator' => null,
        'oversizeIndicator' => null,
        'minimumBillableWeightIndicator' => null,
        'referenceNumber' => null,
        'additionalHandlingIndicator' => null,
        'simpleRate' => null,
        'uPSPremier' => null,
        'packageServiceOptions' => null,
        'commodity' => null,
        'hazMatPackageInformation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'palletDescription' => false,
        'numOfPieces' => false,
        'unitPrice' => false,
        'packaging' => false,
        'dimensions' => false,
        'dimWeight' => false,
        'packageWeight' => false,
        'largePackageIndicator' => false,
        'oversizeIndicator' => false,
        'minimumBillableWeightIndicator' => false,
        'referenceNumber' => false,
        'additionalHandlingIndicator' => false,
        'simpleRate' => false,
        'uPSPremier' => false,
        'packageServiceOptions' => false,
        'commodity' => false,
        'hazMatPackageInformation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'palletDescription' => 'PalletDescription',
        'numOfPieces' => 'NumOfPieces',
        'unitPrice' => 'UnitPrice',
        'packaging' => 'Packaging',
        'dimensions' => 'Dimensions',
        'dimWeight' => 'DimWeight',
        'packageWeight' => 'PackageWeight',
        'largePackageIndicator' => 'LargePackageIndicator',
        'oversizeIndicator' => 'OversizeIndicator',
        'minimumBillableWeightIndicator' => 'MinimumBillableWeightIndicator',
        'referenceNumber' => 'ReferenceNumber',
        'additionalHandlingIndicator' => 'AdditionalHandlingIndicator',
        'simpleRate' => 'SimpleRate',
        'uPSPremier' => 'UPSPremier',
        'packageServiceOptions' => 'PackageServiceOptions',
        'commodity' => 'Commodity',
        'hazMatPackageInformation' => 'HazMatPackageInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'palletDescription' => 'setPalletDescription',
        'numOfPieces' => 'setNumOfPieces',
        'unitPrice' => 'setUnitPrice',
        'packaging' => 'setPackaging',
        'dimensions' => 'setDimensions',
        'dimWeight' => 'setDimWeight',
        'packageWeight' => 'setPackageWeight',
        'largePackageIndicator' => 'setLargePackageIndicator',
        'oversizeIndicator' => 'setOversizeIndicator',
        'minimumBillableWeightIndicator' => 'setMinimumBillableWeightIndicator',
        'referenceNumber' => 'setReferenceNumber',
        'additionalHandlingIndicator' => 'setAdditionalHandlingIndicator',
        'simpleRate' => 'setSimpleRate',
        'uPSPremier' => 'setUPSPremier',
        'packageServiceOptions' => 'setPackageServiceOptions',
        'commodity' => 'setCommodity',
        'hazMatPackageInformation' => 'setHazMatPackageInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'palletDescription' => 'getPalletDescription',
        'numOfPieces' => 'getNumOfPieces',
        'unitPrice' => 'getUnitPrice',
        'packaging' => 'getPackaging',
        'dimensions' => 'getDimensions',
        'dimWeight' => 'getDimWeight',
        'packageWeight' => 'getPackageWeight',
        'largePackageIndicator' => 'getLargePackageIndicator',
        'oversizeIndicator' => 'getOversizeIndicator',
        'minimumBillableWeightIndicator' => 'getMinimumBillableWeightIndicator',
        'referenceNumber' => 'getReferenceNumber',
        'additionalHandlingIndicator' => 'getAdditionalHandlingIndicator',
        'simpleRate' => 'getSimpleRate',
        'uPSPremier' => 'getUPSPremier',
        'packageServiceOptions' => 'getPackageServiceOptions',
        'commodity' => 'getCommodity',
        'hazMatPackageInformation' => 'getHazMatPackageInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('palletDescription', $data ?? [], null);
        $this->setIfExists('numOfPieces', $data ?? [], null);
        $this->setIfExists('unitPrice', $data ?? [], null);
        $this->setIfExists('packaging', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('dimWeight', $data ?? [], null);
        $this->setIfExists('packageWeight', $data ?? [], null);
        $this->setIfExists('largePackageIndicator', $data ?? [], null);
        $this->setIfExists('oversizeIndicator', $data ?? [], null);
        $this->setIfExists('minimumBillableWeightIndicator', $data ?? [], null);
        $this->setIfExists('referenceNumber', $data ?? [], null);
        $this->setIfExists('additionalHandlingIndicator', $data ?? [], null);
        $this->setIfExists('simpleRate', $data ?? [], null);
        $this->setIfExists('uPSPremier', $data ?? [], null);
        $this->setIfExists('packageServiceOptions', $data ?? [], null);
        $this->setIfExists('commodity', $data ?? [], null);
        $this->setIfExists('hazMatPackageInformation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 35)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['palletDescription']) && (mb_strlen($this->container['palletDescription']) > 150)) {
            $invalidProperties[] = "invalid value for 'palletDescription', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['palletDescription']) && (mb_strlen($this->container['palletDescription']) < 1)) {
            $invalidProperties[] = "invalid value for 'palletDescription', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['numOfPieces']) && (mb_strlen($this->container['numOfPieces']) > 5)) {
            $invalidProperties[] = "invalid value for 'numOfPieces', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['numOfPieces']) && (mb_strlen($this->container['numOfPieces']) < 1)) {
            $invalidProperties[] = "invalid value for 'numOfPieces', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unitPrice']) && (mb_strlen($this->container['unitPrice']) > 12)) {
            $invalidProperties[] = "invalid value for 'unitPrice', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['unitPrice']) && (mb_strlen($this->container['unitPrice']) < 1)) {
            $invalidProperties[] = "invalid value for 'unitPrice', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['packaging'] === null) {
            $invalidProperties[] = "'packaging' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Merchandise description of package.  Required for shipment with return service.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 35)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ShipmentPackage., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ShipmentPackage., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets palletDescription
     *
     * @return string|null
     */
    public function getPalletDescription()
    {
        return $this->container['palletDescription'];
    }

    /**
     * Sets palletDescription
     *
     * @param string|null $palletDescription Description of articles & special marks. Applicable for Air Freight only
     *
     * @return self
     */
    public function setPalletDescription($palletDescription)
    {
        if (is_null($palletDescription)) {
            throw new \InvalidArgumentException('non-nullable palletDescription cannot be null');
        }
        if ((mb_strlen($palletDescription) > 150)) {
            throw new \InvalidArgumentException('invalid length for $palletDescription when calling ShipmentPackage., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($palletDescription) < 1)) {
            throw new \InvalidArgumentException('invalid length for $palletDescription when calling ShipmentPackage., must be bigger than or equal to 1.');
        }

        $this->container['palletDescription'] = $palletDescription;

        return $this;
    }

    /**
     * Gets numOfPieces
     *
     * @return string|null
     */
    public function getNumOfPieces()
    {
        return $this->container['numOfPieces'];
    }

    /**
     * Sets numOfPieces
     *
     * @param string|null $numOfPieces Number of Pieces. Applicable for Air Freight only
     *
     * @return self
     */
    public function setNumOfPieces($numOfPieces)
    {
        if (is_null($numOfPieces)) {
            throw new \InvalidArgumentException('non-nullable numOfPieces cannot be null');
        }
        if ((mb_strlen($numOfPieces) > 5)) {
            throw new \InvalidArgumentException('invalid length for $numOfPieces when calling ShipmentPackage., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($numOfPieces) < 1)) {
            throw new \InvalidArgumentException('invalid length for $numOfPieces when calling ShipmentPackage., must be bigger than or equal to 1.');
        }

        $this->container['numOfPieces'] = $numOfPieces;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return string|null
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param string|null $unitPrice Unit price of the commodity. Applicable for Air Freight only  Limit to 2 digit after the decimal. The maximum length of the field is 12 including '.' and can hold up to 2 decimal place. (e.g. 999999999.99)
     *
     * @return self
     */
    public function setUnitPrice($unitPrice)
    {
        if (is_null($unitPrice)) {
            throw new \InvalidArgumentException('non-nullable unitPrice cannot be null');
        }
        if ((mb_strlen($unitPrice) > 12)) {
            throw new \InvalidArgumentException('invalid length for $unitPrice when calling ShipmentPackage., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($unitPrice) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unitPrice when calling ShipmentPackage., must be bigger than or equal to 1.');
        }

        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets packaging
     *
     * @return \OpenAPIClientUPSShipping\Model\PackagePackaging
     */
    public function getPackaging()
    {
        return $this->container['packaging'];
    }

    /**
     * Sets packaging
     *
     * @param \OpenAPIClientUPSShipping\Model\PackagePackaging $packaging packaging
     *
     * @return self
     */
    public function setPackaging($packaging)
    {
        if (is_null($packaging)) {
            throw new \InvalidArgumentException('non-nullable packaging cannot be null');
        }
        $this->container['packaging'] = $packaging;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageDimensions|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageDimensions|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets dimWeight
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageDimWeight|null
     */
    public function getDimWeight()
    {
        return $this->container['dimWeight'];
    }

    /**
     * Sets dimWeight
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageDimWeight|null $dimWeight dimWeight
     *
     * @return self
     */
    public function setDimWeight($dimWeight)
    {
        if (is_null($dimWeight)) {
            throw new \InvalidArgumentException('non-nullable dimWeight cannot be null');
        }
        $this->container['dimWeight'] = $dimWeight;

        return $this;
    }

    /**
     * Gets packageWeight
     *
     * @return \OpenAPIClientUPSShipping\Model\PackagePackageWeight|null
     */
    public function getPackageWeight()
    {
        return $this->container['packageWeight'];
    }

    /**
     * Sets packageWeight
     *
     * @param \OpenAPIClientUPSShipping\Model\PackagePackageWeight|null $packageWeight packageWeight
     *
     * @return self
     */
    public function setPackageWeight($packageWeight)
    {
        if (is_null($packageWeight)) {
            throw new \InvalidArgumentException('non-nullable packageWeight cannot be null');
        }
        $this->container['packageWeight'] = $packageWeight;

        return $this;
    }

    /**
     * Gets largePackageIndicator
     *
     * @return string|null
     */
    public function getLargePackageIndicator()
    {
        return $this->container['largePackageIndicator'];
    }

    /**
     * Sets largePackageIndicator
     *
     * @param string|null $largePackageIndicator Presence of the indicator mentions that the package is Large Package.  This is an empty tag, any value inside is ignored.
     *
     * @return self
     */
    public function setLargePackageIndicator($largePackageIndicator)
    {
        if (is_null($largePackageIndicator)) {
            throw new \InvalidArgumentException('non-nullable largePackageIndicator cannot be null');
        }


        $this->container['largePackageIndicator'] = $largePackageIndicator;

        return $this;
    }

    /**
     * Gets oversizeIndicator
     *
     * @return string|null
     */
    public function getOversizeIndicator()
    {
        return $this->container['oversizeIndicator'];
    }

    /**
     * Sets oversizeIndicator
     *
     * @param string|null $oversizeIndicator Presence/Absence Indicator. Any value is ignored. If present, indicates that the package is over size.   Applicable for UPS Worldwide Economy DDU service.
     *
     * @return self
     */
    public function setOversizeIndicator($oversizeIndicator)
    {
        if (is_null($oversizeIndicator)) {
            throw new \InvalidArgumentException('non-nullable oversizeIndicator cannot be null');
        }


        $this->container['oversizeIndicator'] = $oversizeIndicator;

        return $this;
    }

    /**
     * Gets minimumBillableWeightIndicator
     *
     * @return string|null
     */
    public function getMinimumBillableWeightIndicator()
    {
        return $this->container['minimumBillableWeightIndicator'];
    }

    /**
     * Sets minimumBillableWeightIndicator
     *
     * @param string|null $minimumBillableWeightIndicator Presence/Absence Indicator. Any value is ignored. If present, indicates that the package is qualified for minimum billable weight.   Applicable for UPS Worldwide Economy DDU service.
     *
     * @return self
     */
    public function setMinimumBillableWeightIndicator($minimumBillableWeightIndicator)
    {
        if (is_null($minimumBillableWeightIndicator)) {
            throw new \InvalidArgumentException('non-nullable minimumBillableWeightIndicator cannot be null');
        }


        $this->container['minimumBillableWeightIndicator'] = $minimumBillableWeightIndicator;

        return $this;
    }

    /**
     * Gets referenceNumber
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageReferenceNumber[]|null
     */
    public function getReferenceNumber()
    {
        return $this->container['referenceNumber'];
    }

    /**
     * Sets referenceNumber
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageReferenceNumber[]|null $referenceNumber referenceNumber
     *
     * @return self
     */
    public function setReferenceNumber($referenceNumber)
    {
        if (is_null($referenceNumber)) {
            throw new \InvalidArgumentException('non-nullable referenceNumber cannot be null');
        }


        $this->container['referenceNumber'] = $referenceNumber;

        return $this;
    }

    /**
     * Gets additionalHandlingIndicator
     *
     * @return string|null
     */
    public function getAdditionalHandlingIndicator()
    {
        return $this->container['additionalHandlingIndicator'];
    }

    /**
     * Sets additionalHandlingIndicator
     *
     * @param string|null $additionalHandlingIndicator Additional Handling Required. The presence indicates additional handling is required, the absence indicates no additional handling is required. Additional Handling indicator indicates it's a non-corrugated package.
     *
     * @return self
     */
    public function setAdditionalHandlingIndicator($additionalHandlingIndicator)
    {
        if (is_null($additionalHandlingIndicator)) {
            throw new \InvalidArgumentException('non-nullable additionalHandlingIndicator cannot be null');
        }


        $this->container['additionalHandlingIndicator'] = $additionalHandlingIndicator;

        return $this;
    }

    /**
     * Gets simpleRate
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageSimpleRate|null
     */
    public function getSimpleRate()
    {
        return $this->container['simpleRate'];
    }

    /**
     * Sets simpleRate
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageSimpleRate|null $simpleRate simpleRate
     *
     * @return self
     */
    public function setSimpleRate($simpleRate)
    {
        if (is_null($simpleRate)) {
            throw new \InvalidArgumentException('non-nullable simpleRate cannot be null');
        }
        $this->container['simpleRate'] = $simpleRate;

        return $this;
    }

    /**
     * Gets uPSPremier
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageUPSPremier|null
     */
    public function getUPSPremier()
    {
        return $this->container['uPSPremier'];
    }

    /**
     * Sets uPSPremier
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageUPSPremier|null $uPSPremier uPSPremier
     *
     * @return self
     */
    public function setUPSPremier($uPSPremier)
    {
        if (is_null($uPSPremier)) {
            throw new \InvalidArgumentException('non-nullable uPSPremier cannot be null');
        }
        $this->container['uPSPremier'] = $uPSPremier;

        return $this;
    }

    /**
     * Gets packageServiceOptions
     *
     * @return \OpenAPIClientUPSShipping\Model\PackagePackageServiceOptions|null
     */
    public function getPackageServiceOptions()
    {
        return $this->container['packageServiceOptions'];
    }

    /**
     * Sets packageServiceOptions
     *
     * @param \OpenAPIClientUPSShipping\Model\PackagePackageServiceOptions|null $packageServiceOptions packageServiceOptions
     *
     * @return self
     */
    public function setPackageServiceOptions($packageServiceOptions)
    {
        if (is_null($packageServiceOptions)) {
            throw new \InvalidArgumentException('non-nullable packageServiceOptions cannot be null');
        }
        $this->container['packageServiceOptions'] = $packageServiceOptions;

        return $this;
    }

    /**
     * Gets commodity
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageCommodity|null
     */
    public function getCommodity()
    {
        return $this->container['commodity'];
    }

    /**
     * Sets commodity
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageCommodity|null $commodity commodity
     *
     * @return self
     */
    public function setCommodity($commodity)
    {
        if (is_null($commodity)) {
            throw new \InvalidArgumentException('non-nullable commodity cannot be null');
        }
        $this->container['commodity'] = $commodity;

        return $this;
    }

    /**
     * Gets hazMatPackageInformation
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageHazMatPackageInformation|null
     */
    public function getHazMatPackageInformation()
    {
        return $this->container['hazMatPackageInformation'];
    }

    /**
     * Sets hazMatPackageInformation
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageHazMatPackageInformation|null $hazMatPackageInformation hazMatPackageInformation
     *
     * @return self
     */
    public function setHazMatPackageInformation($hazMatPackageInformation)
    {
        if (is_null($hazMatPackageInformation)) {
            throw new \InvalidArgumentException('non-nullable hazMatPackageInformation cannot be null');
        }
        $this->container['hazMatPackageInformation'] = $hazMatPackageInformation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


