<?php
/**
 * CN22FormCN22Content
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * CN22FormCN22Content Class Doc Comment
 *
 * @category Class
 * @description Container for CN22 content.  Required if the CN22 form container is present.  Note: The maximum number of goods printed on the CN22 form when a combined MI package and CN22 form label is requested is 30.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CN22FormCN22Content implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CN22Form_CN22Content';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cN22ContentQuantity' => 'string',
        'cN22ContentDescription' => 'string',
        'cN22ContentWeight' => '\OpenAPIClientUPSShipping\Model\CN22ContentCN22ContentWeight',
        'cN22ContentTotalValue' => 'string',
        'cN22ContentCurrencyCode' => 'string',
        'cN22ContentCountryOfOrigin' => 'string',
        'cN22ContentTariffNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cN22ContentQuantity' => null,
        'cN22ContentDescription' => null,
        'cN22ContentWeight' => null,
        'cN22ContentTotalValue' => null,
        'cN22ContentCurrencyCode' => null,
        'cN22ContentCountryOfOrigin' => null,
        'cN22ContentTariffNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cN22ContentQuantity' => false,
        'cN22ContentDescription' => false,
        'cN22ContentWeight' => false,
        'cN22ContentTotalValue' => false,
        'cN22ContentCurrencyCode' => false,
        'cN22ContentCountryOfOrigin' => false,
        'cN22ContentTariffNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cN22ContentQuantity' => 'CN22ContentQuantity',
        'cN22ContentDescription' => 'CN22ContentDescription',
        'cN22ContentWeight' => 'CN22ContentWeight',
        'cN22ContentTotalValue' => 'CN22ContentTotalValue',
        'cN22ContentCurrencyCode' => 'CN22ContentCurrencyCode',
        'cN22ContentCountryOfOrigin' => 'CN22ContentCountryOfOrigin',
        'cN22ContentTariffNumber' => 'CN22ContentTariffNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cN22ContentQuantity' => 'setCN22ContentQuantity',
        'cN22ContentDescription' => 'setCN22ContentDescription',
        'cN22ContentWeight' => 'setCN22ContentWeight',
        'cN22ContentTotalValue' => 'setCN22ContentTotalValue',
        'cN22ContentCurrencyCode' => 'setCN22ContentCurrencyCode',
        'cN22ContentCountryOfOrigin' => 'setCN22ContentCountryOfOrigin',
        'cN22ContentTariffNumber' => 'setCN22ContentTariffNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cN22ContentQuantity' => 'getCN22ContentQuantity',
        'cN22ContentDescription' => 'getCN22ContentDescription',
        'cN22ContentWeight' => 'getCN22ContentWeight',
        'cN22ContentTotalValue' => 'getCN22ContentTotalValue',
        'cN22ContentCurrencyCode' => 'getCN22ContentCurrencyCode',
        'cN22ContentCountryOfOrigin' => 'getCN22ContentCountryOfOrigin',
        'cN22ContentTariffNumber' => 'getCN22ContentTariffNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cN22ContentQuantity', $data ?? [], null);
        $this->setIfExists('cN22ContentDescription', $data ?? [], null);
        $this->setIfExists('cN22ContentWeight', $data ?? [], null);
        $this->setIfExists('cN22ContentTotalValue', $data ?? [], null);
        $this->setIfExists('cN22ContentCurrencyCode', $data ?? [], null);
        $this->setIfExists('cN22ContentCountryOfOrigin', $data ?? [], null);
        $this->setIfExists('cN22ContentTariffNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cN22ContentQuantity'] === null) {
            $invalidProperties[] = "'cN22ContentQuantity' can't be null";
        }
        if ($this->container['cN22ContentDescription'] === null) {
            $invalidProperties[] = "'cN22ContentDescription' can't be null";
        }
        if ((mb_strlen($this->container['cN22ContentDescription']) > 105)) {
            $invalidProperties[] = "invalid value for 'cN22ContentDescription', the character length must be smaller than or equal to 105.";
        }

        if ((mb_strlen($this->container['cN22ContentDescription']) < 1)) {
            $invalidProperties[] = "invalid value for 'cN22ContentDescription', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['cN22ContentWeight'] === null) {
            $invalidProperties[] = "'cN22ContentWeight' can't be null";
        }
        if ($this->container['cN22ContentTotalValue'] === null) {
            $invalidProperties[] = "'cN22ContentTotalValue' can't be null";
        }
        if ((mb_strlen($this->container['cN22ContentTotalValue']) > 9)) {
            $invalidProperties[] = "invalid value for 'cN22ContentTotalValue', the character length must be smaller than or equal to 9.";
        }

        if ((mb_strlen($this->container['cN22ContentTotalValue']) < 9)) {
            $invalidProperties[] = "invalid value for 'cN22ContentTotalValue', the character length must be bigger than or equal to 9.";
        }

        if ($this->container['cN22ContentCurrencyCode'] === null) {
            $invalidProperties[] = "'cN22ContentCurrencyCode' can't be null";
        }
        if ((mb_strlen($this->container['cN22ContentCurrencyCode']) > 3)) {
            $invalidProperties[] = "invalid value for 'cN22ContentCurrencyCode', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['cN22ContentCurrencyCode']) < 3)) {
            $invalidProperties[] = "invalid value for 'cN22ContentCurrencyCode', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['cN22ContentCountryOfOrigin']) && (mb_strlen($this->container['cN22ContentCountryOfOrigin']) > 2)) {
            $invalidProperties[] = "invalid value for 'cN22ContentCountryOfOrigin', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['cN22ContentCountryOfOrigin']) && (mb_strlen($this->container['cN22ContentCountryOfOrigin']) < 2)) {
            $invalidProperties[] = "invalid value for 'cN22ContentCountryOfOrigin', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['cN22ContentTariffNumber']) && (mb_strlen($this->container['cN22ContentTariffNumber']) > 40)) {
            $invalidProperties[] = "invalid value for 'cN22ContentTariffNumber', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['cN22ContentTariffNumber']) && (mb_strlen($this->container['cN22ContentTariffNumber']) < 40)) {
            $invalidProperties[] = "invalid value for 'cN22ContentTariffNumber', the character length must be bigger than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cN22ContentQuantity
     *
     * @return string
     */
    public function getCN22ContentQuantity()
    {
        return $this->container['cN22ContentQuantity'];
    }

    /**
     * Sets cN22ContentQuantity
     *
     * @param string $cN22ContentQuantity Total number of items associated with this content.  Required if the CN22 form container is present.
     *
     * @return self
     */
    public function setCN22ContentQuantity($cN22ContentQuantity)
    {
        if (is_null($cN22ContentQuantity)) {
            throw new \InvalidArgumentException('non-nullable cN22ContentQuantity cannot be null');
        }


        $this->container['cN22ContentQuantity'] = $cN22ContentQuantity;

        return $this;
    }

    /**
     * Gets cN22ContentDescription
     *
     * @return string
     */
    public function getCN22ContentDescription()
    {
        return $this->container['cN22ContentDescription'];
    }

    /**
     * Sets cN22ContentDescription
     *
     * @param string $cN22ContentDescription Detailed description of the content.  If the combined MI package and CN22 label is requested, only the first 30 characters will appear on the combined label.  Required if the CN22 form container is present.
     *
     * @return self
     */
    public function setCN22ContentDescription($cN22ContentDescription)
    {
        if (is_null($cN22ContentDescription)) {
            throw new \InvalidArgumentException('non-nullable cN22ContentDescription cannot be null');
        }
        if ((mb_strlen($cN22ContentDescription) > 105)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentDescription when calling CN22FormCN22Content., must be smaller than or equal to 105.');
        }
        if ((mb_strlen($cN22ContentDescription) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentDescription when calling CN22FormCN22Content., must be bigger than or equal to 1.');
        }

        $this->container['cN22ContentDescription'] = $cN22ContentDescription;

        return $this;
    }

    /**
     * Gets cN22ContentWeight
     *
     * @return \OpenAPIClientUPSShipping\Model\CN22ContentCN22ContentWeight
     */
    public function getCN22ContentWeight()
    {
        return $this->container['cN22ContentWeight'];
    }

    /**
     * Sets cN22ContentWeight
     *
     * @param \OpenAPIClientUPSShipping\Model\CN22ContentCN22ContentWeight $cN22ContentWeight cN22ContentWeight
     *
     * @return self
     */
    public function setCN22ContentWeight($cN22ContentWeight)
    {
        if (is_null($cN22ContentWeight)) {
            throw new \InvalidArgumentException('non-nullable cN22ContentWeight cannot be null');
        }
        $this->container['cN22ContentWeight'] = $cN22ContentWeight;

        return $this;
    }

    /**
     * Gets cN22ContentTotalValue
     *
     * @return string
     */
    public function getCN22ContentTotalValue()
    {
        return $this->container['cN22ContentTotalValue'];
    }

    /**
     * Sets cN22ContentTotalValue
     *
     * @param string $cN22ContentTotalValue Total value of the items associated with this content.  Required if the CN22 form container is present.
     *
     * @return self
     */
    public function setCN22ContentTotalValue($cN22ContentTotalValue)
    {
        if (is_null($cN22ContentTotalValue)) {
            throw new \InvalidArgumentException('non-nullable cN22ContentTotalValue cannot be null');
        }
        if ((mb_strlen($cN22ContentTotalValue) > 9)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentTotalValue when calling CN22FormCN22Content., must be smaller than or equal to 9.');
        }
        if ((mb_strlen($cN22ContentTotalValue) < 9)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentTotalValue when calling CN22FormCN22Content., must be bigger than or equal to 9.');
        }

        $this->container['cN22ContentTotalValue'] = $cN22ContentTotalValue;

        return $this;
    }

    /**
     * Gets cN22ContentCurrencyCode
     *
     * @return string
     */
    public function getCN22ContentCurrencyCode()
    {
        return $this->container['cN22ContentCurrencyCode'];
    }

    /**
     * Sets cN22ContentCurrencyCode
     *
     * @param string $cN22ContentCurrencyCode Currently only USD is supported.  Required if the CN22 form container is present.
     *
     * @return self
     */
    public function setCN22ContentCurrencyCode($cN22ContentCurrencyCode)
    {
        if (is_null($cN22ContentCurrencyCode)) {
            throw new \InvalidArgumentException('non-nullable cN22ContentCurrencyCode cannot be null');
        }
        if ((mb_strlen($cN22ContentCurrencyCode) > 3)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentCurrencyCode when calling CN22FormCN22Content., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($cN22ContentCurrencyCode) < 3)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentCurrencyCode when calling CN22FormCN22Content., must be bigger than or equal to 3.');
        }

        $this->container['cN22ContentCurrencyCode'] = $cN22ContentCurrencyCode;

        return $this;
    }

    /**
     * Gets cN22ContentCountryOfOrigin
     *
     * @return string|null
     */
    public function getCN22ContentCountryOfOrigin()
    {
        return $this->container['cN22ContentCountryOfOrigin'];
    }

    /**
     * Sets cN22ContentCountryOfOrigin
     *
     * @param string|null $cN22ContentCountryOfOrigin Country or Territory of Origin from where the CN22 contents originated.
     *
     * @return self
     */
    public function setCN22ContentCountryOfOrigin($cN22ContentCountryOfOrigin)
    {
        if (is_null($cN22ContentCountryOfOrigin)) {
            throw new \InvalidArgumentException('non-nullable cN22ContentCountryOfOrigin cannot be null');
        }
        if ((mb_strlen($cN22ContentCountryOfOrigin) > 2)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentCountryOfOrigin when calling CN22FormCN22Content., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($cN22ContentCountryOfOrigin) < 2)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentCountryOfOrigin when calling CN22FormCN22Content., must be bigger than or equal to 2.');
        }

        $this->container['cN22ContentCountryOfOrigin'] = $cN22ContentCountryOfOrigin;

        return $this;
    }

    /**
     * Gets cN22ContentTariffNumber
     *
     * @return string|null
     */
    public function getCN22ContentTariffNumber()
    {
        return $this->container['cN22ContentTariffNumber'];
    }

    /**
     * Sets cN22ContentTariffNumber
     *
     * @param string|null $cN22ContentTariffNumber The tariff number associated with the CN22 contents.
     *
     * @return self
     */
    public function setCN22ContentTariffNumber($cN22ContentTariffNumber)
    {
        if (is_null($cN22ContentTariffNumber)) {
            throw new \InvalidArgumentException('non-nullable cN22ContentTariffNumber cannot be null');
        }
        if ((mb_strlen($cN22ContentTariffNumber) > 40)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentTariffNumber when calling CN22FormCN22Content., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($cN22ContentTariffNumber) < 40)) {
            throw new \InvalidArgumentException('invalid length for $cN22ContentTariffNumber when calling CN22FormCN22Content., must be bigger than or equal to 40.');
        }

        $this->container['cN22ContentTariffNumber'] = $cN22ContentTariffNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


