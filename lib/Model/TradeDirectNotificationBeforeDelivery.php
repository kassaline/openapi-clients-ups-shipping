<?php
/**
 * TradeDirectNotificationBeforeDelivery
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * TradeDirectNotificationBeforeDelivery Class Doc Comment
 *
 * @category Class
 * @description Notification container for the before delivery notification.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TradeDirectNotificationBeforeDelivery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TradeDirect_NotificationBeforeDelivery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'requestType' => 'string',
        'mediaTypeCode' => 'string',
        'language' => 'string',
        'dialect' => 'string',
        'shipFromCompanyName' => 'string',
        'companyName' => 'string',
        'phone' => '\OpenAPIClientUPSShipping\Model\TradeDirectPhone',
        'subjectLine' => 'string',
        'memo' => 'string',
        'name' => 'string',
        'eMailAddress' => 'string',
        'alternateEmailAddress' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'requestType' => null,
        'mediaTypeCode' => null,
        'language' => null,
        'dialect' => null,
        'shipFromCompanyName' => null,
        'companyName' => null,
        'phone' => null,
        'subjectLine' => null,
        'memo' => null,
        'name' => null,
        'eMailAddress' => null,
        'alternateEmailAddress' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'requestType' => false,
        'mediaTypeCode' => false,
        'language' => false,
        'dialect' => false,
        'shipFromCompanyName' => false,
        'companyName' => false,
        'phone' => false,
        'subjectLine' => false,
        'memo' => false,
        'name' => false,
        'eMailAddress' => false,
        'alternateEmailAddress' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'requestType' => 'RequestType',
        'mediaTypeCode' => 'MediaTypeCode',
        'language' => 'Language',
        'dialect' => 'Dialect',
        'shipFromCompanyName' => 'ShipFromCompanyName',
        'companyName' => 'CompanyName',
        'phone' => 'Phone',
        'subjectLine' => 'SubjectLine',
        'memo' => 'Memo',
        'name' => 'Name',
        'eMailAddress' => 'EMailAddress',
        'alternateEmailAddress' => 'AlternateEmailAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'requestType' => 'setRequestType',
        'mediaTypeCode' => 'setMediaTypeCode',
        'language' => 'setLanguage',
        'dialect' => 'setDialect',
        'shipFromCompanyName' => 'setShipFromCompanyName',
        'companyName' => 'setCompanyName',
        'phone' => 'setPhone',
        'subjectLine' => 'setSubjectLine',
        'memo' => 'setMemo',
        'name' => 'setName',
        'eMailAddress' => 'setEMailAddress',
        'alternateEmailAddress' => 'setAlternateEmailAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'requestType' => 'getRequestType',
        'mediaTypeCode' => 'getMediaTypeCode',
        'language' => 'getLanguage',
        'dialect' => 'getDialect',
        'shipFromCompanyName' => 'getShipFromCompanyName',
        'companyName' => 'getCompanyName',
        'phone' => 'getPhone',
        'subjectLine' => 'getSubjectLine',
        'memo' => 'getMemo',
        'name' => 'getName',
        'eMailAddress' => 'getEMailAddress',
        'alternateEmailAddress' => 'getAlternateEmailAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REQUEST_TYPE__001 = '001';
    public const REQUEST_TYPE__002 = '002';
    public const REQUEST_TYPE__003 = '003';
    public const MEDIA_TYPE_CODE__03 = '03';
    public const MEDIA_TYPE_CODE__04 = '04';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestTypeAllowableValues()
    {
        return [
            self::REQUEST_TYPE__001,
            self::REQUEST_TYPE__002,
            self::REQUEST_TYPE__003,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediaTypeCodeAllowableValues()
    {
        return [
            self::MEDIA_TYPE_CODE__03,
            self::MEDIA_TYPE_CODE__04,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('requestType', $data ?? [], null);
        $this->setIfExists('mediaTypeCode', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('dialect', $data ?? [], null);
        $this->setIfExists('shipFromCompanyName', $data ?? [], null);
        $this->setIfExists('companyName', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('subjectLine', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('eMailAddress', $data ?? [], null);
        $this->setIfExists('alternateEmailAddress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!is_null($this->container['requestType']) && !in_array($this->container['requestType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'requestType', must be one of '%s'",
                $this->container['requestType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMediaTypeCodeAllowableValues();
        if (!is_null($this->container['mediaTypeCode']) && !in_array($this->container['mediaTypeCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mediaTypeCode', must be one of '%s'",
                $this->container['mediaTypeCode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['language']) && !preg_match("/^[A-Z]{3}$/", $this->container['language'])) {
            $invalidProperties[] = "invalid value for 'language', must be conform to the pattern /^[A-Z]{3}$/.";
        }

        if (!is_null($this->container['dialect']) && !preg_match("/^[A-Z0-9]{2}$/", $this->container['dialect'])) {
            $invalidProperties[] = "invalid value for 'dialect', must be conform to the pattern /^[A-Z0-9]{2}$/.";
        }

        if (!is_null($this->container['shipFromCompanyName']) && (mb_strlen($this->container['shipFromCompanyName']) > 35)) {
            $invalidProperties[] = "invalid value for 'shipFromCompanyName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['companyName']) && (mb_strlen($this->container['companyName']) > 35)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['subjectLine']) && (mb_strlen($this->container['subjectLine']) > 75)) {
            $invalidProperties[] = "invalid value for 'subjectLine', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) > 150)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if ($this->container['eMailAddress'] === null) {
            $invalidProperties[] = "'eMailAddress' can't be null";
        }
        if ((mb_strlen($this->container['eMailAddress']) > 50)) {
            $invalidProperties[] = "invalid value for 'eMailAddress', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['eMailAddress']) < 1)) {
            $invalidProperties[] = "invalid value for 'eMailAddress', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/", $this->container['eMailAddress'])) {
            $invalidProperties[] = "invalid value for 'eMailAddress', must be conform to the pattern /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.";
        }

        if (!is_null($this->container['alternateEmailAddress']) && (mb_strlen($this->container['alternateEmailAddress']) > 50)) {
            $invalidProperties[] = "invalid value for 'alternateEmailAddress', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets requestType
     *
     * @return string|null
     */
    public function getRequestType()
    {
        return $this->container['requestType'];
    }

    /**
     * Sets requestType
     *
     * @param string|null $requestType The type of notification request.  Valid values are:  - 001 = QV Ship Notification - 002 = QV Delivery Notification - 003 = QV Exception Notification
     *
     * @return self
     */
    public function setRequestType($requestType)
    {
        if (is_null($requestType)) {
            throw new \InvalidArgumentException('non-nullable requestType cannot be null');
        }
        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!in_array($requestType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'requestType', must be one of '%s'",
                    $requestType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['requestType'] = $requestType;

        return $this;
    }

    /**
     * Gets mediaTypeCode
     *
     * @return string|null
     */
    public function getMediaTypeCode()
    {
        return $this->container['mediaTypeCode'];
    }

    /**
     * Sets mediaTypeCode
     *
     * @param string|null $mediaTypeCode The media type code for the notification.  Valid values are:  - 03 = Email - 04 = Fax
     *
     * @return self
     */
    public function setMediaTypeCode($mediaTypeCode)
    {
        if (is_null($mediaTypeCode)) {
            throw new \InvalidArgumentException('non-nullable mediaTypeCode cannot be null');
        }
        $allowedValues = $this->getMediaTypeCodeAllowableValues();
        if (!in_array($mediaTypeCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mediaTypeCode', must be one of '%s'",
                    $mediaTypeCode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mediaTypeCode'] = $mediaTypeCode;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language The language for the notification.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }

        if ((!preg_match("/^[A-Z]{3}$/", ObjectSerializer::toString($language)))) {
            throw new \InvalidArgumentException("invalid value for \$language when calling TradeDirectNotificationBeforeDelivery., must conform to the pattern /^[A-Z]{3}$/.");
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets dialect
     *
     * @return string|null
     */
    public function getDialect()
    {
        return $this->container['dialect'];
    }

    /**
     * Sets dialect
     *
     * @param string|null $dialect The dialect for the notification.
     *
     * @return self
     */
    public function setDialect($dialect)
    {
        if (is_null($dialect)) {
            throw new \InvalidArgumentException('non-nullable dialect cannot be null');
        }

        if ((!preg_match("/^[A-Z0-9]{2}$/", ObjectSerializer::toString($dialect)))) {
            throw new \InvalidArgumentException("invalid value for \$dialect when calling TradeDirectNotificationBeforeDelivery., must conform to the pattern /^[A-Z0-9]{2}$/.");
        }

        $this->container['dialect'] = $dialect;

        return $this;
    }

    /**
     * Gets shipFromCompanyName
     *
     * @return string|null
     */
    public function getShipFromCompanyName()
    {
        return $this->container['shipFromCompanyName'];
    }

    /**
     * Sets shipFromCompanyName
     *
     * @param string|null $shipFromCompanyName The name of the company for the ship from address.
     *
     * @return self
     */
    public function setShipFromCompanyName($shipFromCompanyName)
    {
        if (is_null($shipFromCompanyName)) {
            throw new \InvalidArgumentException('non-nullable shipFromCompanyName cannot be null');
        }
        if ((mb_strlen($shipFromCompanyName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $shipFromCompanyName when calling TradeDirectNotificationBeforeDelivery., must be smaller than or equal to 35.');
        }

        $this->container['shipFromCompanyName'] = $shipFromCompanyName;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string|null $companyName The name of the company for the notification.
     *
     * @return self
     */
    public function setCompanyName($companyName)
    {
        if (is_null($companyName)) {
            throw new \InvalidArgumentException('non-nullable companyName cannot be null');
        }
        if ((mb_strlen($companyName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling TradeDirectNotificationBeforeDelivery., must be smaller than or equal to 35.');
        }

        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPIClientUPSShipping\Model\TradeDirectPhone|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPIClientUPSShipping\Model\TradeDirectPhone|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets subjectLine
     *
     * @return string|null
     */
    public function getSubjectLine()
    {
        return $this->container['subjectLine'];
    }

    /**
     * Sets subjectLine
     *
     * @param string|null $subjectLine Subject line for the notification.
     *
     * @return self
     */
    public function setSubjectLine($subjectLine)
    {
        if (is_null($subjectLine)) {
            throw new \InvalidArgumentException('non-nullable subjectLine cannot be null');
        }
        if ((mb_strlen($subjectLine) > 75)) {
            throw new \InvalidArgumentException('invalid length for $subjectLine when calling TradeDirectNotificationBeforeDelivery., must be smaller than or equal to 75.');
        }

        $this->container['subjectLine'] = $subjectLine;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Memo for the notification.
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        if ((mb_strlen($memo) > 150)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling TradeDirectNotificationBeforeDelivery., must be smaller than or equal to 150.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the contact person for the notification.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling TradeDirectNotificationBeforeDelivery., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets eMailAddress
     *
     * @return string
     */
    public function getEMailAddress()
    {
        return $this->container['eMailAddress'];
    }

    /**
     * Sets eMailAddress
     *
     * @param string $eMailAddress Email address to send notification to.
     *
     * @return self
     */
    public function setEMailAddress($eMailAddress)
    {
        if (is_null($eMailAddress)) {
            throw new \InvalidArgumentException('non-nullable eMailAddress cannot be null');
        }
        if ((mb_strlen($eMailAddress) > 50)) {
            throw new \InvalidArgumentException('invalid length for $eMailAddress when calling TradeDirectNotificationBeforeDelivery., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($eMailAddress) < 1)) {
            throw new \InvalidArgumentException('invalid length for $eMailAddress when calling TradeDirectNotificationBeforeDelivery., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/", ObjectSerializer::toString($eMailAddress)))) {
            throw new \InvalidArgumentException("invalid value for \$eMailAddress when calling TradeDirectNotificationBeforeDelivery., must conform to the pattern /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.");
        }

        $this->container['eMailAddress'] = $eMailAddress;

        return $this;
    }

    /**
     * Gets alternateEmailAddress
     *
     * @return string|null
     */
    public function getAlternateEmailAddress()
    {
        return $this->container['alternateEmailAddress'];
    }

    /**
     * Sets alternateEmailAddress
     *
     * @param string|null $alternateEmailAddress Alternate email address for the notification.
     *
     * @return self
     */
    public function setAlternateEmailAddress($alternateEmailAddress)
    {
        if (is_null($alternateEmailAddress)) {
            throw new \InvalidArgumentException('non-nullable alternateEmailAddress cannot be null');
        }
        if ((mb_strlen($alternateEmailAddress) > 50)) {
            throw new \InvalidArgumentException('invalid length for $alternateEmailAddress when calling TradeDirectNotificationBeforeDelivery., must be smaller than or equal to 50.');
        }

        $this->container['alternateEmailAddress'] = $alternateEmailAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


