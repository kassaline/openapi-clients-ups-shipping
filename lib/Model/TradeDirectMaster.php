<?php
/**
 * TradeDirectMaster
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * TradeDirectMaster Class Doc Comment
 *
 * @category Class
 * @description A collection of small package and LTL/TL shipments that are transported by UPS from the customer to the destination CFS.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TradeDirectMaster implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TradeDirect_Master';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'soldToSameAsShipTo' => 'string',
        'soldTo' => '\OpenAPIClientUPSShipping\Model\MasterSoldTo',
        'pickup' => '\OpenAPIClientUPSShipping\Model\MasterPickup',
        'tradeComplianceDetails' => '\OpenAPIClientUPSShipping\Model\MasterTradeComplianceDetails',
        'uomType' => 'string',
        'notificationBeforeDelivery' => '\OpenAPIClientUPSShipping\Model\TradeDirectNotificationBeforeDelivery'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'soldToSameAsShipTo' => null,
        'soldTo' => null,
        'pickup' => null,
        'tradeComplianceDetails' => null,
        'uomType' => null,
        'notificationBeforeDelivery' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'soldToSameAsShipTo' => false,
        'soldTo' => false,
        'pickup' => false,
        'tradeComplianceDetails' => false,
        'uomType' => false,
        'notificationBeforeDelivery' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'soldToSameAsShipTo' => 'SoldToSameAsShipTo',
        'soldTo' => 'SoldTo',
        'pickup' => 'Pickup',
        'tradeComplianceDetails' => 'TradeComplianceDetails',
        'uomType' => 'UomType',
        'notificationBeforeDelivery' => 'NotificationBeforeDelivery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'soldToSameAsShipTo' => 'setSoldToSameAsShipTo',
        'soldTo' => 'setSoldTo',
        'pickup' => 'setPickup',
        'tradeComplianceDetails' => 'setTradeComplianceDetails',
        'uomType' => 'setUomType',
        'notificationBeforeDelivery' => 'setNotificationBeforeDelivery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'soldToSameAsShipTo' => 'getSoldToSameAsShipTo',
        'soldTo' => 'getSoldTo',
        'pickup' => 'getPickup',
        'tradeComplianceDetails' => 'getTradeComplianceDetails',
        'uomType' => 'getUomType',
        'notificationBeforeDelivery' => 'getNotificationBeforeDelivery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UOM_TYPE_IMPERIAL = 'Imperial';
    public const UOM_TYPE_METRIC = 'Metric';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUomTypeAllowableValues()
    {
        return [
            self::UOM_TYPE_IMPERIAL,
            self::UOM_TYPE_METRIC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('soldToSameAsShipTo', $data ?? [], null);
        $this->setIfExists('soldTo', $data ?? [], null);
        $this->setIfExists('pickup', $data ?? [], null);
        $this->setIfExists('tradeComplianceDetails', $data ?? [], null);
        $this->setIfExists('uomType', $data ?? [], null);
        $this->setIfExists('notificationBeforeDelivery', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uomType'] === null) {
            $invalidProperties[] = "'uomType' can't be null";
        }
        $allowedValues = $this->getUomTypeAllowableValues();
        if (!is_null($this->container['uomType']) && !in_array($this->container['uomType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'uomType', must be one of '%s'",
                $this->container['uomType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets soldToSameAsShipTo
     *
     * @return string|null
     */
    public function getSoldToSameAsShipTo()
    {
        return $this->container['soldToSameAsShipTo'];
    }

    /**
     * Sets soldToSameAsShipTo
     *
     * @param string|null $soldToSameAsShipTo If Present indicates the Sold to and Ship To are the same.
     *
     * @return self
     */
    public function setSoldToSameAsShipTo($soldToSameAsShipTo)
    {
        if (is_null($soldToSameAsShipTo)) {
            throw new \InvalidArgumentException('non-nullable soldToSameAsShipTo cannot be null');
        }


        $this->container['soldToSameAsShipTo'] = $soldToSameAsShipTo;

        return $this;
    }

    /**
     * Gets soldTo
     *
     * @return \OpenAPIClientUPSShipping\Model\MasterSoldTo|null
     */
    public function getSoldTo()
    {
        return $this->container['soldTo'];
    }

    /**
     * Sets soldTo
     *
     * @param \OpenAPIClientUPSShipping\Model\MasterSoldTo|null $soldTo soldTo
     *
     * @return self
     */
    public function setSoldTo($soldTo)
    {
        if (is_null($soldTo)) {
            throw new \InvalidArgumentException('non-nullable soldTo cannot be null');
        }
        $this->container['soldTo'] = $soldTo;

        return $this;
    }

    /**
     * Gets pickup
     *
     * @return \OpenAPIClientUPSShipping\Model\MasterPickup|null
     */
    public function getPickup()
    {
        return $this->container['pickup'];
    }

    /**
     * Sets pickup
     *
     * @param \OpenAPIClientUPSShipping\Model\MasterPickup|null $pickup pickup
     *
     * @return self
     */
    public function setPickup($pickup)
    {
        if (is_null($pickup)) {
            throw new \InvalidArgumentException('non-nullable pickup cannot be null');
        }
        $this->container['pickup'] = $pickup;

        return $this;
    }

    /**
     * Gets tradeComplianceDetails
     *
     * @return \OpenAPIClientUPSShipping\Model\MasterTradeComplianceDetails|null
     */
    public function getTradeComplianceDetails()
    {
        return $this->container['tradeComplianceDetails'];
    }

    /**
     * Sets tradeComplianceDetails
     *
     * @param \OpenAPIClientUPSShipping\Model\MasterTradeComplianceDetails|null $tradeComplianceDetails tradeComplianceDetails
     *
     * @return self
     */
    public function setTradeComplianceDetails($tradeComplianceDetails)
    {
        if (is_null($tradeComplianceDetails)) {
            throw new \InvalidArgumentException('non-nullable tradeComplianceDetails cannot be null');
        }
        $this->container['tradeComplianceDetails'] = $tradeComplianceDetails;

        return $this;
    }

    /**
     * Gets uomType
     *
     * @return string
     */
    public function getUomType()
    {
        return $this->container['uomType'];
    }

    /**
     * Sets uomType
     *
     * @param string $uomType The type of measurement used for the shipment. Imperial(lbs, in) & Metric(kgs, cm)  Valid values are:  - Imperial= This system of measurement uses units such as pounds (lbs) for weight and inches (in) for length.  - Metric = This system of measurement uses units such as kilograms (kgs) for weight and centimeters (cm) for length.
     *
     * @return self
     */
    public function setUomType($uomType)
    {
        if (is_null($uomType)) {
            throw new \InvalidArgumentException('non-nullable uomType cannot be null');
        }
        $allowedValues = $this->getUomTypeAllowableValues();
        if (!in_array($uomType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'uomType', must be one of '%s'",
                    $uomType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['uomType'] = $uomType;

        return $this;
    }

    /**
     * Gets notificationBeforeDelivery
     *
     * @return \OpenAPIClientUPSShipping\Model\TradeDirectNotificationBeforeDelivery|null
     */
    public function getNotificationBeforeDelivery()
    {
        return $this->container['notificationBeforeDelivery'];
    }

    /**
     * Sets notificationBeforeDelivery
     *
     * @param \OpenAPIClientUPSShipping\Model\TradeDirectNotificationBeforeDelivery|null $notificationBeforeDelivery notificationBeforeDelivery
     *
     * @return self
     */
    public function setNotificationBeforeDelivery($notificationBeforeDelivery)
    {
        if (is_null($notificationBeforeDelivery)) {
            throw new \InvalidArgumentException('non-nullable notificationBeforeDelivery cannot be null');
        }
        $this->container['notificationBeforeDelivery'] = $notificationBeforeDelivery;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


