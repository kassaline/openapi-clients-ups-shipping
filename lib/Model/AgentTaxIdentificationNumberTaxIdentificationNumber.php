<?php
/**
 * AgentTaxIdentificationNumberTaxIdentificationNumber
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * AgentTaxIdentificationNumberTaxIdentificationNumber Class Doc Comment
 *
 * @category Class
 * @description The value for flexibility and future extensibility of these Identification Numberrequirements,the recommendation is to support up to eight Identification Numbers per shipment party/role.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AgentTaxIdentificationNumberTaxIdentificationNumber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AgentTaxIdentificationNumber_TaxIdentificationNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'identificationNumber' => 'string',
        'iDNumberCustomerRole' => 'string',
        'iDNumberEncryptionIndicator' => 'string',
        'iDNumberIssuingCntryCd' => 'string',
        'iDNumberPurposeCode' => 'string',
        'iDNumberRequestingCntryCd' => 'string',
        'iDNumberTypeCode' => 'string',
        'includeIDNumberOnShippingBrokerageDocs' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'identificationNumber' => null,
        'iDNumberCustomerRole' => null,
        'iDNumberEncryptionIndicator' => null,
        'iDNumberIssuingCntryCd' => null,
        'iDNumberPurposeCode' => null,
        'iDNumberRequestingCntryCd' => null,
        'iDNumberTypeCode' => null,
        'includeIDNumberOnShippingBrokerageDocs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'identificationNumber' => false,
        'iDNumberCustomerRole' => false,
        'iDNumberEncryptionIndicator' => false,
        'iDNumberIssuingCntryCd' => false,
        'iDNumberPurposeCode' => false,
        'iDNumberRequestingCntryCd' => false,
        'iDNumberTypeCode' => false,
        'includeIDNumberOnShippingBrokerageDocs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identificationNumber' => 'IdentificationNumber',
        'iDNumberCustomerRole' => 'IDNumberCustomerRole',
        'iDNumberEncryptionIndicator' => 'IDNumberEncryptionIndicator',
        'iDNumberIssuingCntryCd' => 'IDNumberIssuingCntryCd',
        'iDNumberPurposeCode' => 'IDNumberPurposeCode',
        'iDNumberRequestingCntryCd' => 'IDNumberRequestingCntryCd',
        'iDNumberTypeCode' => 'IDNumberTypeCode',
        'includeIDNumberOnShippingBrokerageDocs' => 'IncludeIDNumberOnShippingBrokerageDocs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identificationNumber' => 'setIdentificationNumber',
        'iDNumberCustomerRole' => 'setIDNumberCustomerRole',
        'iDNumberEncryptionIndicator' => 'setIDNumberEncryptionIndicator',
        'iDNumberIssuingCntryCd' => 'setIDNumberIssuingCntryCd',
        'iDNumberPurposeCode' => 'setIDNumberPurposeCode',
        'iDNumberRequestingCntryCd' => 'setIDNumberRequestingCntryCd',
        'iDNumberTypeCode' => 'setIDNumberTypeCode',
        'includeIDNumberOnShippingBrokerageDocs' => 'setIncludeIDNumberOnShippingBrokerageDocs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identificationNumber' => 'getIdentificationNumber',
        'iDNumberCustomerRole' => 'getIDNumberCustomerRole',
        'iDNumberEncryptionIndicator' => 'getIDNumberEncryptionIndicator',
        'iDNumberIssuingCntryCd' => 'getIDNumberIssuingCntryCd',
        'iDNumberPurposeCode' => 'getIDNumberPurposeCode',
        'iDNumberRequestingCntryCd' => 'getIDNumberRequestingCntryCd',
        'iDNumberTypeCode' => 'getIDNumberTypeCode',
        'includeIDNumberOnShippingBrokerageDocs' => 'getIncludeIDNumberOnShippingBrokerageDocs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('identificationNumber', $data ?? [], null);
        $this->setIfExists('iDNumberCustomerRole', $data ?? [], null);
        $this->setIfExists('iDNumberEncryptionIndicator', $data ?? [], null);
        $this->setIfExists('iDNumberIssuingCntryCd', $data ?? [], null);
        $this->setIfExists('iDNumberPurposeCode', $data ?? [], null);
        $this->setIfExists('iDNumberRequestingCntryCd', $data ?? [], null);
        $this->setIfExists('iDNumberTypeCode', $data ?? [], null);
        $this->setIfExists('includeIDNumberOnShippingBrokerageDocs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['identificationNumber'] === null) {
            $invalidProperties[] = "'identificationNumber' can't be null";
        }
        if ($this->container['iDNumberCustomerRole'] === null) {
            $invalidProperties[] = "'iDNumberCustomerRole' can't be null";
        }
        if ($this->container['iDNumberEncryptionIndicator'] === null) {
            $invalidProperties[] = "'iDNumberEncryptionIndicator' can't be null";
        }
        if ($this->container['iDNumberPurposeCode'] === null) {
            $invalidProperties[] = "'iDNumberPurposeCode' can't be null";
        }
        if ($this->container['iDNumberTypeCode'] === null) {
            $invalidProperties[] = "'iDNumberTypeCode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets identificationNumber
     *
     * @return string
     */
    public function getIdentificationNumber()
    {
        return $this->container['identificationNumber'];
    }

    /**
     * Sets identificationNumber
     *
     * @param string $identificationNumber The code or number that a shipper or consignee has registered with a particular country’s authority for doing business, or for identification purposes.
     *
     * @return self
     */
    public function setIdentificationNumber($identificationNumber)
    {
        if (is_null($identificationNumber)) {
            throw new \InvalidArgumentException('non-nullable identificationNumber cannot be null');
        }
        $this->container['identificationNumber'] = $identificationNumber;

        return $this;
    }

    /**
     * Gets iDNumberCustomerRole
     *
     * @return string
     */
    public function getIDNumberCustomerRole()
    {
        return $this->container['iDNumberCustomerRole'];
    }

    /**
     * Sets iDNumberCustomerRole
     *
     * @param string $iDNumberCustomerRole A business or individual identification type description (Future Use).specifies the relationship of the customer/ID Number to the shipment  05 =importer Address, 06=Exporter Address  , 18=DeliverTo/Consignee/Reciever Address,  37= Shipper Address.
     *
     * @return self
     */
    public function setIDNumberCustomerRole($iDNumberCustomerRole)
    {
        if (is_null($iDNumberCustomerRole)) {
            throw new \InvalidArgumentException('non-nullable iDNumberCustomerRole cannot be null');
        }
        $this->container['iDNumberCustomerRole'] = $iDNumberCustomerRole;

        return $this;
    }

    /**
     * Gets iDNumberEncryptionIndicator
     *
     * @return string
     */
    public function getIDNumberEncryptionIndicator()
    {
        return $this->container['iDNumberEncryptionIndicator'];
    }

    /**
     * Sets iDNumberEncryptionIndicator
     *
     * @param string $iDNumberEncryptionIndicator to determine if decryption is required. 0 = Identification number is not  Encrypted 1 = Identification number is  Encrypted
     *
     * @return self
     */
    public function setIDNumberEncryptionIndicator($iDNumberEncryptionIndicator)
    {
        if (is_null($iDNumberEncryptionIndicator)) {
            throw new \InvalidArgumentException('non-nullable iDNumberEncryptionIndicator cannot be null');
        }
        $this->container['iDNumberEncryptionIndicator'] = $iDNumberEncryptionIndicator;

        return $this;
    }

    /**
     * Gets iDNumberIssuingCntryCd
     *
     * @return string|null
     */
    public function getIDNumberIssuingCntryCd()
    {
        return $this->container['iDNumberIssuingCntryCd'];
    }

    /**
     * Sets iDNumberIssuingCntryCd
     *
     * @param string|null $iDNumberIssuingCntryCd The ISO-defined country code of the country where the Identification Number was issued, when applicable (as per business requirements). Needed for certain types of Identification Numbers (e.g., Passport Number). Sample Values: 'ID' = Indonesia, 'VN' = Vietnam, 'DE' = Germany
     *
     * @return self
     */
    public function setIDNumberIssuingCntryCd($iDNumberIssuingCntryCd)
    {
        if (is_null($iDNumberIssuingCntryCd)) {
            throw new \InvalidArgumentException('non-nullable iDNumberIssuingCntryCd cannot be null');
        }
        $this->container['iDNumberIssuingCntryCd'] = $iDNumberIssuingCntryCd;

        return $this;
    }

    /**
     * Gets iDNumberPurposeCode
     *
     * @return string
     */
    public function getIDNumberPurposeCode()
    {
        return $this->container['iDNumberPurposeCode'];
    }

    /**
     * Sets iDNumberPurposeCode
     *
     * @param string $iDNumberPurposeCode Code that specifies the purpose of the Identification Number. For all tax ID that are not EORI = ‘01’ Valid values: 00/ Spaces = Unknown 01= Customs/Brokerage (Default) 02= Customs/Brokerage EORI 99= Other
     *
     * @return self
     */
    public function setIDNumberPurposeCode($iDNumberPurposeCode)
    {
        if (is_null($iDNumberPurposeCode)) {
            throw new \InvalidArgumentException('non-nullable iDNumberPurposeCode cannot be null');
        }
        $this->container['iDNumberPurposeCode'] = $iDNumberPurposeCode;

        return $this;
    }

    /**
     * Gets iDNumberRequestingCntryCd
     *
     * @return string|null
     */
    public function getIDNumberRequestingCntryCd()
    {
        return $this->container['iDNumberRequestingCntryCd'];
    }

    /**
     * Sets iDNumberRequestingCntryCd
     *
     * @param string|null $iDNumberRequestingCntryCd The ISO-defined country code of the country whose regulatory agency is requesting the Identification Number. Typically for Import, the Consignee ID is requested by the Ship To country For export, the Shipper ID is requested by the Ship From country.  Required when a country (e.g., Origin country, Destination country) is requesting an ID Number for a shipment.
     *
     * @return self
     */
    public function setIDNumberRequestingCntryCd($iDNumberRequestingCntryCd)
    {
        if (is_null($iDNumberRequestingCntryCd)) {
            throw new \InvalidArgumentException('non-nullable iDNumberRequestingCntryCd cannot be null');
        }
        $this->container['iDNumberRequestingCntryCd'] = $iDNumberRequestingCntryCd;

        return $this;
    }

    /**
     * Gets iDNumberTypeCode
     *
     * @return string
     */
    public function getIDNumberTypeCode()
    {
        return $this->container['iDNumberTypeCode'];
    }

    /**
     * Sets iDNumberTypeCode
     *
     * @param string $iDNumberTypeCode Valid Values are: 0000 = Unknown IDNumberTypeCode equal to ‘0000’ (unknown) is to be used when an ‘ID Number Type’ is not applicable, or when the front-end/client system cannot determine the type of IdentificationNumber (for any reason). 0001 = Exporter Tax ID Number 0002 = Importer Tax ID Number or EORI Number – When IdentificationNumberPurposeCode = 02 0005 = Personal Tax ID Number 1001 = Other / Free Form 1002 = Company/Business Tax ID Number 1003 = National ID Number 1004 = Passport Number 1005 = Personal ID Number 1006 = Phone Number
     *
     * @return self
     */
    public function setIDNumberTypeCode($iDNumberTypeCode)
    {
        if (is_null($iDNumberTypeCode)) {
            throw new \InvalidArgumentException('non-nullable iDNumberTypeCode cannot be null');
        }
        $this->container['iDNumberTypeCode'] = $iDNumberTypeCode;

        return $this;
    }

    /**
     * Gets includeIDNumberOnShippingBrokerageDocs
     *
     * @return string|null
     */
    public function getIncludeIDNumberOnShippingBrokerageDocs()
    {
        return $this->container['includeIDNumberOnShippingBrokerageDocs'];
    }

    /**
     * Sets includeIDNumberOnShippingBrokerageDocs
     *
     * @param string|null $includeIDNumberOnShippingBrokerageDocs field to determine if the Identification Number should be excluded from Shipping/Brokerage documents (not be passed to Document Services)  ‘00’ -> Do Not include 01-> Include.
     *
     * @return self
     */
    public function setIncludeIDNumberOnShippingBrokerageDocs($includeIDNumberOnShippingBrokerageDocs)
    {
        if (is_null($includeIDNumberOnShippingBrokerageDocs)) {
            throw new \InvalidArgumentException('non-nullable includeIDNumberOnShippingBrokerageDocs cannot be null');
        }
        $this->container['includeIDNumberOnShippingBrokerageDocs'] = $includeIDNumberOnShippingBrokerageDocs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


