<?php
/**
 * ShipmentShipmentServiceOptions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ShipmentShipmentServiceOptions Class Doc Comment
 *
 * @category Class
 * @description Container for Shipment Service Options.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentShipmentServiceOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment_ShipmentServiceOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'saturdayDeliveryIndicator' => 'string',
        'saturdayPickupIndicator' => 'string',
        'cOD' => '\OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsCOD',
        'accessPointCOD' => '\OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsAccessPointCOD',
        'deliverToAddresseeOnlyIndicator' => 'string',
        'directDeliveryOnlyIndicator' => 'string',
        'notification' => '\OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsNotification[]',
        'labelDelivery' => '\OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsLabelDelivery',
        'internationalForms' => '\OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsInternationalForms',
        'deliveryConfirmation' => '\OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsDeliveryConfirmation',
        'returnOfDocumentIndicator' => 'string',
        'importControlIndicator' => 'string',
        'labelMethod' => '\OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsLabelMethod',
        'commercialInvoiceRemovalIndicator' => 'string',
        'uPScarbonneutralIndicator' => 'string',
        'preAlertNotification' => '\OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsPreAlertNotification[]',
        'exchangeForwardIndicator' => 'string',
        'holdForPickupIndicator' => 'string',
        'dropoffAtUPSFacilityIndicator' => 'string',
        'liftGateForPickUpIndicator' => 'string',
        'liftGateForDeliveryIndicator' => 'string',
        'sDLShipmentIndicator' => 'string',
        'ePRAReleaseCode' => 'string',
        'restrictedArticles' => '\OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsRestrictedArticles',
        'insideDelivery' => 'string',
        'itemDisposal' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'saturdayDeliveryIndicator' => null,
        'saturdayPickupIndicator' => null,
        'cOD' => null,
        'accessPointCOD' => null,
        'deliverToAddresseeOnlyIndicator' => null,
        'directDeliveryOnlyIndicator' => null,
        'notification' => null,
        'labelDelivery' => null,
        'internationalForms' => null,
        'deliveryConfirmation' => null,
        'returnOfDocumentIndicator' => null,
        'importControlIndicator' => null,
        'labelMethod' => null,
        'commercialInvoiceRemovalIndicator' => null,
        'uPScarbonneutralIndicator' => null,
        'preAlertNotification' => null,
        'exchangeForwardIndicator' => null,
        'holdForPickupIndicator' => null,
        'dropoffAtUPSFacilityIndicator' => null,
        'liftGateForPickUpIndicator' => null,
        'liftGateForDeliveryIndicator' => null,
        'sDLShipmentIndicator' => null,
        'ePRAReleaseCode' => null,
        'restrictedArticles' => null,
        'insideDelivery' => null,
        'itemDisposal' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'saturdayDeliveryIndicator' => false,
        'saturdayPickupIndicator' => false,
        'cOD' => false,
        'accessPointCOD' => false,
        'deliverToAddresseeOnlyIndicator' => false,
        'directDeliveryOnlyIndicator' => false,
        'notification' => false,
        'labelDelivery' => false,
        'internationalForms' => false,
        'deliveryConfirmation' => false,
        'returnOfDocumentIndicator' => false,
        'importControlIndicator' => false,
        'labelMethod' => false,
        'commercialInvoiceRemovalIndicator' => false,
        'uPScarbonneutralIndicator' => false,
        'preAlertNotification' => false,
        'exchangeForwardIndicator' => false,
        'holdForPickupIndicator' => false,
        'dropoffAtUPSFacilityIndicator' => false,
        'liftGateForPickUpIndicator' => false,
        'liftGateForDeliveryIndicator' => false,
        'sDLShipmentIndicator' => false,
        'ePRAReleaseCode' => false,
        'restrictedArticles' => false,
        'insideDelivery' => false,
        'itemDisposal' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'saturdayDeliveryIndicator' => 'SaturdayDeliveryIndicator',
        'saturdayPickupIndicator' => 'SaturdayPickupIndicator',
        'cOD' => 'COD',
        'accessPointCOD' => 'AccessPointCOD',
        'deliverToAddresseeOnlyIndicator' => 'DeliverToAddresseeOnlyIndicator',
        'directDeliveryOnlyIndicator' => 'DirectDeliveryOnlyIndicator',
        'notification' => 'Notification',
        'labelDelivery' => 'LabelDelivery',
        'internationalForms' => 'InternationalForms',
        'deliveryConfirmation' => 'DeliveryConfirmation',
        'returnOfDocumentIndicator' => 'ReturnOfDocumentIndicator',
        'importControlIndicator' => 'ImportControlIndicator',
        'labelMethod' => 'LabelMethod',
        'commercialInvoiceRemovalIndicator' => 'CommercialInvoiceRemovalIndicator',
        'uPScarbonneutralIndicator' => 'UPScarbonneutralIndicator',
        'preAlertNotification' => 'PreAlertNotification',
        'exchangeForwardIndicator' => 'ExchangeForwardIndicator',
        'holdForPickupIndicator' => 'HoldForPickupIndicator',
        'dropoffAtUPSFacilityIndicator' => 'DropoffAtUPSFacilityIndicator',
        'liftGateForPickUpIndicator' => 'LiftGateForPickUpIndicator',
        'liftGateForDeliveryIndicator' => 'LiftGateForDeliveryIndicator',
        'sDLShipmentIndicator' => 'SDLShipmentIndicator',
        'ePRAReleaseCode' => 'EPRAReleaseCode',
        'restrictedArticles' => 'RestrictedArticles',
        'insideDelivery' => 'InsideDelivery',
        'itemDisposal' => 'ItemDisposal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'saturdayDeliveryIndicator' => 'setSaturdayDeliveryIndicator',
        'saturdayPickupIndicator' => 'setSaturdayPickupIndicator',
        'cOD' => 'setCOD',
        'accessPointCOD' => 'setAccessPointCOD',
        'deliverToAddresseeOnlyIndicator' => 'setDeliverToAddresseeOnlyIndicator',
        'directDeliveryOnlyIndicator' => 'setDirectDeliveryOnlyIndicator',
        'notification' => 'setNotification',
        'labelDelivery' => 'setLabelDelivery',
        'internationalForms' => 'setInternationalForms',
        'deliveryConfirmation' => 'setDeliveryConfirmation',
        'returnOfDocumentIndicator' => 'setReturnOfDocumentIndicator',
        'importControlIndicator' => 'setImportControlIndicator',
        'labelMethod' => 'setLabelMethod',
        'commercialInvoiceRemovalIndicator' => 'setCommercialInvoiceRemovalIndicator',
        'uPScarbonneutralIndicator' => 'setUPScarbonneutralIndicator',
        'preAlertNotification' => 'setPreAlertNotification',
        'exchangeForwardIndicator' => 'setExchangeForwardIndicator',
        'holdForPickupIndicator' => 'setHoldForPickupIndicator',
        'dropoffAtUPSFacilityIndicator' => 'setDropoffAtUPSFacilityIndicator',
        'liftGateForPickUpIndicator' => 'setLiftGateForPickUpIndicator',
        'liftGateForDeliveryIndicator' => 'setLiftGateForDeliveryIndicator',
        'sDLShipmentIndicator' => 'setSDLShipmentIndicator',
        'ePRAReleaseCode' => 'setEPRAReleaseCode',
        'restrictedArticles' => 'setRestrictedArticles',
        'insideDelivery' => 'setInsideDelivery',
        'itemDisposal' => 'setItemDisposal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'saturdayDeliveryIndicator' => 'getSaturdayDeliveryIndicator',
        'saturdayPickupIndicator' => 'getSaturdayPickupIndicator',
        'cOD' => 'getCOD',
        'accessPointCOD' => 'getAccessPointCOD',
        'deliverToAddresseeOnlyIndicator' => 'getDeliverToAddresseeOnlyIndicator',
        'directDeliveryOnlyIndicator' => 'getDirectDeliveryOnlyIndicator',
        'notification' => 'getNotification',
        'labelDelivery' => 'getLabelDelivery',
        'internationalForms' => 'getInternationalForms',
        'deliveryConfirmation' => 'getDeliveryConfirmation',
        'returnOfDocumentIndicator' => 'getReturnOfDocumentIndicator',
        'importControlIndicator' => 'getImportControlIndicator',
        'labelMethod' => 'getLabelMethod',
        'commercialInvoiceRemovalIndicator' => 'getCommercialInvoiceRemovalIndicator',
        'uPScarbonneutralIndicator' => 'getUPScarbonneutralIndicator',
        'preAlertNotification' => 'getPreAlertNotification',
        'exchangeForwardIndicator' => 'getExchangeForwardIndicator',
        'holdForPickupIndicator' => 'getHoldForPickupIndicator',
        'dropoffAtUPSFacilityIndicator' => 'getDropoffAtUPSFacilityIndicator',
        'liftGateForPickUpIndicator' => 'getLiftGateForPickUpIndicator',
        'liftGateForDeliveryIndicator' => 'getLiftGateForDeliveryIndicator',
        'sDLShipmentIndicator' => 'getSDLShipmentIndicator',
        'ePRAReleaseCode' => 'getEPRAReleaseCode',
        'restrictedArticles' => 'getRestrictedArticles',
        'insideDelivery' => 'getInsideDelivery',
        'itemDisposal' => 'getItemDisposal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('saturdayDeliveryIndicator', $data ?? [], null);
        $this->setIfExists('saturdayPickupIndicator', $data ?? [], null);
        $this->setIfExists('cOD', $data ?? [], null);
        $this->setIfExists('accessPointCOD', $data ?? [], null);
        $this->setIfExists('deliverToAddresseeOnlyIndicator', $data ?? [], null);
        $this->setIfExists('directDeliveryOnlyIndicator', $data ?? [], null);
        $this->setIfExists('notification', $data ?? [], null);
        $this->setIfExists('labelDelivery', $data ?? [], null);
        $this->setIfExists('internationalForms', $data ?? [], null);
        $this->setIfExists('deliveryConfirmation', $data ?? [], null);
        $this->setIfExists('returnOfDocumentIndicator', $data ?? [], null);
        $this->setIfExists('importControlIndicator', $data ?? [], null);
        $this->setIfExists('labelMethod', $data ?? [], null);
        $this->setIfExists('commercialInvoiceRemovalIndicator', $data ?? [], null);
        $this->setIfExists('uPScarbonneutralIndicator', $data ?? [], null);
        $this->setIfExists('preAlertNotification', $data ?? [], null);
        $this->setIfExists('exchangeForwardIndicator', $data ?? [], null);
        $this->setIfExists('holdForPickupIndicator', $data ?? [], null);
        $this->setIfExists('dropoffAtUPSFacilityIndicator', $data ?? [], null);
        $this->setIfExists('liftGateForPickUpIndicator', $data ?? [], null);
        $this->setIfExists('liftGateForDeliveryIndicator', $data ?? [], null);
        $this->setIfExists('sDLShipmentIndicator', $data ?? [], null);
        $this->setIfExists('ePRAReleaseCode', $data ?? [], null);
        $this->setIfExists('restrictedArticles', $data ?? [], null);
        $this->setIfExists('insideDelivery', $data ?? [], null);
        $this->setIfExists('itemDisposal', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ePRAReleaseCode']) && (mb_strlen($this->container['ePRAReleaseCode']) > 6)) {
            $invalidProperties[] = "invalid value for 'ePRAReleaseCode', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['ePRAReleaseCode']) && (mb_strlen($this->container['ePRAReleaseCode']) < 4)) {
            $invalidProperties[] = "invalid value for 'ePRAReleaseCode', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['insideDelivery']) && (mb_strlen($this->container['insideDelivery']) > 2)) {
            $invalidProperties[] = "invalid value for 'insideDelivery', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['insideDelivery']) && (mb_strlen($this->container['insideDelivery']) < 2)) {
            $invalidProperties[] = "invalid value for 'insideDelivery', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets saturdayDeliveryIndicator
     *
     * @return string|null
     */
    public function getSaturdayDeliveryIndicator()
    {
        return $this->container['saturdayDeliveryIndicator'];
    }

    /**
     * Sets saturdayDeliveryIndicator
     *
     * @param string|null $saturdayDeliveryIndicator Saturday delivery indicator. The presence indicates Saturday delivery is requested and the absence indicates Saturday delivery is not requested.  This is an empty tag, any value inside is ignored.
     *
     * @return self
     */
    public function setSaturdayDeliveryIndicator($saturdayDeliveryIndicator)
    {
        if (is_null($saturdayDeliveryIndicator)) {
            throw new \InvalidArgumentException('non-nullable saturdayDeliveryIndicator cannot be null');
        }


        $this->container['saturdayDeliveryIndicator'] = $saturdayDeliveryIndicator;

        return $this;
    }

    /**
     * Gets saturdayPickupIndicator
     *
     * @return string|null
     */
    public function getSaturdayPickupIndicator()
    {
        return $this->container['saturdayPickupIndicator'];
    }

    /**
     * Sets saturdayPickupIndicator
     *
     * @param string|null $saturdayPickupIndicator Saturday pickup indicator. The presence indicates Saturday pickup is requested and the absence indicates Saturday pickup is not requested.  This is an empty tag, any value inside is ignored.
     *
     * @return self
     */
    public function setSaturdayPickupIndicator($saturdayPickupIndicator)
    {
        if (is_null($saturdayPickupIndicator)) {
            throw new \InvalidArgumentException('non-nullable saturdayPickupIndicator cannot be null');
        }


        $this->container['saturdayPickupIndicator'] = $saturdayPickupIndicator;

        return $this;
    }

    /**
     * Gets cOD
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsCOD|null
     */
    public function getCOD()
    {
        return $this->container['cOD'];
    }

    /**
     * Sets cOD
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsCOD|null $cOD cOD
     *
     * @return self
     */
    public function setCOD($cOD)
    {
        if (is_null($cOD)) {
            throw new \InvalidArgumentException('non-nullable cOD cannot be null');
        }
        $this->container['cOD'] = $cOD;

        return $this;
    }

    /**
     * Gets accessPointCOD
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsAccessPointCOD|null
     */
    public function getAccessPointCOD()
    {
        return $this->container['accessPointCOD'];
    }

    /**
     * Sets accessPointCOD
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsAccessPointCOD|null $accessPointCOD accessPointCOD
     *
     * @return self
     */
    public function setAccessPointCOD($accessPointCOD)
    {
        if (is_null($accessPointCOD)) {
            throw new \InvalidArgumentException('non-nullable accessPointCOD cannot be null');
        }
        $this->container['accessPointCOD'] = $accessPointCOD;

        return $this;
    }

    /**
     * Gets deliverToAddresseeOnlyIndicator
     *
     * @return string|null
     */
    public function getDeliverToAddresseeOnlyIndicator()
    {
        return $this->container['deliverToAddresseeOnlyIndicator'];
    }

    /**
     * Sets deliverToAddresseeOnlyIndicator
     *
     * @param string|null $deliverToAddresseeOnlyIndicator Presence/Absence Indicator. Any value inside is ignored. DeliverToAddresseeOnlyIndicator is shipper specified restriction that requires the addressee to be the one who takes final delivery of the \"Hold For PickUp at UPS Access Point\" package. Presence of indicator means shipper restriction will apply to the shipment.  Only valid for Shipment Indication type \"01 - Hold For PickUp at UPS Access Point\".
     *
     * @return self
     */
    public function setDeliverToAddresseeOnlyIndicator($deliverToAddresseeOnlyIndicator)
    {
        if (is_null($deliverToAddresseeOnlyIndicator)) {
            throw new \InvalidArgumentException('non-nullable deliverToAddresseeOnlyIndicator cannot be null');
        }


        $this->container['deliverToAddresseeOnlyIndicator'] = $deliverToAddresseeOnlyIndicator;

        return $this;
    }

    /**
     * Gets directDeliveryOnlyIndicator
     *
     * @return string|null
     */
    public function getDirectDeliveryOnlyIndicator()
    {
        return $this->container['directDeliveryOnlyIndicator'];
    }

    /**
     * Sets directDeliveryOnlyIndicator
     *
     * @param string|null $directDeliveryOnlyIndicator Presence/Absence Indicator. Any value inside is ignored. Direct Delivery Only (DDO) accessorial in a request would ensure that delivery is made only to the ship to address on the shipping label. This accessorial is not valid with Shipment Indication Type \"01 - Hold For Pickup At UPS Access Point\" and \"02 - UPS Access Point™ Delivery\".
     *
     * @return self
     */
    public function setDirectDeliveryOnlyIndicator($directDeliveryOnlyIndicator)
    {
        if (is_null($directDeliveryOnlyIndicator)) {
            throw new \InvalidArgumentException('non-nullable directDeliveryOnlyIndicator cannot be null');
        }


        $this->container['directDeliveryOnlyIndicator'] = $directDeliveryOnlyIndicator;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsNotification[]|null
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsNotification[]|null $notification notification
     *
     * @return self
     */
    public function setNotification($notification)
    {
        if (is_null($notification)) {
            throw new \InvalidArgumentException('non-nullable notification cannot be null');
        }


        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets labelDelivery
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsLabelDelivery|null
     */
    public function getLabelDelivery()
    {
        return $this->container['labelDelivery'];
    }

    /**
     * Sets labelDelivery
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsLabelDelivery|null $labelDelivery labelDelivery
     *
     * @return self
     */
    public function setLabelDelivery($labelDelivery)
    {
        if (is_null($labelDelivery)) {
            throw new \InvalidArgumentException('non-nullable labelDelivery cannot be null');
        }
        $this->container['labelDelivery'] = $labelDelivery;

        return $this;
    }

    /**
     * Gets internationalForms
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsInternationalForms|null
     */
    public function getInternationalForms()
    {
        return $this->container['internationalForms'];
    }

    /**
     * Sets internationalForms
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsInternationalForms|null $internationalForms internationalForms
     *
     * @return self
     */
    public function setInternationalForms($internationalForms)
    {
        if (is_null($internationalForms)) {
            throw new \InvalidArgumentException('non-nullable internationalForms cannot be null');
        }
        $this->container['internationalForms'] = $internationalForms;

        return $this;
    }

    /**
     * Gets deliveryConfirmation
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsDeliveryConfirmation|null
     */
    public function getDeliveryConfirmation()
    {
        return $this->container['deliveryConfirmation'];
    }

    /**
     * Sets deliveryConfirmation
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsDeliveryConfirmation|null $deliveryConfirmation deliveryConfirmation
     *
     * @return self
     */
    public function setDeliveryConfirmation($deliveryConfirmation)
    {
        if (is_null($deliveryConfirmation)) {
            throw new \InvalidArgumentException('non-nullable deliveryConfirmation cannot be null');
        }
        $this->container['deliveryConfirmation'] = $deliveryConfirmation;

        return $this;
    }

    /**
     * Gets returnOfDocumentIndicator
     *
     * @return string|null
     */
    public function getReturnOfDocumentIndicator()
    {
        return $this->container['returnOfDocumentIndicator'];
    }

    /**
     * Sets returnOfDocumentIndicator
     *
     * @param string|null $returnOfDocumentIndicator The flag indicates the ReturnOfDocument accessorial has been requested.  Valid for Poland to Poland forward shipment only.
     *
     * @return self
     */
    public function setReturnOfDocumentIndicator($returnOfDocumentIndicator)
    {
        if (is_null($returnOfDocumentIndicator)) {
            throw new \InvalidArgumentException('non-nullable returnOfDocumentIndicator cannot be null');
        }


        $this->container['returnOfDocumentIndicator'] = $returnOfDocumentIndicator;

        return $this;
    }

    /**
     * Gets importControlIndicator
     *
     * @return string|null
     */
    public function getImportControlIndicator()
    {
        return $this->container['importControlIndicator'];
    }

    /**
     * Sets importControlIndicator
     *
     * @param string|null $importControlIndicator Indicates that the Shipment is an ImportControl shipment.
     *
     * @return self
     */
    public function setImportControlIndicator($importControlIndicator)
    {
        if (is_null($importControlIndicator)) {
            throw new \InvalidArgumentException('non-nullable importControlIndicator cannot be null');
        }


        $this->container['importControlIndicator'] = $importControlIndicator;

        return $this;
    }

    /**
     * Gets labelMethod
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsLabelMethod|null
     */
    public function getLabelMethod()
    {
        return $this->container['labelMethod'];
    }

    /**
     * Sets labelMethod
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsLabelMethod|null $labelMethod labelMethod
     *
     * @return self
     */
    public function setLabelMethod($labelMethod)
    {
        if (is_null($labelMethod)) {
            throw new \InvalidArgumentException('non-nullable labelMethod cannot be null');
        }
        $this->container['labelMethod'] = $labelMethod;

        return $this;
    }

    /**
     * Gets commercialInvoiceRemovalIndicator
     *
     * @return string|null
     */
    public function getCommercialInvoiceRemovalIndicator()
    {
        return $this->container['commercialInvoiceRemovalIndicator'];
    }

    /**
     * Sets commercialInvoiceRemovalIndicator
     *
     * @param string|null $commercialInvoiceRemovalIndicator CommercialInvoiceRemovalIndicator allows a shipper to dictate UPS to remove the Commercial Invoice from the user's shipment before the shipment is delivered to the ultimate consignee.
     *
     * @return self
     */
    public function setCommercialInvoiceRemovalIndicator($commercialInvoiceRemovalIndicator)
    {
        if (is_null($commercialInvoiceRemovalIndicator)) {
            throw new \InvalidArgumentException('non-nullable commercialInvoiceRemovalIndicator cannot be null');
        }


        $this->container['commercialInvoiceRemovalIndicator'] = $commercialInvoiceRemovalIndicator;

        return $this;
    }

    /**
     * Gets uPScarbonneutralIndicator
     *
     * @return string|null
     */
    public function getUPScarbonneutralIndicator()
    {
        return $this->container['uPScarbonneutralIndicator'];
    }

    /**
     * Sets uPScarbonneutralIndicator
     *
     * @param string|null $uPScarbonneutralIndicator UPS carbon neutral indicator presence at shipment level is required to create carbon neutral Shipments.
     *
     * @return self
     */
    public function setUPScarbonneutralIndicator($uPScarbonneutralIndicator)
    {
        if (is_null($uPScarbonneutralIndicator)) {
            throw new \InvalidArgumentException('non-nullable uPScarbonneutralIndicator cannot be null');
        }


        $this->container['uPScarbonneutralIndicator'] = $uPScarbonneutralIndicator;

        return $this;
    }

    /**
     * Gets preAlertNotification
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsPreAlertNotification[]|null
     */
    public function getPreAlertNotification()
    {
        return $this->container['preAlertNotification'];
    }

    /**
     * Sets preAlertNotification
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsPreAlertNotification[]|null $preAlertNotification preAlertNotification
     *
     * @return self
     */
    public function setPreAlertNotification($preAlertNotification)
    {
        if (is_null($preAlertNotification)) {
            throw new \InvalidArgumentException('non-nullable preAlertNotification cannot be null');
        }
        $this->container['preAlertNotification'] = $preAlertNotification;

        return $this;
    }

    /**
     * Gets exchangeForwardIndicator
     *
     * @return string|null
     */
    public function getExchangeForwardIndicator()
    {
        return $this->container['exchangeForwardIndicator'];
    }

    /**
     * Sets exchangeForwardIndicator
     *
     * @param string|null $exchangeForwardIndicator Exchange forward indicator presence at shipment level is required to create exchange forward Shipments.  In the label routing Instruction text will be defaulted to \"EXCHANGE-LIKE ITEM ONLY\".
     *
     * @return self
     */
    public function setExchangeForwardIndicator($exchangeForwardIndicator)
    {
        if (is_null($exchangeForwardIndicator)) {
            throw new \InvalidArgumentException('non-nullable exchangeForwardIndicator cannot be null');
        }


        $this->container['exchangeForwardIndicator'] = $exchangeForwardIndicator;

        return $this;
    }

    /**
     * Gets holdForPickupIndicator
     *
     * @return string|null
     */
    public function getHoldForPickupIndicator()
    {
        return $this->container['holdForPickupIndicator'];
    }

    /**
     * Sets holdForPickupIndicator
     *
     * @param string|null $holdForPickupIndicator Hold For Pickup indicator. The empty tag means indicator is present.  This accessorial is only valid for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment.
     *
     * @return self
     */
    public function setHoldForPickupIndicator($holdForPickupIndicator)
    {
        if (is_null($holdForPickupIndicator)) {
            throw new \InvalidArgumentException('non-nullable holdForPickupIndicator cannot be null');
        }


        $this->container['holdForPickupIndicator'] = $holdForPickupIndicator;

        return $this;
    }

    /**
     * Gets dropoffAtUPSFacilityIndicator
     *
     * @return string|null
     */
    public function getDropoffAtUPSFacilityIndicator()
    {
        return $this->container['dropoffAtUPSFacilityIndicator'];
    }

    /**
     * Sets dropoffAtUPSFacilityIndicator
     *
     * @param string|null $dropoffAtUPSFacilityIndicator Drop off At UPS Facility indicator. The empty tag means indicator is present.  This accessorial is only valid for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment.
     *
     * @return self
     */
    public function setDropoffAtUPSFacilityIndicator($dropoffAtUPSFacilityIndicator)
    {
        if (is_null($dropoffAtUPSFacilityIndicator)) {
            throw new \InvalidArgumentException('non-nullable dropoffAtUPSFacilityIndicator cannot be null');
        }


        $this->container['dropoffAtUPSFacilityIndicator'] = $dropoffAtUPSFacilityIndicator;

        return $this;
    }

    /**
     * Gets liftGateForPickUpIndicator
     *
     * @return string|null
     */
    public function getLiftGateForPickUpIndicator()
    {
        return $this->container['liftGateForPickUpIndicator'];
    }

    /**
     * Sets liftGateForPickUpIndicator
     *
     * @param string|null $liftGateForPickUpIndicator Lift Gate For Pick Up indicator. The empty tag means indicator is present.  Lift Gate for Pickup is not allowed with Drop Off At UPS Facility for a UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday shipment.   When both Hold for Pickup and Drop Off At Facility are selected, neither of the Lift Gate accessorial (Pick Up or Delivery) are allowed for a UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday shipment.   This accessorial is only valid for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment.
     *
     * @return self
     */
    public function setLiftGateForPickUpIndicator($liftGateForPickUpIndicator)
    {
        if (is_null($liftGateForPickUpIndicator)) {
            throw new \InvalidArgumentException('non-nullable liftGateForPickUpIndicator cannot be null');
        }


        $this->container['liftGateForPickUpIndicator'] = $liftGateForPickUpIndicator;

        return $this;
    }

    /**
     * Gets liftGateForDeliveryIndicator
     *
     * @return string|null
     */
    public function getLiftGateForDeliveryIndicator()
    {
        return $this->container['liftGateForDeliveryIndicator'];
    }

    /**
     * Sets liftGateForDeliveryIndicator
     *
     * @param string|null $liftGateForDeliveryIndicator Lift Gate For Delivery indicator. The empty tag means indicator is present.  Lift Gate for Delivery is not allowed with Hold For Pickup for a UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday shipment.   When both Hold for Pickup and Drop Off At UPS Facility are selected, neither of the Lift Gate accessorial (Pick Up or Delivery) are allowed for a UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday shipment.   This accessorial is only valid for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment.
     *
     * @return self
     */
    public function setLiftGateForDeliveryIndicator($liftGateForDeliveryIndicator)
    {
        if (is_null($liftGateForDeliveryIndicator)) {
            throw new \InvalidArgumentException('non-nullable liftGateForDeliveryIndicator cannot be null');
        }


        $this->container['liftGateForDeliveryIndicator'] = $liftGateForDeliveryIndicator;

        return $this;
    }

    /**
     * Gets sDLShipmentIndicator
     *
     * @return string|null
     */
    public function getSDLShipmentIndicator()
    {
        return $this->container['sDLShipmentIndicator'];
    }

    /**
     * Sets sDLShipmentIndicator
     *
     * @param string|null $sDLShipmentIndicator The presence of the tag SDLShipmentIndicator indicates Shipment is SDL. SDLShipmentIndicator presence means EEI form/ EEI Filing option required.
     *
     * @return self
     */
    public function setSDLShipmentIndicator($sDLShipmentIndicator)
    {
        if (is_null($sDLShipmentIndicator)) {
            throw new \InvalidArgumentException('non-nullable sDLShipmentIndicator cannot be null');
        }


        $this->container['sDLShipmentIndicator'] = $sDLShipmentIndicator;

        return $this;
    }

    /**
     * Gets ePRAReleaseCode
     *
     * @return string|null
     */
    public function getEPRAReleaseCode()
    {
        return $this->container['ePRAReleaseCode'];
    }

    /**
     * Sets ePRAReleaseCode
     *
     * @param string|null $ePRAReleaseCode Package Release code allows the consignee or claimant to pick-up a package at a UPS Access Point™. The shipper must provide the Package Release Code to the consignee so that they can provide the code to the UPS Access Point personnel as another item for authentication before the package is released to them. Package Release Code is only valid with ShipmentIndicationType 01 - Hold for Pickup at UPS Access Point™.  The release code must be between length 4 and 6 and only contain numbers.
     *
     * @return self
     */
    public function setEPRAReleaseCode($ePRAReleaseCode)
    {
        if (is_null($ePRAReleaseCode)) {
            throw new \InvalidArgumentException('non-nullable ePRAReleaseCode cannot be null');
        }
        if ((mb_strlen($ePRAReleaseCode) > 6)) {
            throw new \InvalidArgumentException('invalid length for $ePRAReleaseCode when calling ShipmentShipmentServiceOptions., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($ePRAReleaseCode) < 4)) {
            throw new \InvalidArgumentException('invalid length for $ePRAReleaseCode when calling ShipmentShipmentServiceOptions., must be bigger than or equal to 4.');
        }

        $this->container['ePRAReleaseCode'] = $ePRAReleaseCode;

        return $this;
    }

    /**
     * Gets restrictedArticles
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsRestrictedArticles|null
     */
    public function getRestrictedArticles()
    {
        return $this->container['restrictedArticles'];
    }

    /**
     * Sets restrictedArticles
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentServiceOptionsRestrictedArticles|null $restrictedArticles restrictedArticles
     *
     * @return self
     */
    public function setRestrictedArticles($restrictedArticles)
    {
        if (is_null($restrictedArticles)) {
            throw new \InvalidArgumentException('non-nullable restrictedArticles cannot be null');
        }
        $this->container['restrictedArticles'] = $restrictedArticles;

        return $this;
    }

    /**
     * Gets insideDelivery
     *
     * @return string|null
     */
    public function getInsideDelivery()
    {
        return $this->container['insideDelivery'];
    }

    /**
     * Sets insideDelivery
     *
     * @param string|null $insideDelivery Inside delivery accessory. Valid values: 01 - White Glove, 02 - Room of Choice, 03 - Installation, 04 - Over Threshold Fee. Default is Room of Choice.  Shippers account needs to have a valid contract for Heavy Goods Service.
     *
     * @return self
     */
    public function setInsideDelivery($insideDelivery)
    {
        if (is_null($insideDelivery)) {
            throw new \InvalidArgumentException('non-nullable insideDelivery cannot be null');
        }
        if ((mb_strlen($insideDelivery) > 2)) {
            throw new \InvalidArgumentException('invalid length for $insideDelivery when calling ShipmentShipmentServiceOptions., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($insideDelivery) < 2)) {
            throw new \InvalidArgumentException('invalid length for $insideDelivery when calling ShipmentShipmentServiceOptions., must be bigger than or equal to 2.');
        }

        $this->container['insideDelivery'] = $insideDelivery;

        return $this;
    }

    /**
     * Gets itemDisposal
     *
     * @return string|null
     */
    public function getItemDisposal()
    {
        return $this->container['itemDisposal'];
    }

    /**
     * Sets itemDisposal
     *
     * @param string|null $itemDisposal Presence/Absence indicator. True if present; false otherwise. Any value is ignored. If present, indicates that the customer would like items disposed.  Shippers account needs to have a valid contract for Heavy Goods Service.
     *
     * @return self
     */
    public function setItemDisposal($itemDisposal)
    {
        if (is_null($itemDisposal)) {
            throw new \InvalidArgumentException('non-nullable itemDisposal cannot be null');
        }


        $this->container['itemDisposal'] = $itemDisposal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


