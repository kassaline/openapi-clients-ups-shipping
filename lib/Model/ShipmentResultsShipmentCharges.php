<?php
/**
 * ShipmentResultsShipmentCharges
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ShipmentResultsShipmentCharges Class Doc Comment
 *
 * @category Class
 * @description Shipment charges Container. Shipment charges info.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentResultsShipmentCharges implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentResults_ShipmentCharges';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rateChart' => 'string',
        'baseServiceCharge' => '\OpenAPIClientUPSShipping\Model\ShipmentChargesBaseServiceCharge',
        'transportationCharges' => '\OpenAPIClientUPSShipping\Model\ShipmentChargesTransportationCharges',
        'itemizedCharges' => '\OpenAPIClientUPSShipping\Model\ShipmentChargesItemizedCharges[]',
        'serviceOptionsCharges' => '\OpenAPIClientUPSShipping\Model\ShipmentChargesServiceOptionsCharges',
        'taxCharges' => '\OpenAPIClientUPSShipping\Model\ShipmentChargesTaxCharges[]',
        'totalCharges' => '\OpenAPIClientUPSShipping\Model\ShipmentChargesTotalCharges',
        'totalChargesWithTaxes' => '\OpenAPIClientUPSShipping\Model\ShipmentChargesTotalChargesWithTaxes'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'rateChart' => null,
        'baseServiceCharge' => null,
        'transportationCharges' => null,
        'itemizedCharges' => null,
        'serviceOptionsCharges' => null,
        'taxCharges' => null,
        'totalCharges' => null,
        'totalChargesWithTaxes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'rateChart' => false,
        'baseServiceCharge' => false,
        'transportationCharges' => false,
        'itemizedCharges' => false,
        'serviceOptionsCharges' => false,
        'taxCharges' => false,
        'totalCharges' => false,
        'totalChargesWithTaxes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rateChart' => 'RateChart',
        'baseServiceCharge' => 'BaseServiceCharge',
        'transportationCharges' => 'TransportationCharges',
        'itemizedCharges' => 'ItemizedCharges',
        'serviceOptionsCharges' => 'ServiceOptionsCharges',
        'taxCharges' => 'TaxCharges',
        'totalCharges' => 'TotalCharges',
        'totalChargesWithTaxes' => 'TotalChargesWithTaxes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rateChart' => 'setRateChart',
        'baseServiceCharge' => 'setBaseServiceCharge',
        'transportationCharges' => 'setTransportationCharges',
        'itemizedCharges' => 'setItemizedCharges',
        'serviceOptionsCharges' => 'setServiceOptionsCharges',
        'taxCharges' => 'setTaxCharges',
        'totalCharges' => 'setTotalCharges',
        'totalChargesWithTaxes' => 'setTotalChargesWithTaxes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rateChart' => 'getRateChart',
        'baseServiceCharge' => 'getBaseServiceCharge',
        'transportationCharges' => 'getTransportationCharges',
        'itemizedCharges' => 'getItemizedCharges',
        'serviceOptionsCharges' => 'getServiceOptionsCharges',
        'taxCharges' => 'getTaxCharges',
        'totalCharges' => 'getTotalCharges',
        'totalChargesWithTaxes' => 'getTotalChargesWithTaxes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('rateChart', $data ?? [], null);
        $this->setIfExists('baseServiceCharge', $data ?? [], null);
        $this->setIfExists('transportationCharges', $data ?? [], null);
        $this->setIfExists('itemizedCharges', $data ?? [], null);
        $this->setIfExists('serviceOptionsCharges', $data ?? [], null);
        $this->setIfExists('taxCharges', $data ?? [], null);
        $this->setIfExists('totalCharges', $data ?? [], null);
        $this->setIfExists('totalChargesWithTaxes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['rateChart']) && (mb_strlen($this->container['rateChart']) > 1)) {
            $invalidProperties[] = "invalid value for 'rateChart', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['rateChart']) && (mb_strlen($this->container['rateChart']) < 1)) {
            $invalidProperties[] = "invalid value for 'rateChart', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['transportationCharges'] === null) {
            $invalidProperties[] = "'transportationCharges' can't be null";
        }
        if ($this->container['serviceOptionsCharges'] === null) {
            $invalidProperties[] = "'serviceOptionsCharges' can't be null";
        }
        if ($this->container['totalCharges'] === null) {
            $invalidProperties[] = "'totalCharges' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rateChart
     *
     * @return string|null
     */
    public function getRateChart()
    {
        return $this->container['rateChart'];
    }

    /**
     * Sets rateChart
     *
     * @param string|null $rateChart Rate Type with which Shipment is rated. Possible RateChart values for different regions will be: US 48 origin: - 1 – Daily Rates - 3 – Standard List Rates - 4 – Retail Rates.  Alaska/Hawaii origin: - 1 – Daily Rates - 3 – Standard List Rates - 4 – Retail Rates.  All Other origins: - 1 – Rates - 5 - Regional Rates - 6 - General List Rates.  3 and 4 do not apply.
     *
     * @return self
     */
    public function setRateChart($rateChart)
    {
        if (is_null($rateChart)) {
            throw new \InvalidArgumentException('non-nullable rateChart cannot be null');
        }
        if ((mb_strlen($rateChart) > 1)) {
            throw new \InvalidArgumentException('invalid length for $rateChart when calling ShipmentResultsShipmentCharges., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($rateChart) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rateChart when calling ShipmentResultsShipmentCharges., must be bigger than or equal to 1.');
        }

        $this->container['rateChart'] = $rateChart;

        return $this;
    }

    /**
     * Gets baseServiceCharge
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentChargesBaseServiceCharge|null
     */
    public function getBaseServiceCharge()
    {
        return $this->container['baseServiceCharge'];
    }

    /**
     * Sets baseServiceCharge
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentChargesBaseServiceCharge|null $baseServiceCharge baseServiceCharge
     *
     * @return self
     */
    public function setBaseServiceCharge($baseServiceCharge)
    {
        if (is_null($baseServiceCharge)) {
            throw new \InvalidArgumentException('non-nullable baseServiceCharge cannot be null');
        }
        $this->container['baseServiceCharge'] = $baseServiceCharge;

        return $this;
    }

    /**
     * Gets transportationCharges
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentChargesTransportationCharges
     */
    public function getTransportationCharges()
    {
        return $this->container['transportationCharges'];
    }

    /**
     * Sets transportationCharges
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentChargesTransportationCharges $transportationCharges transportationCharges
     *
     * @return self
     */
    public function setTransportationCharges($transportationCharges)
    {
        if (is_null($transportationCharges)) {
            throw new \InvalidArgumentException('non-nullable transportationCharges cannot be null');
        }
        $this->container['transportationCharges'] = $transportationCharges;

        return $this;
    }

    /**
     * Gets itemizedCharges
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentChargesItemizedCharges[]|null
     */
    public function getItemizedCharges()
    {
        return $this->container['itemizedCharges'];
    }

    /**
     * Sets itemizedCharges
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentChargesItemizedCharges[]|null $itemizedCharges Itemized Charges are returned only when the Subversion element is present and greater than or equal to 1601.  **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1.
     *
     * @return self
     */
    public function setItemizedCharges($itemizedCharges)
    {
        if (is_null($itemizedCharges)) {
            throw new \InvalidArgumentException('non-nullable itemizedCharges cannot be null');
        }
        $this->container['itemizedCharges'] = $itemizedCharges;

        return $this;
    }

    /**
     * Gets serviceOptionsCharges
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentChargesServiceOptionsCharges
     */
    public function getServiceOptionsCharges()
    {
        return $this->container['serviceOptionsCharges'];
    }

    /**
     * Sets serviceOptionsCharges
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentChargesServiceOptionsCharges $serviceOptionsCharges serviceOptionsCharges
     *
     * @return self
     */
    public function setServiceOptionsCharges($serviceOptionsCharges)
    {
        if (is_null($serviceOptionsCharges)) {
            throw new \InvalidArgumentException('non-nullable serviceOptionsCharges cannot be null');
        }
        $this->container['serviceOptionsCharges'] = $serviceOptionsCharges;

        return $this;
    }

    /**
     * Gets taxCharges
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentChargesTaxCharges[]|null
     */
    public function getTaxCharges()
    {
        return $this->container['taxCharges'];
    }

    /**
     * Sets taxCharges
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentChargesTaxCharges[]|null $taxCharges TaxCharges container are returned only when TaxInformationIndicator is present in request and when Negotiated Rates are not applicable. TaxCharges container contains Tax information for a given shipment.  **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1.
     *
     * @return self
     */
    public function setTaxCharges($taxCharges)
    {
        if (is_null($taxCharges)) {
            throw new \InvalidArgumentException('non-nullable taxCharges cannot be null');
        }
        $this->container['taxCharges'] = $taxCharges;

        return $this;
    }

    /**
     * Gets totalCharges
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentChargesTotalCharges
     */
    public function getTotalCharges()
    {
        return $this->container['totalCharges'];
    }

    /**
     * Sets totalCharges
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentChargesTotalCharges $totalCharges totalCharges
     *
     * @return self
     */
    public function setTotalCharges($totalCharges)
    {
        if (is_null($totalCharges)) {
            throw new \InvalidArgumentException('non-nullable totalCharges cannot be null');
        }
        $this->container['totalCharges'] = $totalCharges;

        return $this;
    }

    /**
     * Gets totalChargesWithTaxes
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentChargesTotalChargesWithTaxes|null
     */
    public function getTotalChargesWithTaxes()
    {
        return $this->container['totalChargesWithTaxes'];
    }

    /**
     * Sets totalChargesWithTaxes
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentChargesTotalChargesWithTaxes|null $totalChargesWithTaxes totalChargesWithTaxes
     *
     * @return self
     */
    public function setTotalChargesWithTaxes($totalChargesWithTaxes)
    {
        if (is_null($totalChargesWithTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalChargesWithTaxes cannot be null');
        }
        $this->container['totalChargesWithTaxes'] = $totalChargesWithTaxes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


