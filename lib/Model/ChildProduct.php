<?php
/**
 * ChildProduct
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ChildProduct Class Doc Comment
 *
 * @category Class
 * @description This variable represents the product details. It is used to provide information about the product being shipped.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChildProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Child_Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'unitPrice' => 'string',
        'numberOfUnits' => 'string',
        'productNumber' => 'string',
        'countryOriginCode' => 'string',
        'unitOfMeasure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'unitPrice' => null,
        'numberOfUnits' => null,
        'productNumber' => null,
        'countryOriginCode' => null,
        'unitOfMeasure' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'unitPrice' => false,
        'numberOfUnits' => false,
        'productNumber' => false,
        'countryOriginCode' => false,
        'unitOfMeasure' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'unitPrice' => 'UnitPrice',
        'numberOfUnits' => 'NumberOfUnits',
        'productNumber' => 'ProductNumber',
        'countryOriginCode' => 'CountryOriginCode',
        'unitOfMeasure' => 'UnitOfMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'unitPrice' => 'setUnitPrice',
        'numberOfUnits' => 'setNumberOfUnits',
        'productNumber' => 'setProductNumber',
        'countryOriginCode' => 'setCountryOriginCode',
        'unitOfMeasure' => 'setUnitOfMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'unitPrice' => 'getUnitPrice',
        'numberOfUnits' => 'getNumberOfUnits',
        'productNumber' => 'getProductNumber',
        'countryOriginCode' => 'getCountryOriginCode',
        'unitOfMeasure' => 'getUnitOfMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_OF_MEASURE_BA = 'BA';
    public const UNIT_OF_MEASURE_BE = 'BE';
    public const UNIT_OF_MEASURE_BG = 'BG';
    public const UNIT_OF_MEASURE_BH = 'BH';
    public const UNIT_OF_MEASURE_BOX = 'BOX';
    public const UNIT_OF_MEASURE_BT = 'BT';
    public const UNIT_OF_MEASURE_LB = 'LB';
    public const UNIT_OF_MEASURE_LBS = 'LBS';
    public const UNIT_OF_MEASURE_L = 'L';
    public const UNIT_OF_MEASURE_M = 'M';
    public const UNIT_OF_MEASURE_NMB = 'NMB';
    public const UNIT_OF_MEASURE_PA = 'PA';
    public const UNIT_OF_MEASURE_BU = 'BU';
    public const UNIT_OF_MEASURE_CI = 'CI';
    public const UNIT_OF_MEASURE_CM = 'CM';
    public const UNIT_OF_MEASURE_CON = 'CON';
    public const UNIT_OF_MEASURE_CR = 'CR';
    public const UNIT_OF_MEASURE_CS = 'CS';
    public const UNIT_OF_MEASURE_CT = 'CT';
    public const UNIT_OF_MEASURE_CY = 'CY';
    public const UNIT_OF_MEASURE_DOZ = 'DOZ';
    public const UNIT_OF_MEASURE_EA = 'EA';
    public const UNIT_OF_MEASURE_EN = 'EN';
    public const UNIT_OF_MEASURE_FT = 'FT';
    public const UNIT_OF_MEASURE_KG = 'KG';
    public const UNIT_OF_MEASURE_KGS = 'KGS';
    public const UNIT_OF_MEASURE_PAL = 'PAL';
    public const UNIT_OF_MEASURE_PC = 'PC';
    public const UNIT_OF_MEASURE_PCS = 'PCS';
    public const UNIT_OF_MEASURE_PF = 'PF';
    public const UNIT_OF_MEASURE_OTH = 'OTH';
    public const UNIT_OF_MEASURE_PKG = 'PKG';
    public const UNIT_OF_MEASURE_PR = 'PR';
    public const UNIT_OF_MEASURE_PRS = 'PRS';
    public const UNIT_OF_MEASURE_RL = 'RL';
    public const UNIT_OF_MEASURE_SET = 'SET';
    public const UNIT_OF_MEASURE_SME = 'SME';
    public const UNIT_OF_MEASURE_SYD = 'SYD';
    public const UNIT_OF_MEASURE_TU = 'TU';
    public const UNIT_OF_MEASURE_YD = 'YD';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitOfMeasureAllowableValues()
    {
        return [
            self::UNIT_OF_MEASURE_BA,
            self::UNIT_OF_MEASURE_BE,
            self::UNIT_OF_MEASURE_BG,
            self::UNIT_OF_MEASURE_BH,
            self::UNIT_OF_MEASURE_BOX,
            self::UNIT_OF_MEASURE_BT,
            self::UNIT_OF_MEASURE_LB,
            self::UNIT_OF_MEASURE_LBS,
            self::UNIT_OF_MEASURE_L,
            self::UNIT_OF_MEASURE_M,
            self::UNIT_OF_MEASURE_NMB,
            self::UNIT_OF_MEASURE_PA,
            self::UNIT_OF_MEASURE_BU,
            self::UNIT_OF_MEASURE_CI,
            self::UNIT_OF_MEASURE_CM,
            self::UNIT_OF_MEASURE_CON,
            self::UNIT_OF_MEASURE_CR,
            self::UNIT_OF_MEASURE_CS,
            self::UNIT_OF_MEASURE_CT,
            self::UNIT_OF_MEASURE_CY,
            self::UNIT_OF_MEASURE_DOZ,
            self::UNIT_OF_MEASURE_EA,
            self::UNIT_OF_MEASURE_EN,
            self::UNIT_OF_MEASURE_FT,
            self::UNIT_OF_MEASURE_KG,
            self::UNIT_OF_MEASURE_KGS,
            self::UNIT_OF_MEASURE_PAL,
            self::UNIT_OF_MEASURE_PC,
            self::UNIT_OF_MEASURE_PCS,
            self::UNIT_OF_MEASURE_PF,
            self::UNIT_OF_MEASURE_OTH,
            self::UNIT_OF_MEASURE_PKG,
            self::UNIT_OF_MEASURE_PR,
            self::UNIT_OF_MEASURE_PRS,
            self::UNIT_OF_MEASURE_RL,
            self::UNIT_OF_MEASURE_SET,
            self::UNIT_OF_MEASURE_SME,
            self::UNIT_OF_MEASURE_SYD,
            self::UNIT_OF_MEASURE_TU,
            self::UNIT_OF_MEASURE_YD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('unitPrice', $data ?? [], null);
        $this->setIfExists('numberOfUnits', $data ?? [], null);
        $this->setIfExists('productNumber', $data ?? [], null);
        $this->setIfExists('countryOriginCode', $data ?? [], null);
        $this->setIfExists('unitOfMeasure', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9 ]{1,100}$/", $this->container['description'])) {
            $invalidProperties[] = "invalid value for 'description', must be conform to the pattern /^[a-zA-Z0-9 ]{1,100}$/.";
        }

        if ($this->container['unitPrice'] === null) {
            $invalidProperties[] = "'unitPrice' can't be null";
        }
        if ($this->container['numberOfUnits'] === null) {
            $invalidProperties[] = "'numberOfUnits' can't be null";
        }
        if ($this->container['productNumber'] === null) {
            $invalidProperties[] = "'productNumber' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9 ]{1,20}$/", $this->container['productNumber'])) {
            $invalidProperties[] = "invalid value for 'productNumber', must be conform to the pattern /^[a-zA-Z0-9 ]{1,20}$/.";
        }

        if ($this->container['countryOriginCode'] === null) {
            $invalidProperties[] = "'countryOriginCode' can't be null";
        }
        if (!preg_match("/^[A-Z]{2}$/", $this->container['countryOriginCode'])) {
            $invalidProperties[] = "invalid value for 'countryOriginCode', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        if ($this->container['unitOfMeasure'] === null) {
            $invalidProperties[] = "'unitOfMeasure' can't be null";
        }
        $allowedValues = $this->getUnitOfMeasureAllowableValues();
        if (!is_null($this->container['unitOfMeasure']) && !in_array($this->container['unitOfMeasure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unitOfMeasure', must be one of '%s'",
                $this->container['unitOfMeasure'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the product being shipped.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9 ]{1,100}$/", ObjectSerializer::toString($description)))) {
            throw new \InvalidArgumentException("invalid value for \$description when calling ChildProduct., must conform to the pattern /^[a-zA-Z0-9 ]{1,100}$/.");
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return string
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param string $unitPrice Price per unit of the product being shipped.
     *
     * @return self
     */
    public function setUnitPrice($unitPrice)
    {
        if (is_null($unitPrice)) {
            throw new \InvalidArgumentException('non-nullable unitPrice cannot be null');
        }


        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets numberOfUnits
     *
     * @return string
     */
    public function getNumberOfUnits()
    {
        return $this->container['numberOfUnits'];
    }

    /**
     * Sets numberOfUnits
     *
     * @param string $numberOfUnits Number of units of the product being shipped.
     *
     * @return self
     */
    public function setNumberOfUnits($numberOfUnits)
    {
        if (is_null($numberOfUnits)) {
            throw new \InvalidArgumentException('non-nullable numberOfUnits cannot be null');
        }


        $this->container['numberOfUnits'] = $numberOfUnits;

        return $this;
    }

    /**
     * Gets productNumber
     *
     * @return string
     */
    public function getProductNumber()
    {
        return $this->container['productNumber'];
    }

    /**
     * Sets productNumber
     *
     * @param string $productNumber Product number of the product being shipped.
     *
     * @return self
     */
    public function setProductNumber($productNumber)
    {
        if (is_null($productNumber)) {
            throw new \InvalidArgumentException('non-nullable productNumber cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9 ]{1,20}$/", ObjectSerializer::toString($productNumber)))) {
            throw new \InvalidArgumentException("invalid value for \$productNumber when calling ChildProduct., must conform to the pattern /^[a-zA-Z0-9 ]{1,20}$/.");
        }

        $this->container['productNumber'] = $productNumber;

        return $this;
    }

    /**
     * Gets countryOriginCode
     *
     * @return string
     */
    public function getCountryOriginCode()
    {
        return $this->container['countryOriginCode'];
    }

    /**
     * Sets countryOriginCode
     *
     * @param string $countryOriginCode Country code of the product being shipped.
     *
     * @return self
     */
    public function setCountryOriginCode($countryOriginCode)
    {
        if (is_null($countryOriginCode)) {
            throw new \InvalidArgumentException('non-nullable countryOriginCode cannot be null');
        }

        if ((!preg_match("/^[A-Z]{2}$/", ObjectSerializer::toString($countryOriginCode)))) {
            throw new \InvalidArgumentException("invalid value for \$countryOriginCode when calling ChildProduct., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['countryOriginCode'] = $countryOriginCode;

        return $this;
    }

    /**
     * Gets unitOfMeasure
     *
     * @return string
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unitOfMeasure'];
    }

    /**
     * Sets unitOfMeasure
     *
     * @param string $unitOfMeasure Unit of Measure for the product being shipped.  Valid values are :  - BA = Barrel  - BE = Bundle  - BG = Bag  - BH =Bunch  - BOX = Box  - BT = Bolt  - LB =Pound  - LBS = Pounds  - L = Liter  - M = Meter  - NMB = Number  - PA = Packet  - BU = Butt  - CI =Canister  - CM =Centimeter  - CON = Container  - CR = Crate  - CS =Case  - CT =Carton  - CY =Cylinder  - DOZ = Dozen  - EA = Each  - EN =Envelope  - FT =Feet  - KG =Kilogram  - KGS = Kilograms  - PAL = Pallet  - PC = Piece  - PCS = Pieces  - PF = Proof Liters  - OTH = Other  - PKG = Package  - PR = Pair  - PRS = Pairs  - RL = Roll  - SET = Set  - SME = Square Meters  - SYD = Square Yards  - TU =Tube  - YD =Yard
     *
     * @return self
     */
    public function setUnitOfMeasure($unitOfMeasure)
    {
        if (is_null($unitOfMeasure)) {
            throw new \InvalidArgumentException('non-nullable unitOfMeasure cannot be null');
        }
        $allowedValues = $this->getUnitOfMeasureAllowableValues();
        if (!in_array($unitOfMeasure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unitOfMeasure', must be one of '%s'",
                    $unitOfMeasure,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unitOfMeasure'] = $unitOfMeasure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


