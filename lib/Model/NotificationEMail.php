<?php
/**
 * NotificationEMail
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * NotificationEMail Class Doc Comment
 *
 * @category Class
 * @description Container for Email Information.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NotificationEMail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Notification_EMail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'eMailAddress' => 'string[]',
        'undeliverableEMailAddress' => 'string',
        'fromEMailAddress' => 'string',
        'fromName' => 'string',
        'memo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'eMailAddress' => null,
        'undeliverableEMailAddress' => null,
        'fromEMailAddress' => null,
        'fromName' => null,
        'memo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'eMailAddress' => false,
        'undeliverableEMailAddress' => false,
        'fromEMailAddress' => false,
        'fromName' => false,
        'memo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eMailAddress' => 'EMailAddress',
        'undeliverableEMailAddress' => 'UndeliverableEMailAddress',
        'fromEMailAddress' => 'FromEMailAddress',
        'fromName' => 'FromName',
        'memo' => 'Memo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eMailAddress' => 'setEMailAddress',
        'undeliverableEMailAddress' => 'setUndeliverableEMailAddress',
        'fromEMailAddress' => 'setFromEMailAddress',
        'fromName' => 'setFromName',
        'memo' => 'setMemo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eMailAddress' => 'getEMailAddress',
        'undeliverableEMailAddress' => 'getUndeliverableEMailAddress',
        'fromEMailAddress' => 'getFromEMailAddress',
        'fromName' => 'getFromName',
        'memo' => 'getMemo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('eMailAddress', $data ?? [], null);
        $this->setIfExists('undeliverableEMailAddress', $data ?? [], null);
        $this->setIfExists('fromEMailAddress', $data ?? [], null);
        $this->setIfExists('fromName', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['eMailAddress'] === null) {
            $invalidProperties[] = "'eMailAddress' can't be null";
        }
        if (!is_null($this->container['undeliverableEMailAddress']) && (mb_strlen($this->container['undeliverableEMailAddress']) > 50)) {
            $invalidProperties[] = "invalid value for 'undeliverableEMailAddress', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['undeliverableEMailAddress']) && (mb_strlen($this->container['undeliverableEMailAddress']) < 1)) {
            $invalidProperties[] = "invalid value for 'undeliverableEMailAddress', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fromEMailAddress']) && (mb_strlen($this->container['fromEMailAddress']) > 50)) {
            $invalidProperties[] = "invalid value for 'fromEMailAddress', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['fromEMailAddress']) && (mb_strlen($this->container['fromEMailAddress']) < 1)) {
            $invalidProperties[] = "invalid value for 'fromEMailAddress', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fromName']) && (mb_strlen($this->container['fromName']) > 35)) {
            $invalidProperties[] = "invalid value for 'fromName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['fromName']) && (mb_strlen($this->container['fromName']) < 1)) {
            $invalidProperties[] = "invalid value for 'fromName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) > 150)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) < 1)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eMailAddress
     *
     * @return string[]
     */
    public function getEMailAddress()
    {
        return $this->container['eMailAddress'];
    }

    /**
     * Sets eMailAddress
     *
     * @param string[] $eMailAddress Email address where the notification is sent.  Up to five email addresses are allowed for each type of Quantum View TM shipment notification. Up to two email address for return notification.
     *
     * @return self
     */
    public function setEMailAddress($eMailAddress)
    {
        if (is_null($eMailAddress)) {
            throw new \InvalidArgumentException('non-nullable eMailAddress cannot be null');
        }


        $this->container['eMailAddress'] = $eMailAddress;

        return $this;
    }

    /**
     * Gets undeliverableEMailAddress
     *
     * @return string|null
     */
    public function getUndeliverableEMailAddress()
    {
        return $this->container['undeliverableEMailAddress'];
    }

    /**
     * Sets undeliverableEMailAddress
     *
     * @param string|null $undeliverableEMailAddress The address where an undeliverable eMail message is sent if the eMail with the notification is undeliverable.  There can be only one UndeliverableEMailAddress for each shipment with Quantum View Shipment Notifications.
     *
     * @return self
     */
    public function setUndeliverableEMailAddress($undeliverableEMailAddress)
    {
        if (is_null($undeliverableEMailAddress)) {
            throw new \InvalidArgumentException('non-nullable undeliverableEMailAddress cannot be null');
        }
        if ((mb_strlen($undeliverableEMailAddress) > 50)) {
            throw new \InvalidArgumentException('invalid length for $undeliverableEMailAddress when calling NotificationEMail., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($undeliverableEMailAddress) < 1)) {
            throw new \InvalidArgumentException('invalid length for $undeliverableEMailAddress when calling NotificationEMail., must be bigger than or equal to 1.');
        }

        $this->container['undeliverableEMailAddress'] = $undeliverableEMailAddress;

        return $this;
    }

    /**
     * Gets fromEMailAddress
     *
     * @return string|null
     */
    public function getFromEMailAddress()
    {
        return $this->container['fromEMailAddress'];
    }

    /**
     * Sets fromEMailAddress
     *
     * @param string|null $fromEMailAddress The e-mail address specifies the Reply To E-mail address. The \"From\" field of the message header contains pkginfo@ups.com.  Valid for Return Notification only.
     *
     * @return self
     */
    public function setFromEMailAddress($fromEMailAddress)
    {
        if (is_null($fromEMailAddress)) {
            throw new \InvalidArgumentException('non-nullable fromEMailAddress cannot be null');
        }
        if ((mb_strlen($fromEMailAddress) > 50)) {
            throw new \InvalidArgumentException('invalid length for $fromEMailAddress when calling NotificationEMail., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($fromEMailAddress) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fromEMailAddress when calling NotificationEMail., must be bigger than or equal to 1.');
        }

        $this->container['fromEMailAddress'] = $fromEMailAddress;

        return $this;
    }

    /**
     * Gets fromName
     *
     * @return string|null
     */
    public function getFromName()
    {
        return $this->container['fromName'];
    }

    /**
     * Sets fromName
     *
     * @param string|null $fromName The name the email will appear to be from. Defaults to the Shipper Name.  The FromName must occur only once for each shipment with Quantum View Shipment Notifications.
     *
     * @return self
     */
    public function setFromName($fromName)
    {
        if (is_null($fromName)) {
            throw new \InvalidArgumentException('non-nullable fromName cannot be null');
        }
        if ((mb_strlen($fromName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $fromName when calling NotificationEMail., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($fromName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fromName when calling NotificationEMail., must be bigger than or equal to 1.');
        }

        $this->container['fromName'] = $fromName;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo User defined text that will be included in the eMail.  The Memo must occur only once for each shipment with Quantum View Shipment Notifications.
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        if ((mb_strlen($memo) > 150)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling NotificationEMail., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($memo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling NotificationEMail., must be bigger than or equal to 1.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


