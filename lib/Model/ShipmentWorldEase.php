<?php
/**
 * ShipmentWorldEase
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * ShipmentWorldEase Class Doc Comment
 *
 * @category Class
 * @description WorldEase is a contract service offering in the UPS shipping that decreases brokerage fees by consolidating loose packages into one shipment for customs clearance.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentWorldEase implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment_WorldEase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'destinationCountryCode' => 'string',
        'destinationPostalCode' => 'string',
        'gCCN' => 'string',
        'masterEUConsolidationIndicator' => 'string',
        'masterHasDocBox' => 'string',
        'masterShipmentChgType' => 'string',
        'vendorCollectIDNumberExemptIndicator' => 'string',
        'portOfEntry' => '\OpenAPIClientUPSShipping\Model\ShipmentWorldEasePortOfEntry'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'destinationCountryCode' => null,
        'destinationPostalCode' => null,
        'gCCN' => null,
        'masterEUConsolidationIndicator' => null,
        'masterHasDocBox' => null,
        'masterShipmentChgType' => null,
        'vendorCollectIDNumberExemptIndicator' => null,
        'portOfEntry' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'destinationCountryCode' => false,
        'destinationPostalCode' => false,
        'gCCN' => false,
        'masterEUConsolidationIndicator' => false,
        'masterHasDocBox' => false,
        'masterShipmentChgType' => false,
        'vendorCollectIDNumberExemptIndicator' => false,
        'portOfEntry' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'destinationCountryCode' => 'DestinationCountryCode',
        'destinationPostalCode' => 'DestinationPostalCode',
        'gCCN' => 'GCCN',
        'masterEUConsolidationIndicator' => 'MasterEUConsolidationIndicator',
        'masterHasDocBox' => 'MasterHasDocBox',
        'masterShipmentChgType' => 'MasterShipmentChgType',
        'vendorCollectIDNumberExemptIndicator' => 'VendorCollectIDNumberExemptIndicator',
        'portOfEntry' => 'PortOfEntry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'destinationCountryCode' => 'setDestinationCountryCode',
        'destinationPostalCode' => 'setDestinationPostalCode',
        'gCCN' => 'setGCCN',
        'masterEUConsolidationIndicator' => 'setMasterEUConsolidationIndicator',
        'masterHasDocBox' => 'setMasterHasDocBox',
        'masterShipmentChgType' => 'setMasterShipmentChgType',
        'vendorCollectIDNumberExemptIndicator' => 'setVendorCollectIDNumberExemptIndicator',
        'portOfEntry' => 'setPortOfEntry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'destinationCountryCode' => 'getDestinationCountryCode',
        'destinationPostalCode' => 'getDestinationPostalCode',
        'gCCN' => 'getGCCN',
        'masterEUConsolidationIndicator' => 'getMasterEUConsolidationIndicator',
        'masterHasDocBox' => 'getMasterHasDocBox',
        'masterShipmentChgType' => 'getMasterShipmentChgType',
        'vendorCollectIDNumberExemptIndicator' => 'getVendorCollectIDNumberExemptIndicator',
        'portOfEntry' => 'getPortOfEntry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MASTER_SHIPMENT_CHG_TYPE_CAF = 'CAF';
    public const MASTER_SHIPMENT_CHG_TYPE_COL = 'COL';
    public const MASTER_SHIPMENT_CHG_TYPE_DDP = 'DDP';
    public const MASTER_SHIPMENT_CHG_TYPE_FOB = 'FOB';
    public const MASTER_SHIPMENT_CHG_TYPE_PRE = 'PRE';
    public const MASTER_SHIPMENT_CHG_TYPE_SDT = 'SDT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMasterShipmentChgTypeAllowableValues()
    {
        return [
            self::MASTER_SHIPMENT_CHG_TYPE_CAF,
            self::MASTER_SHIPMENT_CHG_TYPE_COL,
            self::MASTER_SHIPMENT_CHG_TYPE_DDP,
            self::MASTER_SHIPMENT_CHG_TYPE_FOB,
            self::MASTER_SHIPMENT_CHG_TYPE_PRE,
            self::MASTER_SHIPMENT_CHG_TYPE_SDT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('destinationCountryCode', $data ?? [], null);
        $this->setIfExists('destinationPostalCode', $data ?? [], null);
        $this->setIfExists('gCCN', $data ?? [], null);
        $this->setIfExists('masterEUConsolidationIndicator', $data ?? [], null);
        $this->setIfExists('masterHasDocBox', $data ?? [], null);
        $this->setIfExists('masterShipmentChgType', $data ?? [], null);
        $this->setIfExists('vendorCollectIDNumberExemptIndicator', $data ?? [], null);
        $this->setIfExists('portOfEntry', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['destinationCountryCode'] === null) {
            $invalidProperties[] = "'destinationCountryCode' can't be null";
        }
        if ((mb_strlen($this->container['destinationCountryCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'destinationCountryCode', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['destinationCountryCode']) < 2)) {
            $invalidProperties[] = "invalid value for 'destinationCountryCode', the character length must be bigger than or equal to 2.";
        }

        if (!preg_match("/^[A-Z]{2}$/", $this->container['destinationCountryCode'])) {
            $invalidProperties[] = "invalid value for 'destinationCountryCode', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        if (!is_null($this->container['destinationPostalCode']) && (mb_strlen($this->container['destinationPostalCode']) > 10)) {
            $invalidProperties[] = "invalid value for 'destinationPostalCode', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['destinationPostalCode']) && (mb_strlen($this->container['destinationPostalCode']) < 5)) {
            $invalidProperties[] = "invalid value for 'destinationPostalCode', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['destinationPostalCode']) && !preg_match("/^\\d{5}(?:[-\\s]\\d{4})?$/", $this->container['destinationPostalCode'])) {
            $invalidProperties[] = "invalid value for 'destinationPostalCode', must be conform to the pattern /^\\d{5}(?:[-\\s]\\d{4})?$/.";
        }

        if (!is_null($this->container['gCCN']) && (mb_strlen($this->container['gCCN']) > 18)) {
            $invalidProperties[] = "invalid value for 'gCCN', the character length must be smaller than or equal to 18.";
        }

        if ($this->container['masterShipmentChgType'] === null) {
            $invalidProperties[] = "'masterShipmentChgType' can't be null";
        }
        $allowedValues = $this->getMasterShipmentChgTypeAllowableValues();
        if (!is_null($this->container['masterShipmentChgType']) && !in_array($this->container['masterShipmentChgType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'masterShipmentChgType', must be one of '%s'",
                $this->container['masterShipmentChgType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['portOfEntry'] === null) {
            $invalidProperties[] = "'portOfEntry' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets destinationCountryCode
     *
     * @return string
     */
    public function getDestinationCountryCode()
    {
        return $this->container['destinationCountryCode'];
    }

    /**
     * Sets destinationCountryCode
     *
     * @param string $destinationCountryCode The final destination country code.
     *
     * @return self
     */
    public function setDestinationCountryCode($destinationCountryCode)
    {
        if (is_null($destinationCountryCode)) {
            throw new \InvalidArgumentException('non-nullable destinationCountryCode cannot be null');
        }
        if ((mb_strlen($destinationCountryCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $destinationCountryCode when calling ShipmentWorldEase., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($destinationCountryCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $destinationCountryCode when calling ShipmentWorldEase., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^[A-Z]{2}$/", ObjectSerializer::toString($destinationCountryCode)))) {
            throw new \InvalidArgumentException("invalid value for \$destinationCountryCode when calling ShipmentWorldEase., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['destinationCountryCode'] = $destinationCountryCode;

        return $this;
    }

    /**
     * Gets destinationPostalCode
     *
     * @return string|null
     */
    public function getDestinationPostalCode()
    {
        return $this->container['destinationPostalCode'];
    }

    /**
     * Sets destinationPostalCode
     *
     * @param string|null $destinationPostalCode The final destination postal code.
     *
     * @return self
     */
    public function setDestinationPostalCode($destinationPostalCode)
    {
        if (is_null($destinationPostalCode)) {
            throw new \InvalidArgumentException('non-nullable destinationPostalCode cannot be null');
        }
        if ((mb_strlen($destinationPostalCode) > 10)) {
            throw new \InvalidArgumentException('invalid length for $destinationPostalCode when calling ShipmentWorldEase., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($destinationPostalCode) < 5)) {
            throw new \InvalidArgumentException('invalid length for $destinationPostalCode when calling ShipmentWorldEase., must be bigger than or equal to 5.');
        }
        if ((!preg_match("/^\\d{5}(?:[-\\s]\\d{4})?$/", ObjectSerializer::toString($destinationPostalCode)))) {
            throw new \InvalidArgumentException("invalid value for \$destinationPostalCode when calling ShipmentWorldEase., must conform to the pattern /^\\d{5}(?:[-\\s]\\d{4})?$/.");
        }

        $this->container['destinationPostalCode'] = $destinationPostalCode;

        return $this;
    }

    /**
     * Gets gCCN
     *
     * @return string|null
     */
    public function getGCCN()
    {
        return $this->container['gCCN'];
    }

    /**
     * Sets gCCN
     *
     * @param string|null $gCCN The Global Consolidation Clearance Number(GCCN) generated for the master shipment. This is required for child shipment.
     *
     * @return self
     */
    public function setGCCN($gCCN)
    {
        if (is_null($gCCN)) {
            throw new \InvalidArgumentException('non-nullable gCCN cannot be null');
        }
        if ((mb_strlen($gCCN) > 18)) {
            throw new \InvalidArgumentException('invalid length for $gCCN when calling ShipmentWorldEase., must be smaller than or equal to 18.');
        }

        $this->container['gCCN'] = $gCCN;

        return $this;
    }

    /**
     * Gets masterEUConsolidationIndicator
     *
     * @return string|null
     */
    public function getMasterEUConsolidationIndicator()
    {
        return $this->container['masterEUConsolidationIndicator'];
    }

    /**
     * Sets masterEUConsolidationIndicator
     *
     * @param string|null $masterEUConsolidationIndicator 1 indicates a Master Consolidation request for the European Union.
     *
     * @return self
     */
    public function setMasterEUConsolidationIndicator($masterEUConsolidationIndicator)
    {
        if (is_null($masterEUConsolidationIndicator)) {
            throw new \InvalidArgumentException('non-nullable masterEUConsolidationIndicator cannot be null');
        }
        $this->container['masterEUConsolidationIndicator'] = $masterEUConsolidationIndicator;

        return $this;
    }

    /**
     * Gets masterHasDocBox
     *
     * @return string|null
     */
    public function getMasterHasDocBox()
    {
        return $this->container['masterHasDocBox'];
    }

    /**
     * Sets masterHasDocBox
     *
     * @param string|null $masterHasDocBox This field is a flag to indicate if the request is a master shipment. This is required for Master shipment only. If MasterHasDocBox is \"0\" then request is considered a master shipment.
     *
     * @return self
     */
    public function setMasterHasDocBox($masterHasDocBox)
    {
        if (is_null($masterHasDocBox)) {
            throw new \InvalidArgumentException('non-nullable masterHasDocBox cannot be null');
        }
        $this->container['masterHasDocBox'] = $masterHasDocBox;

        return $this;
    }

    /**
     * Gets masterShipmentChgType
     *
     * @return string
     */
    public function getMasterShipmentChgType()
    {
        return $this->container['masterShipmentChgType'];
    }

    /**
     * Sets masterShipmentChgType
     *
     * @param string $masterShipmentChgType Code that indicates how shipping charges will be paid.  | Code  | Name                | Description:                                                              | | :--:  | :--                 | :--                                                                       | | CAF   | Cost And Freight    | Shipper pays to point of import, conignee pays balance.                   | | COL   | Freight Collect     | Consignee (with valid UPS account) pays all shipping charges              | | DDP   | Delivered Duty Paid | Shipper pays shipping and duty, consignee pays the Value Added Tax (VAT)  | | FOB   | Free On Board       | Shipper pays to point to export, consignee pays balance                   | | PRE   | Prepaid             | Shipper pays all shipping charges                                         | | SDT   | Free Domicile       | Child Shipper pays for shipping, duities and taxes                        |
     *
     * @return self
     */
    public function setMasterShipmentChgType($masterShipmentChgType)
    {
        if (is_null($masterShipmentChgType)) {
            throw new \InvalidArgumentException('non-nullable masterShipmentChgType cannot be null');
        }
        $allowedValues = $this->getMasterShipmentChgTypeAllowableValues();
        if (!in_array($masterShipmentChgType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'masterShipmentChgType', must be one of '%s'",
                    $masterShipmentChgType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['masterShipmentChgType'] = $masterShipmentChgType;

        return $this;
    }

    /**
     * Gets vendorCollectIDNumberExemptIndicator
     *
     * @return string|null
     */
    public function getVendorCollectIDNumberExemptIndicator()
    {
        return $this->container['vendorCollectIDNumberExemptIndicator'];
    }

    /**
     * Sets vendorCollectIDNumberExemptIndicator
     *
     * @param string|null $vendorCollectIDNumberExemptIndicator This field indicates if VendorCollectIDTypeCode and VendorCollectIDNumber should be exempt from validation. \"0\" indicates VendorCollectIDTypeCode and VendorCollectIDNumber fields are required.
     *
     * @return self
     */
    public function setVendorCollectIDNumberExemptIndicator($vendorCollectIDNumberExemptIndicator)
    {
        if (is_null($vendorCollectIDNumberExemptIndicator)) {
            throw new \InvalidArgumentException('non-nullable vendorCollectIDNumberExemptIndicator cannot be null');
        }
        $this->container['vendorCollectIDNumberExemptIndicator'] = $vendorCollectIDNumberExemptIndicator;

        return $this;
    }

    /**
     * Gets portOfEntry
     *
     * @return \OpenAPIClientUPSShipping\Model\ShipmentWorldEasePortOfEntry
     */
    public function getPortOfEntry()
    {
        return $this->container['portOfEntry'];
    }

    /**
     * Sets portOfEntry
     *
     * @param \OpenAPIClientUPSShipping\Model\ShipmentWorldEasePortOfEntry $portOfEntry portOfEntry
     *
     * @return self
     */
    public function setPortOfEntry($portOfEntry)
    {
        if (is_null($portOfEntry)) {
            throw new \InvalidArgumentException('non-nullable portOfEntry cannot be null');
        }
        $this->container['portOfEntry'] = $portOfEntry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


