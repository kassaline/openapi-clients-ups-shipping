<?php
/**
 * PackagePackageServiceOptions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * The Shipping Package API gives the application many ways to manage the shipment of packages to their destination. # Reference - <a href=\"https://developer.ups.com/api/reference/shipping/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix1\" target=\"_blank\" rel=\"noopener\">Appendix 1</a> - <a href=\"https://developer.ups.com/api/reference/shipping/appendix2\" target=\"_blank\" rel=\"noopener\">Appendix 2</a> - <a href=\"https://developer.ups.com/api/reference/shipping/errors\" target=\"_blank\" rel=\"noopener\">Errors</a> - <a href=\"https://developer.ups.com/api/reference/shipping/faq\" target=\"_blank\" rel=\"noopener\">FAQ</a> - <a href=\"https://developer.ups.com/api/reference/shipping/best-practices\" target=\"_blank\" rel=\"noopener noreferrer\"> Best Practices</a>  <br/><p>Try out UPS APIs with example requests using Postman and learn more about the UPS Postman Collection by visiting our <a href=\"https://developer.ups.com/api/reference/postman/guide\" target=\"_blank\" rel=\"noopener\">Postman Guide</a>. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-af2f70b3-405b-4aee-af8d-1eb715e4cebc%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIClientUPSShipping\Model;

use \ArrayAccess;
use \OpenAPIClientUPSShipping\ObjectSerializer;

/**
 * PackagePackageServiceOptions Class Doc Comment
 *
 * @category Class
 * @description Package Service Options container.
 * @package  OpenAPIClientUPSShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PackagePackageServiceOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Package_PackageServiceOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deliveryConfirmation' => '\OpenAPIClientUPSShipping\Model\PackageServiceOptionsDeliveryConfirmation',
        'declaredValue' => '\OpenAPIClientUPSShipping\Model\PackageServiceOptionsDeclaredValue',
        'cOD' => '\OpenAPIClientUPSShipping\Model\PackageServiceOptionsCOD',
        'accessPointCOD' => '\OpenAPIClientUPSShipping\Model\PackageServiceOptionsAccessPointCOD',
        'shipperReleaseIndicator' => 'string',
        'notification' => '\OpenAPIClientUPSShipping\Model\PackageServiceOptionsNotification',
        'hazMat' => '\OpenAPIClientUPSShipping\Model\PackageServiceOptionsHazMat[]',
        'hazMatTypeCode' => 'string',
        'dryIce' => '\OpenAPIClientUPSShipping\Model\PackageServiceOptionsDryIce',
        'uPSPremiumCareIndicator' => 'string',
        'proactiveIndicator' => 'string',
        'packageIdentifier' => 'string',
        'clinicalTrialsID' => 'string',
        'refrigerationIndicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deliveryConfirmation' => null,
        'declaredValue' => null,
        'cOD' => null,
        'accessPointCOD' => null,
        'shipperReleaseIndicator' => null,
        'notification' => null,
        'hazMat' => null,
        'hazMatTypeCode' => null,
        'dryIce' => null,
        'uPSPremiumCareIndicator' => null,
        'proactiveIndicator' => null,
        'packageIdentifier' => null,
        'clinicalTrialsID' => null,
        'refrigerationIndicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deliveryConfirmation' => false,
        'declaredValue' => false,
        'cOD' => false,
        'accessPointCOD' => false,
        'shipperReleaseIndicator' => false,
        'notification' => false,
        'hazMat' => false,
        'hazMatTypeCode' => false,
        'dryIce' => false,
        'uPSPremiumCareIndicator' => false,
        'proactiveIndicator' => false,
        'packageIdentifier' => false,
        'clinicalTrialsID' => false,
        'refrigerationIndicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deliveryConfirmation' => 'DeliveryConfirmation',
        'declaredValue' => 'DeclaredValue',
        'cOD' => 'COD',
        'accessPointCOD' => 'AccessPointCOD',
        'shipperReleaseIndicator' => 'ShipperReleaseIndicator',
        'notification' => 'Notification',
        'hazMat' => 'HazMat',
        'hazMatTypeCode' => 'HazMatTypeCode',
        'dryIce' => 'DryIce',
        'uPSPremiumCareIndicator' => 'UPSPremiumCareIndicator',
        'proactiveIndicator' => 'ProactiveIndicator',
        'packageIdentifier' => 'PackageIdentifier',
        'clinicalTrialsID' => 'ClinicalTrialsID',
        'refrigerationIndicator' => 'RefrigerationIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deliveryConfirmation' => 'setDeliveryConfirmation',
        'declaredValue' => 'setDeclaredValue',
        'cOD' => 'setCOD',
        'accessPointCOD' => 'setAccessPointCOD',
        'shipperReleaseIndicator' => 'setShipperReleaseIndicator',
        'notification' => 'setNotification',
        'hazMat' => 'setHazMat',
        'hazMatTypeCode' => 'setHazMatTypeCode',
        'dryIce' => 'setDryIce',
        'uPSPremiumCareIndicator' => 'setUPSPremiumCareIndicator',
        'proactiveIndicator' => 'setProactiveIndicator',
        'packageIdentifier' => 'setPackageIdentifier',
        'clinicalTrialsID' => 'setClinicalTrialsID',
        'refrigerationIndicator' => 'setRefrigerationIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deliveryConfirmation' => 'getDeliveryConfirmation',
        'declaredValue' => 'getDeclaredValue',
        'cOD' => 'getCOD',
        'accessPointCOD' => 'getAccessPointCOD',
        'shipperReleaseIndicator' => 'getShipperReleaseIndicator',
        'notification' => 'getNotification',
        'hazMat' => 'getHazMat',
        'hazMatTypeCode' => 'getHazMatTypeCode',
        'dryIce' => 'getDryIce',
        'uPSPremiumCareIndicator' => 'getUPSPremiumCareIndicator',
        'proactiveIndicator' => 'getProactiveIndicator',
        'packageIdentifier' => 'getPackageIdentifier',
        'clinicalTrialsID' => 'getClinicalTrialsID',
        'refrigerationIndicator' => 'getRefrigerationIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('deliveryConfirmation', $data ?? [], null);
        $this->setIfExists('declaredValue', $data ?? [], null);
        $this->setIfExists('cOD', $data ?? [], null);
        $this->setIfExists('accessPointCOD', $data ?? [], null);
        $this->setIfExists('shipperReleaseIndicator', $data ?? [], null);
        $this->setIfExists('notification', $data ?? [], null);
        $this->setIfExists('hazMat', $data ?? [], null);
        $this->setIfExists('hazMatTypeCode', $data ?? [], null);
        $this->setIfExists('dryIce', $data ?? [], null);
        $this->setIfExists('uPSPremiumCareIndicator', $data ?? [], null);
        $this->setIfExists('proactiveIndicator', $data ?? [], null);
        $this->setIfExists('packageIdentifier', $data ?? [], null);
        $this->setIfExists('clinicalTrialsID', $data ?? [], null);
        $this->setIfExists('refrigerationIndicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['packageIdentifier']) && (mb_strlen($this->container['packageIdentifier']) > 5)) {
            $invalidProperties[] = "invalid value for 'packageIdentifier', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['packageIdentifier']) && (mb_strlen($this->container['packageIdentifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'packageIdentifier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['clinicalTrialsID']) && (mb_strlen($this->container['clinicalTrialsID']) > 20)) {
            $invalidProperties[] = "invalid value for 'clinicalTrialsID', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['clinicalTrialsID']) && (mb_strlen($this->container['clinicalTrialsID']) < 20)) {
            $invalidProperties[] = "invalid value for 'clinicalTrialsID', the character length must be bigger than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deliveryConfirmation
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageServiceOptionsDeliveryConfirmation|null
     */
    public function getDeliveryConfirmation()
    {
        return $this->container['deliveryConfirmation'];
    }

    /**
     * Sets deliveryConfirmation
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageServiceOptionsDeliveryConfirmation|null $deliveryConfirmation deliveryConfirmation
     *
     * @return self
     */
    public function setDeliveryConfirmation($deliveryConfirmation)
    {
        if (is_null($deliveryConfirmation)) {
            throw new \InvalidArgumentException('non-nullable deliveryConfirmation cannot be null');
        }
        $this->container['deliveryConfirmation'] = $deliveryConfirmation;

        return $this;
    }

    /**
     * Gets declaredValue
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageServiceOptionsDeclaredValue|null
     */
    public function getDeclaredValue()
    {
        return $this->container['declaredValue'];
    }

    /**
     * Sets declaredValue
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageServiceOptionsDeclaredValue|null $declaredValue declaredValue
     *
     * @return self
     */
    public function setDeclaredValue($declaredValue)
    {
        if (is_null($declaredValue)) {
            throw new \InvalidArgumentException('non-nullable declaredValue cannot be null');
        }
        $this->container['declaredValue'] = $declaredValue;

        return $this;
    }

    /**
     * Gets cOD
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageServiceOptionsCOD|null
     */
    public function getCOD()
    {
        return $this->container['cOD'];
    }

    /**
     * Sets cOD
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageServiceOptionsCOD|null $cOD cOD
     *
     * @return self
     */
    public function setCOD($cOD)
    {
        if (is_null($cOD)) {
            throw new \InvalidArgumentException('non-nullable cOD cannot be null');
        }
        $this->container['cOD'] = $cOD;

        return $this;
    }

    /**
     * Gets accessPointCOD
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageServiceOptionsAccessPointCOD|null
     */
    public function getAccessPointCOD()
    {
        return $this->container['accessPointCOD'];
    }

    /**
     * Sets accessPointCOD
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageServiceOptionsAccessPointCOD|null $accessPointCOD accessPointCOD
     *
     * @return self
     */
    public function setAccessPointCOD($accessPointCOD)
    {
        if (is_null($accessPointCOD)) {
            throw new \InvalidArgumentException('non-nullable accessPointCOD cannot be null');
        }
        $this->container['accessPointCOD'] = $accessPointCOD;

        return $this;
    }

    /**
     * Gets shipperReleaseIndicator
     *
     * @return string|null
     */
    public function getShipperReleaseIndicator()
    {
        return $this->container['shipperReleaseIndicator'];
    }

    /**
     * Sets shipperReleaseIndicator
     *
     * @param string|null $shipperReleaseIndicator The presence indicates that the package may be released by driver without a signature from the consignee.  Empty Tag. Only available for US50/PR to US50/PR packages without return service.
     *
     * @return self
     */
    public function setShipperReleaseIndicator($shipperReleaseIndicator)
    {
        if (is_null($shipperReleaseIndicator)) {
            throw new \InvalidArgumentException('non-nullable shipperReleaseIndicator cannot be null');
        }


        $this->container['shipperReleaseIndicator'] = $shipperReleaseIndicator;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageServiceOptionsNotification|null
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageServiceOptionsNotification|null $notification notification
     *
     * @return self
     */
    public function setNotification($notification)
    {
        if (is_null($notification)) {
            throw new \InvalidArgumentException('non-nullable notification cannot be null');
        }
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets hazMat
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageServiceOptionsHazMat[]|null
     */
    public function getHazMat()
    {
        return $this->container['hazMat'];
    }

    /**
     * Sets hazMat
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageServiceOptionsHazMat[]|null $hazMat hazMat
     *
     * @return self
     */
    public function setHazMat($hazMat)
    {
        if (is_null($hazMat)) {
            throw new \InvalidArgumentException('non-nullable hazMat cannot be null');
        }


        $this->container['hazMat'] = $hazMat;

        return $this;
    }

    /**
     * Gets hazMatTypeCode
     *
     * @return string|null
     */
    public function getHazMatTypeCode()
    {
        return $this->container['hazMatTypeCode'];
    }

    /**
     * Sets hazMatTypeCode
     *
     * @param string|null $hazMatTypeCode Field to be used when a shipment contains a HazMat. It will specify the existence of HazMat, and what type. Initially this will be used for UPS Ground saver and Mail Innovations 'USPS Limited Quantities HazMat' Shipments (but may be extended for other types of HazMat in the future).  Valid values are 01.   - USPS Limited Quantities HazMat - 01
     *
     * @return self
     */
    public function setHazMatTypeCode($hazMatTypeCode)
    {
        if (is_null($hazMatTypeCode)) {
            throw new \InvalidArgumentException('non-nullable hazMatTypeCode cannot be null');
        }


        $this->container['hazMatTypeCode'] = $hazMatTypeCode;

        return $this;
    }

    /**
     * Gets dryIce
     *
     * @return \OpenAPIClientUPSShipping\Model\PackageServiceOptionsDryIce|null
     */
    public function getDryIce()
    {
        return $this->container['dryIce'];
    }

    /**
     * Sets dryIce
     *
     * @param \OpenAPIClientUPSShipping\Model\PackageServiceOptionsDryIce|null $dryIce dryIce
     *
     * @return self
     */
    public function setDryIce($dryIce)
    {
        if (is_null($dryIce)) {
            throw new \InvalidArgumentException('non-nullable dryIce cannot be null');
        }
        $this->container['dryIce'] = $dryIce;

        return $this;
    }

    /**
     * Gets uPSPremiumCareIndicator
     *
     * @return string|null
     */
    public function getUPSPremiumCareIndicator()
    {
        return $this->container['uPSPremiumCareIndicator'];
    }

    /**
     * Sets uPSPremiumCareIndicator
     *
     * @param string|null $uPSPremiumCareIndicator An UPSPremiumCareIndicator indicates special handling is required for shipment having controlled substances. Empty Tag means indicator is present.  The UPSPremiumCareIndicator cannot be requested for package with Delivery Confirmation - Adult Signature Required and Delivery Confirmation- Signature Required.  UPSPremiumCareIndicator is valid for following Return services: - Returns Exchange (available with a contract) - Print Return Label - Print and Mail - Electronic Return Label - Return Service Three Attempt  The UPSPremiumCareIndicator can be requested with following UPS services: - UPS Express® Early - UPS Express - UPS Express Saver - UPS Standard - Valid only for Canada to Canada movements.
     *
     * @return self
     */
    public function setUPSPremiumCareIndicator($uPSPremiumCareIndicator)
    {
        if (is_null($uPSPremiumCareIndicator)) {
            throw new \InvalidArgumentException('non-nullable uPSPremiumCareIndicator cannot be null');
        }


        $this->container['uPSPremiumCareIndicator'] = $uPSPremiumCareIndicator;

        return $this;
    }

    /**
     * Gets proactiveIndicator
     *
     * @return string|null
     */
    public function getProactiveIndicator()
    {
        return $this->container['proactiveIndicator'];
    }

    /**
     * Sets proactiveIndicator
     *
     * @param string|null $proactiveIndicator Presence/Absence Indicator. Any value is ignored. If present, the package is rated for UPS Proactive Response and proactive package tracking. Contractual accessorial for health care companies to allow package monitoring throughout the UPS system.  Shippers account needs to have valid contract for UPS Proactive Reponse.
     *
     * @return self
     */
    public function setProactiveIndicator($proactiveIndicator)
    {
        if (is_null($proactiveIndicator)) {
            throw new \InvalidArgumentException('non-nullable proactiveIndicator cannot be null');
        }


        $this->container['proactiveIndicator'] = $proactiveIndicator;

        return $this;
    }

    /**
     * Gets packageIdentifier
     *
     * @return string|null
     */
    public function getPackageIdentifier()
    {
        return $this->container['packageIdentifier'];
    }

    /**
     * Sets packageIdentifier
     *
     * @param string|null $packageIdentifier Identifies the package containing Dangerous Goods.  Required for Hazmat shipment if SubVersion is greater than or equal to 1701.
     *
     * @return self
     */
    public function setPackageIdentifier($packageIdentifier)
    {
        if (is_null($packageIdentifier)) {
            throw new \InvalidArgumentException('non-nullable packageIdentifier cannot be null');
        }
        if ((mb_strlen($packageIdentifier) > 5)) {
            throw new \InvalidArgumentException('invalid length for $packageIdentifier when calling PackagePackageServiceOptions., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($packageIdentifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packageIdentifier when calling PackagePackageServiceOptions., must be bigger than or equal to 1.');
        }

        $this->container['packageIdentifier'] = $packageIdentifier;

        return $this;
    }

    /**
     * Gets clinicalTrialsID
     *
     * @return string|null
     */
    public function getClinicalTrialsID()
    {
        return $this->container['clinicalTrialsID'];
    }

    /**
     * Sets clinicalTrialsID
     *
     * @param string|null $clinicalTrialsID Unique identifier for clinical trials
     *
     * @return self
     */
    public function setClinicalTrialsID($clinicalTrialsID)
    {
        if (is_null($clinicalTrialsID)) {
            throw new \InvalidArgumentException('non-nullable clinicalTrialsID cannot be null');
        }
        if ((mb_strlen($clinicalTrialsID) > 20)) {
            throw new \InvalidArgumentException('invalid length for $clinicalTrialsID when calling PackagePackageServiceOptions., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($clinicalTrialsID) < 20)) {
            throw new \InvalidArgumentException('invalid length for $clinicalTrialsID when calling PackagePackageServiceOptions., must be bigger than or equal to 20.');
        }

        $this->container['clinicalTrialsID'] = $clinicalTrialsID;

        return $this;
    }

    /**
     * Gets refrigerationIndicator
     *
     * @return string|null
     */
    public function getRefrigerationIndicator()
    {
        return $this->container['refrigerationIndicator'];
    }

    /**
     * Sets refrigerationIndicator
     *
     * @param string|null $refrigerationIndicator Presence/Absence Indicator. Any value is ignored. If present, indicates that the package contains an item that needs refrigeration.  Shippers account needs to have a valid contract for Refrigeration.
     *
     * @return self
     */
    public function setRefrigerationIndicator($refrigerationIndicator)
    {
        if (is_null($refrigerationIndicator)) {
            throw new \InvalidArgumentException('non-nullable refrigerationIndicator cannot be null');
        }


        $this->container['refrigerationIndicator'] = $refrigerationIndicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


